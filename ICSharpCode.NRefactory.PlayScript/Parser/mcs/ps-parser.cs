// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

#line 2 "ps-parser.jay"
//
// ps-parser.jay: The Parser for the PlayScript language
// Authors: Miguel de Icaza (miguel@gnome.org)
//          Ravi Pratap     (ravi@ximian.com)
//          Marek Safar	    (marek.safar@gmail.com)
//          Ben Cooley	    (bcooley@zynga.com)
// Dual Licensed under the terms of the GNU GPL and the MIT X11 license
//
// (C) 2001 Ximian, Inc (http://www.ximian.com)
// (C) 2004-2011 Novell, Inc
// Copyright 2011-2012 Xamarin Inc.
//

using System.Text;
using System.IO;
using System;
using System.Collections.Generic;
using ICSharpCode.NRefactory.MonoPlayScript;
using Linq = ICSharpCode.NRefactory.MonoPlayScript.Linq;
using Enum = ICSharpCode.NRefactory.MonoPlayScript.Enum;
using Attribute = ICSharpCode.NRefactory.MonoPlayScript.Attribute;
using Delegate = ICSharpCode.NRefactory.MonoPlayScript.Delegate;
using Nullable = ICSharpCode.NRefactory.MonoPlayScript.Nullable;

namespace Mono.PlayScript
{
	/// <summary>
	///    The PlayScript Parser
	/// </summary>
	public class PlayScriptParser
	{
		[Flags]
		enum ParameterModifierType
		{
			Ref		= 1 << 1,
			Out		= 1 << 2,
			This	= 1 << 3,
			Params	= 1 << 4,
			Arglist	= 1 << 5,
			DefaultValue = 1 << 6,
			
			All = Ref | Out | This | Params | Arglist | DefaultValue
		}
		
		public bool parsing_playscript = false;
		
		static readonly object ModifierNone = 0;
	
		const string RootNs = PsConsts.PsRootNamespace;
	
		NamespaceContainer current_namespace;
		NamespaceContainer prev_namespace;
		NamespaceContainer private_namespace;
		TypeContainer current_container;
		TypeDefinition current_type;
		PropertyBase current_property;
		EventProperty current_event;
		EventField current_event_field;
		FieldBase current_field;
		Constructor current_constructor;
		
		// Set by config params to enable/disable inclusion of methods, fields, consts, classes, structs, etc.
		bool is_config_enabled = true;
		
		bool is_package_function = false;
	
		/// <summary>
		///   Current block is used to add statements as we find
		///   them.  
		/// </summary>
		Block      current_block;
		
		BlockVariable current_variable;

		Delegate   current_delegate;
		
		AnonymousMethodExpression current_anonymous_method;

		/// <summary>
		///   This is used by the unary_expression code to resolve
		///   a name against a parameter.  
		/// </summary>
		
		// FIXME: This is very ugly and it's very hard to reset it correctly
		// on all places, especially when some parameters are autogenerated.
		ParametersCompiled current_local_parameters;

		bool parsing_anonymous_method;
		
		bool async_block;

		///
		/// An out-of-band stack.
		///
		Stack<object> oob_stack;

		///
		/// Controls the verbosity of the errors produced by the parser
		///
		int yacc_verbose_flag;

		/// 
		/// Used by the interactive shell, flags whether EOF was reached
		/// and an error was produced
		///
		public bool UnexpectedEOF;

		///
		/// The current file.
		///
		readonly CompilationSourceFile file;

		///
		/// Temporary Xml documentation cache.
		/// For enum types, we need one more temporary store.
		///
		string tmpComment;
		string enumTypeComment;
	       		
		/// Current attribute target
		string current_attr_target;
		
		ParameterModifierType valid_param_mod;
		
		bool default_parameter_used;

		/// When using the interactive parser, this holds the
		/// resulting expression
		public Class InteractiveResult;

		// Current modifier namespace identifier
		public string ns_modifier;

		//
		// Keeps track of global data changes to undo on parser error
		//
		public Undo undo;
		
		bool? interactive_async;
		
		Stack<Linq.QueryBlock> linq_clause_blocks;

		ModuleContainer module;
		
		readonly CompilerContext compiler;
		readonly LanguageVersion lang_version;
		readonly bool doc_support;
		readonly CompilerSettings settings;
		readonly Report report;
		
		//
		// Instead of allocating carrier array everytime we
		// share the bucket for very common constructs which can never
		// be recursive
		//
		List<Parameter> parameters_bucket;
		
		//
		// Full AST support members
		//
		LocationsBag lbag;
		List<Tuple<Modifiers, Location>> mod_locations;
		Stack<Location> location_stack;
#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = System.Console.Out;

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }
#pragma warning disable 649
  /* An EOF token */
  public int eof_token;
#pragma warning restore 649
  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
//t  internal yydebug.yyDebug debug;

  protected const int yyFinal = 7;
//t // Put this array into a separate class so it is only initialized if debugging is actually used
//t // Use MarshalByRefObject to disable inlining
//t class YYRules : MarshalByRefObject {
//t  public static readonly string [] yyRule = {
//t    "$accept : compilation_unit",
//t    "compilation_unit : outer_declaration opt_EOF",
//t    "$$1 :",
//t    "compilation_unit : interactive_parsing $$1 opt_EOF",
//t    "compilation_unit : documentation_parsing",
//t    "outer_declaration : opt_extern_alias_directives opt_package_directives",
//t    "outer_declaration : opt_extern_alias_directives opt_package_directives package_declaration opt_attributes",
//t    "outer_declaration : opt_extern_alias_directives opt_package_directives attribute_sections",
//t    "outer_declaration : error",
//t    "opt_EOF :",
//t    "opt_EOF : EOF",
//t    "extern_alias_directives : extern_alias_directive",
//t    "extern_alias_directives : extern_alias_directives extern_alias_directive",
//t    "extern_alias_directive : EXTERN IDENTIFIER IDENTIFIER SEMICOLON",
//t    "extern_alias_directive : EXTERN error",
//t    "no_config_package_directive : import_directive",
//t    "no_config_package_directive : use_namespace_directive",
//t    "package_directive : no_config_package_directive",
//t    "package_directive : config_package_directive",
//t    "$$2 :",
//t    "config_package_directive : IDENTIFIER_CONFIG $$2 no_config_package_directive",
//t    "$$3 :",
//t    "config_package_directive : IDENTIFIER_CONFIG OPEN_BRACE $$3 opt_package_directives CLOSE_BRACE",
//t    "package_directives : package_directive",
//t    "package_directives : package_directives package_directive",
//t    "use_namespace_directive : use_namespace",
//t    "use_namespace : USE NAMESPACE IDENTIFIER SEMICOLON",
//t    "import_directive : import_package",
//t    "$$4 :",
//t    "import_package : IMPORT namespace_or_type_expr $$4 DOT_STAR SEMICOLON",
//t    "import_package : IMPORT typeof_type_expression SEMICOLON",
//t    "import_package : IMPORT IDENTIFIER ASSIGN namespace_or_type_expr SEMICOLON",
//t    "import_package : IMPORT error",
//t    "$$5 :",
//t    "$$6 :",
//t    "$$7 :",
//t    "$$8 :",
//t    "package_declaration : opt_attributes PACKAGE $$5 opt_package_name $$6 OPEN_BRACE $$7 opt_package_statements_or_blocks CLOSE_BRACE $$8 opt_package_statements_or_blocks",
//t    "opt_package_name :",
//t    "opt_package_name : package_name",
//t    "package_name : IDENTIFIER",
//t    "package_name : package_name DOT IDENTIFIER",
//t    "package_name : error",
//t    "opt_semicolon :",
//t    "opt_semicolon : SEMICOLON",
//t    "opt_comma :",
//t    "opt_comma : COMMA",
//t    "opt_package_statements_or_blocks : opt_extern_alias_directives opt_package_statements",
//t    "opt_package_statements_or_blocks : OPEN_BRACE opt_package_statements_or_blocks CLOSE_BRACE",
//t    "opt_package_directives :",
//t    "opt_package_directives : package_directives",
//t    "opt_extern_alias_directives :",
//t    "opt_extern_alias_directives : extern_alias_directives",
//t    "opt_package_statements :",
//t    "opt_package_statements : package_statements",
//t    "package_statements : package_statement",
//t    "package_statements : package_statements package_statement",
//t    "package_statement : no_config_package_statement",
//t    "package_statement : config_package_statement",
//t    "package_statement : attribute_sections CLOSE_BRACE",
//t    "no_config_package_statement : type_declaration",
//t    "no_config_package_statement : method_declaration",
//t    "no_config_package_statement : no_config_package_directive",
//t    "$$9 :",
//t    "config_package_statement : IDENTIFIER_CONFIG $$9 no_config_package_statement",
//t    "$$10 :",
//t    "config_package_statement : IDENTIFIER_CONFIG OPEN_BRACE $$10 opt_package_statements CLOSE_BRACE",
//t    "type_declaration : class_declaration",
//t    "type_declaration : struct_declaration",
//t    "type_declaration : interface_declaration",
//t    "type_declaration : enum_declaration",
//t    "type_declaration : delegate_declaration",
//t    "type_declaration : namespace_declaration",
//t    "opt_attributes :",
//t    "opt_attributes : attribute_sections",
//t    "attribute_sections : attribute_section",
//t    "attribute_sections : attribute_sections attribute_section",
//t    "$$11 :",
//t    "attribute_section : OPEN_BRACKET $$11 attribute_section_cont",
//t    "$$12 :",
//t    "attribute_section_cont : attribute_target COLON $$12 attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_section_cont : attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_section_cont : IDENTIFIER error",
//t    "attribute_section_cont : error",
//t    "attribute_target : IDENTIFIER",
//t    "attribute_target : EVENT",
//t    "attribute_target : RETURN",
//t    "attribute_list : attribute",
//t    "attribute_list : attribute_list COMMA attribute",
//t    "$$13 :",
//t    "attribute : attribute_name $$13 opt_attribute_arguments",
//t    "attribute_name : namespace_or_type_expr",
//t    "opt_attribute_arguments :",
//t    "opt_attribute_arguments : OPEN_PARENS attribute_arguments CLOSE_PARENS",
//t    "attribute_arguments :",
//t    "attribute_arguments : positional_argument",
//t    "attribute_arguments : named_attribute_argument",
//t    "attribute_arguments : attribute_arguments COMMA positional_argument",
//t    "attribute_arguments : attribute_arguments COMMA named_attribute_argument",
//t    "$$14 :",
//t    "named_attribute_argument : IDENTIFIER ASSIGN $$14 expression",
//t    "positional_argument : expression",
//t    "positional_argument : error",
//t    "opt_class_member_declarations :",
//t    "opt_class_member_declarations : class_member_declarations",
//t    "class_member_declarations : class_member_declaration",
//t    "class_member_declarations : class_member_declarations class_member_declaration",
//t    "class_member_declaration : constant_declaration",
//t    "class_member_declaration : field_declaration",
//t    "class_member_declaration : method_declaration",
//t    "class_member_declaration : property_declaration",
//t    "class_member_declaration : event_declaration",
//t    "class_member_declaration : indexer_declaration",
//t    "class_member_declaration : operator_declaration",
//t    "class_member_declaration : destructor_declaration",
//t    "class_member_declaration : type_declaration",
//t    "class_member_declaration : member_config_block",
//t    "class_member_declaration : config_member_declaration",
//t    "class_member_declaration : attributes_without_members",
//t    "class_member_declaration : use_namespace_class_directive",
//t    "class_member_declaration : import_class_directive",
//t    "class_member_declaration : error",
//t    "use_namespace_class_directive : opt_attributes opt_modifiers use_namespace_directive",
//t    "import_class_directive : opt_attributes opt_modifiers import_directive",
//t    "$$15 :",
//t    "config_member_declaration : IDENTIFIER_CONFIG $$15 class_member_declaration",
//t    "$$16 :",
//t    "member_config_block : IDENTIFIER_CONFIG OPEN_BRACE $$16 opt_class_member_declarations CLOSE_BRACE",
//t    "$$17 :",
//t    "$$18 :",
//t    "$$19 :",
//t    "$$20 :",
//t    "$$21 :",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT $$17 type_declaration_name $$18 opt_class_extends opt_class_implements opt_type_parameter_constraints_clauses $$19 OPEN_BRACE $$20 opt_class_member_declarations CLOSE_BRACE $$21 opt_semicolon",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT error",
//t    "opt_member_type :",
//t    "opt_member_type : COLON member_type",
//t    "$$22 :",
//t    "constant_declaration : opt_attributes opt_modifiers CONST IDENTIFIER opt_member_type $$22 opt_constant_initializer opt_constant_declarators SEMICOLON",
//t    "opt_constant_declarators :",
//t    "opt_constant_declarators : constant_declarators",
//t    "constant_declarators : constant_declarator",
//t    "constant_declarators : constant_declarators constant_declarator",
//t    "constant_declarator : COMMA IDENTIFIER opt_member_type opt_constant_initializer",
//t    "opt_constant_initializer :",
//t    "opt_constant_initializer : constant_initializer",
//t    "$$23 :",
//t    "constant_initializer : ASSIGN $$23 constant_initializer_expr",
//t    "constant_initializer : error",
//t    "constant_initializer_expr : constant_expression",
//t    "$$24 :",
//t    "field_declaration : opt_attributes opt_modifiers VAR IDENTIFIER opt_member_type $$24 opt_field_initializer opt_field_declarators SEMICOLON",
//t    "$$25 :",
//t    "field_declaration : opt_attributes opt_modifiers FIXED IDENTIFIER COLON simple_type $$25 fixed_field_size opt_fixed_field_declarators SEMICOLON",
//t    "field_declaration : opt_attributes opt_modifiers FIXED IDENTIFIER COLON simple_type error SEMICOLON",
//t    "opt_field_initializer :",
//t    "$$26 :",
//t    "opt_field_initializer : ASSIGN $$26 variable_initializer",
//t    "opt_field_declarators :",
//t    "opt_field_declarators : field_declarators",
//t    "field_declarators : field_declarator",
//t    "field_declarators : field_declarators field_declarator",
//t    "field_declarator : COMMA IDENTIFIER opt_member_type",
//t    "$$27 :",
//t    "field_declarator : COMMA IDENTIFIER opt_member_type ASSIGN $$27 variable_initializer",
//t    "opt_fixed_field_declarators :",
//t    "opt_fixed_field_declarators : fixed_field_declarators",
//t    "fixed_field_declarators : fixed_field_declarator",
//t    "fixed_field_declarators : fixed_field_declarators fixed_field_declarator",
//t    "fixed_field_declarator : COMMA IDENTIFIER fixed_field_size COLON member_type",
//t    "$$28 :",
//t    "fixed_field_size : OPEN_BRACKET $$28 expression CLOSE_BRACKET",
//t    "fixed_field_size : OPEN_BRACKET error",
//t    "variable_initializer : expression",
//t    "variable_initializer : error",
//t    "$$29 :",
//t    "method_declaration : method_header $$29 method_body",
//t    "$$30 :",
//t    "$$31 :",
//t    "method_header : opt_attributes opt_modifiers FUNCTION method_declaration_name OPEN_PARENS $$30 opt_formal_parameter_list CLOSE_PARENS opt_method_return_type $$31 opt_type_parameter_constraints_clauses",
//t    "$$32 :",
//t    "method_header : opt_attributes opt_modifiers FUNCTION_GET method_declaration_name OPEN_PARENS $$32 opt_formal_parameter_list CLOSE_PARENS opt_method_return_type",
//t    "$$33 :",
//t    "method_header : opt_attributes opt_modifiers FUNCTION_SET method_declaration_name OPEN_PARENS $$33 opt_formal_parameter_list CLOSE_PARENS opt_method_return_type",
//t    "$$34 :",
//t    "$$35 :",
//t    "$$36 :",
//t    "method_header : opt_attributes opt_modifiers PARTIAL FUNCTION $$34 method_declaration_name OPEN_PARENS $$35 opt_formal_parameter_list CLOSE_PARENS COLON VOID $$36 opt_type_parameter_constraints_clauses",
//t    "method_header : opt_attributes opt_modifiers FUNCTION modifiers method_declaration_name OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS method_colon member_type",
//t    "method_header : opt_attributes opt_modifiers FUNCTION method_declaration_name error",
//t    "opt_method_return_type :",
//t    "opt_method_return_type : method_colon member_type",
//t    "method_colon : COLON",
//t    "method_body : block",
//t    "method_body : SEMICOLON",
//t    "opt_formal_parameter_list :",
//t    "opt_formal_parameter_list : formal_parameter_list",
//t    "formal_parameter_list : fixed_parameters",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array",
//t    "formal_parameter_list : parameter_array COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array COMMA error",
//t    "formal_parameter_list : parameter_array",
//t    "formal_parameter_list : error",
//t    "fixed_parameters : fixed_parameter",
//t    "fixed_parameters : fixed_parameters COMMA fixed_parameter",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier IDENTIFIER opt_parameter_type",
//t    "fixed_parameter : attribute_sections error",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier IDENTIFIER COLON error",
//t    "$$37 :",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier IDENTIFIER opt_parameter_type ASSIGN $$37 constant_expression",
//t    "opt_parameter_modifier :",
//t    "opt_parameter_modifier : parameter_modifiers",
//t    "parameter_modifiers : parameter_modifier",
//t    "parameter_modifiers : parameter_modifiers parameter_modifier",
//t    "parameter_modifier : REF",
//t    "parameter_modifier : OUT",
//t    "parameter_modifier : THIS",
//t    "parameter_array : opt_attributes DOTDOTDOT IDENTIFIER opt_arglist_type",
//t    "parameter_array : opt_attributes DOTDOTDOT IDENTIFIER ASSIGN constant_expression",
//t    "parameter_array : opt_attributes DOTDOTDOT error",
//t    "opt_arglist_type :",
//t    "opt_arglist_type : COLON IDENTIFIER",
//t    "$$38 :",
//t    "$$39 :",
//t    "$$40 :",
//t    "property_declaration : opt_attributes opt_modifiers PROPERTY member_declaration_name COLON member_type $$38 OPEN_BRACE $$39 accessor_declarations $$40 CLOSE_BRACE",
//t    "$$41 :",
//t    "$$42 :",
//t    "$$43 :",
//t    "indexer_declaration : opt_attributes opt_modifiers INDEXER indexer_declaration_name OPEN_PARENS $$41 opt_formal_parameter_list CLOSE_PARENS COLON member_type OPEN_BRACE $$42 accessor_declarations $$43 CLOSE_BRACE",
//t    "accessor_declarations : get_accessor_declaration",
//t    "accessor_declarations : get_accessor_declaration accessor_declarations",
//t    "accessor_declarations : set_accessor_declaration",
//t    "accessor_declarations : set_accessor_declaration accessor_declarations",
//t    "accessor_declarations : error",
//t    "$$44 :",
//t    "get_accessor_declaration : opt_attributes opt_modifiers GET $$44 accessor_body",
//t    "$$45 :",
//t    "set_accessor_declaration : opt_attributes opt_modifiers SET $$45 accessor_body",
//t    "accessor_body : block",
//t    "accessor_body : SEMICOLON",
//t    "accessor_body : error",
//t    "$$46 :",
//t    "$$47 :",
//t    "$$48 :",
//t    "$$49 :",
//t    "$$50 :",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE $$46 type_declaration_name $$47 opt_interface_extends opt_class_implements opt_type_parameter_constraints_clauses $$48 OPEN_BRACE $$49 opt_interface_member_declarations CLOSE_BRACE $$50 opt_semicolon",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE error",
//t    "opt_interface_member_declarations :",
//t    "opt_interface_member_declarations : interface_member_declarations",
//t    "interface_member_declarations : interface_member_declaration",
//t    "interface_member_declarations : interface_member_declarations interface_member_declaration",
//t    "interface_member_declaration : constant_declaration",
//t    "interface_member_declaration : field_declaration",
//t    "interface_member_declaration : method_declaration",
//t    "interface_member_declaration : property_declaration",
//t    "interface_member_declaration : event_declaration",
//t    "interface_member_declaration : indexer_declaration",
//t    "interface_member_declaration : operator_declaration",
//t    "interface_member_declaration : type_declaration",
//t    "$$51 :",
//t    "operator_declaration : opt_attributes opt_modifiers operator_declarator $$51 operator_body",
//t    "operator_body : block",
//t    "operator_body : SEMICOLON",
//t    "operator_type : type_expression_or_array",
//t    "operator_type : VOID",
//t    "$$52 :",
//t    "operator_declarator : OPERATOR overloadable_operator OPEN_PARENS $$52 opt_formal_parameter_list CLOSE_PARENS COLON operator_type",
//t    "operator_declarator : conversion_operator_declarator",
//t    "overloadable_operator : BANG",
//t    "overloadable_operator : TILDE",
//t    "overloadable_operator : OP_INC",
//t    "overloadable_operator : OP_DEC",
//t    "overloadable_operator : TRUE",
//t    "overloadable_operator : FALSE",
//t    "overloadable_operator : PLUS",
//t    "overloadable_operator : MINUS",
//t    "overloadable_operator : STAR",
//t    "overloadable_operator : DIV",
//t    "overloadable_operator : PERCENT",
//t    "overloadable_operator : BITWISE_AND",
//t    "overloadable_operator : BITWISE_OR",
//t    "overloadable_operator : CARRET",
//t    "overloadable_operator : OP_SHIFT_LEFT",
//t    "overloadable_operator : OP_SHIFT_RIGHT",
//t    "overloadable_operator : OP_USHIFT_RIGHT",
//t    "overloadable_operator : OP_EQ",
//t    "overloadable_operator : OP_NE",
//t    "overloadable_operator : OP_GT",
//t    "overloadable_operator : OP_LT",
//t    "overloadable_operator : OP_GE",
//t    "overloadable_operator : OP_LE",
//t    "overloadable_operator : OP_IN",
//t    "$$53 :",
//t    "conversion_operator_declarator : IMPLICIT OPERATOR type OPEN_PARENS $$53 opt_formal_parameter_list CLOSE_PARENS",
//t    "$$54 :",
//t    "conversion_operator_declarator : EXPLICIT OPERATOR type OPEN_PARENS $$54 opt_formal_parameter_list CLOSE_PARENS",
//t    "conversion_operator_declarator : IMPLICIT error",
//t    "conversion_operator_declarator : EXPLICIT error",
//t    "$$55 :",
//t    "destructor_declaration : opt_attributes opt_modifiers FUNCTION TILDE $$55 IDENTIFIER OPEN_PARENS CLOSE_PARENS method_body",
//t    "$$56 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT member_declaration_name COLON type $$56 opt_event_initializer opt_event_declarators SEMICOLON",
//t    "$$57 :",
//t    "$$58 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT member_declaration_name COLON type OPEN_BRACE $$57 event_accessor_declarations $$58 CLOSE_BRACE",
//t    "opt_event_initializer :",
//t    "$$59 :",
//t    "opt_event_initializer : ASSIGN $$59 event_variable_initializer",
//t    "opt_event_declarators :",
//t    "opt_event_declarators : event_declarators",
//t    "event_declarators : event_declarator",
//t    "event_declarators : event_declarators event_declarator",
//t    "event_declarator : COMMA IDENTIFIER COLON member_type",
//t    "$$60 :",
//t    "event_declarator : COMMA IDENTIFIER COLON member_type ASSIGN $$60 event_variable_initializer",
//t    "$$61 :",
//t    "event_variable_initializer : $$61 variable_initializer",
//t    "event_accessor_declarations : add_accessor_declaration remove_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration add_accessor_declaration",
//t    "event_accessor_declarations : add_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration",
//t    "event_accessor_declarations : error",
//t    "$$62 :",
//t    "add_accessor_declaration : opt_attributes opt_modifiers ADD $$62 event_accessor_block",
//t    "$$63 :",
//t    "remove_accessor_declaration : opt_attributes opt_modifiers REMOVE $$63 event_accessor_block",
//t    "event_accessor_block : opt_semicolon",
//t    "event_accessor_block : block",
//t    "attributes_without_members : attribute_sections CLOSE_BRACE",
//t    "$$64 :",
//t    "$$65 :",
//t    "$$66 :",
//t    "enum_declaration : opt_attributes opt_modifiers ENUM type_declaration_name opt_enum_base $$64 OPEN_BRACE $$65 opt_enum_member_declarations $$66 CLOSE_BRACE opt_semicolon",
//t    "opt_enum_base :",
//t    "opt_enum_base : COLON type",
//t    "opt_enum_base : COLON error",
//t    "opt_enum_member_declarations :",
//t    "opt_enum_member_declarations : enum_member_declarations",
//t    "opt_enum_member_declarations : enum_member_declarations COMMA",
//t    "enum_member_declarations : enum_member_declaration",
//t    "enum_member_declarations : enum_member_declarations COMMA enum_member_declaration",
//t    "enum_member_declaration : opt_attributes IDENTIFIER",
//t    "$$67 :",
//t    "enum_member_declaration : opt_attributes IDENTIFIER $$67 ASSIGN constant_expression",
//t    "enum_member_declaration : opt_attributes IDENTIFIER error",
//t    "enum_member_declaration : attributes_without_members",
//t    "$$68 :",
//t    "$$69 :",
//t    "$$70 :",
//t    "delegate_declaration : opt_attributes opt_modifiers DELEGATE type_declaration_name OPEN_PARENS $$68 opt_formal_parameter_list CLOSE_PARENS COLON member_type $$69 opt_type_parameter_constraints_clauses $$70 SEMICOLON",
//t    "namespace_declaration : opt_attributes opt_modifiers NAMESPACE IDENTIFIER opt_namespace_url SEMICOLON",
//t    "opt_namespace_url :",
//t    "opt_namespace_url : namespace_url",
//t    "namespace_url : ASSIGN LITERAL",
//t    "opt_nullable :",
//t    "opt_nullable : INTERR_NULLABLE",
//t    "namespace_or_type_expr : member_name",
//t    "member_name : simple_name_expr",
//t    "member_name : namespace_or_type_expr DOT IDENTIFIER opt_type_argument_list",
//t    "member_name : namespace_or_type_expr DOT IDENTIFIER generic_dimension",
//t    "simple_name_expr : IDENTIFIER opt_type_argument_list",
//t    "simple_name_expr : IDENTIFIER generic_dimension",
//t    "opt_type_argument_list :",
//t    "opt_type_argument_list : OP_GENERICS_LT type_arguments OP_GENERICS_GT",
//t    "opt_type_argument_list : OP_GENERICS_LT error",
//t    "type_arguments : type",
//t    "type_arguments : type_arguments COMMA type",
//t    "$$71 :",
//t    "type_declaration_name : IDENTIFIER $$71 opt_type_parameter_list",
//t    "member_declaration_name : method_declaration_name",
//t    "method_declaration_name : type_declaration_name",
//t    "method_declaration_name : explicit_interface IDENTIFIER opt_type_parameter_list",
//t    "indexer_declaration_name : THIS",
//t    "indexer_declaration_name : explicit_interface THIS",
//t    "explicit_interface : IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : explicit_interface IDENTIFIER opt_type_argument_list DOT",
//t    "opt_type_parameter_list :",
//t    "opt_type_parameter_list : OP_GENERICS_LT type_parameters OP_GENERICS_GT",
//t    "type_parameters : type_parameter",
//t    "type_parameters : type_parameters COMMA type_parameter",
//t    "type_parameter : opt_attributes opt_type_parameter_variance IDENTIFIER",
//t    "type_parameter : error",
//t    "type_and_void : type_expression_or_array",
//t    "type_and_void : VOID",
//t    "member_type : type_and_void",
//t    "type : type_expression_or_array",
//t    "type : VOID",
//t    "simple_type : type_expression",
//t    "simple_type : VOID",
//t    "opt_parameter_type :",
//t    "opt_parameter_type : COLON parameter_type",
//t    "parameter_type : type_expression_or_array",
//t    "parameter_type : VOID",
//t    "type_expression_or_array : type_expression",
//t    "type_expression_or_array : type_expression rank_specifiers",
//t    "type_expression : namespace_or_type_expr opt_nullable",
//t    "type_expression : STAR",
//t    "type_expression : builtin_types opt_nullable",
//t    "type_list : base_type_name",
//t    "type_list : type_list COMMA base_type_name",
//t    "base_type_name : type",
//t    "builtin_types : DECIMAL",
//t    "builtin_types : FLOAT",
//t    "builtin_types : DOUBLE",
//t    "builtin_types : integral_type",
//t    "integral_type : SBYTE",
//t    "integral_type : BYTE",
//t    "integral_type : SHORT",
//t    "integral_type : USHORT",
//t    "integral_type : INT",
//t    "integral_type : UINT",
//t    "integral_type : LONG",
//t    "integral_type : ULONG",
//t    "integral_type : CHAR",
//t    "primary_expression : primary_expression_or_type",
//t    "primary_expression : literal",
//t    "primary_expression : parenthesized_expression",
//t    "primary_expression : default_value_expression",
//t    "primary_expression : invocation_expression",
//t    "primary_expression : element_access",
//t    "primary_expression : this_access",
//t    "primary_expression : base_access",
//t    "primary_expression : post_increment_expression",
//t    "primary_expression : post_decrement_expression",
//t    "primary_expression : sizeof_expression",
//t    "primary_expression : checked_expression",
//t    "primary_expression : unchecked_expression",
//t    "primary_expression : new_expression",
//t    "primary_expression : anonymous_method_expression",
//t    "primary_expression : array_initializer",
//t    "primary_expression : object_or_collection_initializer",
//t    "primary_expression_or_type : simple_name_expr",
//t    "primary_expression_or_type : IDENTIFIER GENERATE_COMPLETION",
//t    "primary_expression_or_type : builtin_types",
//t    "primary_expression_or_type : member_access",
//t    "literal : boolean_literal",
//t    "literal : LITERAL",
//t    "literal : UNDEFINED",
//t    "literal : NULL",
//t    "boolean_literal : TRUE",
//t    "boolean_literal : FALSE",
//t    "open_parens_any : OPEN_PARENS",
//t    "close_parens : CLOSE_PARENS",
//t    "close_parens : COMPLETE_COMPLETION",
//t    "parenthesized_expression : OPEN_PARENS expression CLOSE_PARENS",
//t    "parenthesized_expression : OPEN_PARENS expression COMPLETE_COMPLETION",
//t    "member_access : primary_expression DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : primary_expression INTERR_OPERATOR DOT identifier_inside_body opt_type_argument_list",
//t    "member_access : primary_expression INTERR_OPERATOR DOT identifier_inside_body opt_type_argument_list",
//t    "member_access : primary_expression DOT_AT IDENTIFIER",
//t    "member_access : AWAIT DOT identifier_inside_body opt_type_argument_list",
//t    "member_access : primary_expression DOT_STAR",
//t    "member_access : primary_expression DOTDOT IDENTIFIER",
//t    "member_access : primary_expression DOTDOT_STAR",
//t    "member_access : primary_expression DOUBLE_COLON IDENTIFIER",
//t    "member_access : primary_expression DOUBLE_COLON OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "member_access : primary_expression DOT_AT OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "member_access : primary_expression DOT OPEN_PARENS expression CLOSE_PARENS",
//t    "member_access : SUPER DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : qualified_alias_member identifier_inside_body generic_dimension",
//t    "member_access : primary_expression DOT GENERATE_COMPLETION",
//t    "member_access : primary_expression DOT IDENTIFIER GENERATE_COMPLETION",
//t    "invocation_expression : SUPER open_parens_any opt_argument_list close_parens",
//t    "invocation_expression : primary_expression open_parens_any opt_argument_list close_parens",
//t    "invocation_expression : primary_expression open_parens_any argument_list error",
//t    "object_or_collection_initializer : init_open_brace opt_member_initializer_list init_close_brace_or_complete_completion",
//t    "object_or_collection_initializer : init_open_brace member_initializer_list COMMA init_close_brace",
//t    "init_open_brace : OPEN_BRACE_INIT",
//t    "init_close_brace : CLOSE_BRACE",
//t    "init_close_brace_or_complete_completion : CLOSE_BRACE",
//t    "init_close_brace_or_complete_completion : COMPLETE_COMPLETION",
//t    "opt_member_initializer_list :",
//t    "opt_member_initializer_list : member_initializer_list",
//t    "member_initializer_list : member_initializer",
//t    "member_initializer_list : member_initializer_list COMMA member_initializer",
//t    "member_initializer_list : member_initializer_list error",
//t    "member_initializer : IDENTIFIER COLON initializer_value",
//t    "member_initializer : AWAIT ASSIGN initializer_value",
//t    "member_initializer : LITERAL COLON initializer_value",
//t    "member_initializer : GENERATE_COMPLETION",
//t    "initializer_value : expression",
//t    "opt_argument_list :",
//t    "opt_argument_list : argument_list",
//t    "argument_list : argument",
//t    "argument_list : argument_list COMMA argument",
//t    "argument_list : argument_list COMMA error",
//t    "argument_list : COMMA error",
//t    "argument : expression",
//t    "argument : non_simple_argument",
//t    "non_simple_argument : REF variable_reference",
//t    "non_simple_argument : REF declaration_expression",
//t    "non_simple_argument : OUT variable_reference",
//t    "non_simple_argument : OUT declaration_expression",
//t    "declaration_expression : OPEN_PARENS declaration_expression CLOSE_PARENS",
//t    "declaration_expression : variable_type identifier_inside_body",
//t    "declaration_expression : variable_type identifier_inside_body ASSIGN expression",
//t    "variable_reference : expression",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "element_access : primary_expression INTERR_OPERATOR OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments error",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR error",
//t    "expression_list : expression",
//t    "expression_list : expression_list COMMA expression",
//t    "expression_list : expression_list error",
//t    "expression_list_arguments : expression_list_argument",
//t    "expression_list_arguments : expression_list_arguments COMMA expression_list_argument",
//t    "expression_list_argument : expression",
//t    "this_access : THIS",
//t    "base_access : SUPER OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "base_access : SUPER OPEN_BRACKET error",
//t    "post_increment_expression : primary_expression OP_INC",
//t    "post_decrement_expression : primary_expression OP_DEC",
//t    "new_expression : NEW new_type_or_member_access",
//t    "new_expression : NEW builtin_types",
//t    "new_expression : NEW OPEN_PARENS expression CLOSE_PARENS",
//t    "new_expression : NEW OP_LT type_expression OP_GT array_initializer",
//t    "new_type_or_member_access : simple_name_expr",
//t    "new_type_or_member_access : THIS",
//t    "new_type_or_member_access : SUPER DOT IDENTIFIER opt_type_argument_list",
//t    "new_type_or_member_access : new_type_or_member_access DOT IDENTIFIER opt_type_argument_list",
//t    "rank_specifiers : rank_specifier",
//t    "rank_specifiers : rank_specifier rank_specifiers",
//t    "rank_specifier : OPEN_BRACKET CLOSE_BRACKET",
//t    "rank_specifier : OPEN_BRACKET dim_separators CLOSE_BRACKET",
//t    "dim_separators : COMMA",
//t    "dim_separators : dim_separators COMMA",
//t    "array_initializer : init_open_bracket init_close_bracket",
//t    "array_initializer : init_open_bracket_expr variable_initializer_list opt_comma init_close_bracket",
//t    "init_open_bracket : OPEN_BRACKET",
//t    "init_open_bracket_expr : OPEN_BRACKET_EXPR",
//t    "init_close_bracket : CLOSE_BRACKET",
//t    "variable_initializer_list : variable_initializer",
//t    "variable_initializer_list : variable_initializer_list COMMA variable_initializer",
//t    "typeof_expression : TYPEOF open_parens_any typeof_type_expression CLOSE_PARENS",
//t    "typeof_type_expression : type_and_void",
//t    "typeof_type_expression : error",
//t    "generic_dimension : GENERIC_DIMENSION",
//t    "sizeof_expression : SIZEOF open_parens_any type CLOSE_PARENS",
//t    "sizeof_expression : SIZEOF open_parens_any type error",
//t    "checked_expression : CHECKED open_parens_any expression CLOSE_PARENS",
//t    "checked_expression : CHECKED error",
//t    "unchecked_expression : UNCHECKED open_parens_any expression CLOSE_PARENS",
//t    "unchecked_expression : UNCHECKED error",
//t    "$$72 :",
//t    "$$73 :",
//t    "anonymous_method_expression : FUNCTION OPEN_PARENS $$72 opt_formal_parameter_list CLOSE_PARENS COLON member_type $$73 anon_block",
//t    "$$74 :",
//t    "$$75 :",
//t    "anonymous_method_expression : ASYNC FUNCTION OPEN_PARENS $$74 opt_formal_parameter_list CLOSE_PARENS COLON member_type $$75 anon_block",
//t    "$$76 :",
//t    "$$77 :",
//t    "local_function_statement : FUNCTION IDENTIFIER OPEN_PARENS $$76 opt_formal_parameter_list CLOSE_PARENS COLON member_type $$77 block",
//t    "$$78 :",
//t    "$$79 :",
//t    "local_function_statement : ASYNC FUNCTION IDENTIFIER OPEN_PARENS $$78 opt_formal_parameter_list CLOSE_PARENS COLON member_type $$79 block",
//t    "default_value_expression : DEFAULT open_parens_any type CLOSE_PARENS",
//t    "unary_expression : primary_expression",
//t    "unary_expression : BANG prefixed_unary_expression",
//t    "unary_expression : TILDE prefixed_unary_expression",
//t    "unary_expression : AWAIT prefixed_unary_expression",
//t    "unary_expression : OP_AT prefixed_unary_expression",
//t    "unary_expression : TYPEOF prefixed_unary_expression",
//t    "unary_expression : DELETE prefixed_unary_expression",
//t    "unary_expression : BANG error",
//t    "unary_expression : TILDE error",
//t    "unary_expression : AWAIT error",
//t    "unary_expression : OP_AT error",
//t    "unary_expression : TYPEOF error",
//t    "unary_expression : DELETE error",
//t    "prefixed_unary_expression : unary_expression",
//t    "prefixed_unary_expression : PLUS prefixed_unary_expression",
//t    "prefixed_unary_expression : MINUS prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_INC prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_DEC prefixed_unary_expression",
//t    "prefixed_unary_expression : BITWISE_AND prefixed_unary_expression",
//t    "prefixed_unary_expression : PLUS error",
//t    "prefixed_unary_expression : MINUS error",
//t    "prefixed_unary_expression : OP_INC error",
//t    "prefixed_unary_expression : OP_DEC error",
//t    "prefixed_unary_expression : BITWISE_AND error",
//t    "multiplicative_expression : prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression STAR prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression DIV prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression PERCENT prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression STAR error",
//t    "multiplicative_expression : multiplicative_expression DIV error",
//t    "multiplicative_expression : multiplicative_expression PERCENT error",
//t    "additive_expression : multiplicative_expression",
//t    "additive_expression : additive_expression PLUS multiplicative_expression",
//t    "additive_expression : additive_expression MINUS multiplicative_expression",
//t    "additive_expression : additive_expression OP_IN multiplicative_expression",
//t    "additive_expression : additive_expression AS primary_expression_or_type",
//t    "additive_expression : additive_expression IS primary_expression_or_type",
//t    "additive_expression : additive_expression PLUS error",
//t    "additive_expression : additive_expression MINUS error",
//t    "additive_expression : additive_expression OP_IN error",
//t    "additive_expression : additive_expression AS error",
//t    "additive_expression : additive_expression IS error",
//t    "shift_expression : additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_LEFT additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_RIGHT additive_expression",
//t    "shift_expression : shift_expression OP_USHIFT_RIGHT additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_LEFT error",
//t    "shift_expression : shift_expression OP_SHIFT_RIGHT error",
//t    "shift_expression : shift_expression OP_USHIFT_RIGHT error",
//t    "relational_expression : shift_expression",
//t    "relational_expression : relational_expression OP_LT shift_expression",
//t    "relational_expression : relational_expression OP_GT shift_expression",
//t    "relational_expression : relational_expression OP_LE shift_expression",
//t    "relational_expression : relational_expression OP_GE shift_expression",
//t    "relational_expression : relational_expression OP_LT error",
//t    "relational_expression : relational_expression OP_GT error",
//t    "relational_expression : relational_expression OP_LE error",
//t    "relational_expression : relational_expression OP_GE error",
//t    "equality_expression : relational_expression",
//t    "equality_expression : equality_expression OP_EQ relational_expression",
//t    "equality_expression : equality_expression OP_NE relational_expression",
//t    "equality_expression : equality_expression OP_STRICT_EQ relational_expression",
//t    "equality_expression : equality_expression OP_STRICT_NE relational_expression",
//t    "and_expression : equality_expression",
//t    "and_expression : and_expression BITWISE_AND equality_expression",
//t    "and_expression : and_expression BITWISE_AND error",
//t    "exclusive_or_expression : and_expression",
//t    "exclusive_or_expression : exclusive_or_expression CARRET and_expression",
//t    "exclusive_or_expression : exclusive_or_expression CARRET error",
//t    "inclusive_or_expression : exclusive_or_expression",
//t    "inclusive_or_expression : inclusive_or_expression BITWISE_OR exclusive_or_expression",
//t    "inclusive_or_expression : inclusive_or_expression BITWISE_OR error",
//t    "conditional_and_expression : inclusive_or_expression",
//t    "conditional_and_expression : conditional_and_expression OP_AND inclusive_or_expression",
//t    "conditional_and_expression : conditional_and_expression OP_AND error",
//t    "conditional_or_expression : conditional_and_expression",
//t    "conditional_or_expression : conditional_or_expression OP_OR conditional_and_expression",
//t    "conditional_or_expression : conditional_or_expression OP_OR error",
//t    "null_coalescing_expression : conditional_or_expression",
//t    "null_coalescing_expression : conditional_or_expression OP_COALESCING null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression INTERR expression COLON expression",
//t    "conditional_expression : null_coalescing_expression INTERR expression error",
//t    "conditional_expression : null_coalescing_expression INTERR expression COLON error",
//t    "assignment_expression : prefixed_unary_expression ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MULT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_DIV_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MOD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_ADD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SUB_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_LEFT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_RIGHT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_USHIFT_RIGHT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_AND_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression LOGICAL_AND_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_OR_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression LOGICAL_OR_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_XOR_ASSIGN expression",
//t    "expression_or_error : expression",
//t    "expression_or_error : error",
//t    "expression : assignment_expression",
//t    "expression : non_assignment_expression",
//t    "non_assignment_expression : conditional_expression",
//t    "non_assignment_expression : query_expression",
//t    "constant_expression : expression",
//t    "boolean_expression : expression",
//t    "$$80 :",
//t    "$$81 :",
//t    "$$82 :",
//t    "$$83 :",
//t    "$$84 :",
//t    "class_declaration : opt_attributes opt_modifiers opt_partial CLASS $$80 type_declaration_name $$81 opt_class_extends opt_class_implements opt_type_parameter_constraints_clauses $$82 OPEN_BRACE $$83 opt_class_member_declarations CLOSE_BRACE $$84 opt_semicolon",
//t    "opt_partial :",
//t    "opt_partial : PARTIAL",
//t    "opt_modifiers :",
//t    "opt_modifiers : modifiers",
//t    "modifiers : modifier",
//t    "modifiers : modifiers modifier",
//t    "modifier : NEW",
//t    "modifier : PUBLIC",
//t    "modifier : PROTECTED",
//t    "modifier : INTERNAL",
//t    "modifier : PRIVATE",
//t    "modifier : ABSTRACT",
//t    "modifier : FINAL",
//t    "modifier : STATIC",
//t    "modifier : READONLY",
//t    "modifier : VIRTUAL",
//t    "modifier : OVERRIDE",
//t    "modifier : NATIVE",
//t    "modifier : VOLATILE",
//t    "modifier : UNSAFE",
//t    "modifier : ASYNC",
//t    "modifier : DYNAMIC",
//t    "modifier : IDENTIFIER_MODIFIER",
//t    "opt_class_extends :",
//t    "opt_class_extends : EXTENDS base_type_name",
//t    "opt_class_extends : EXTENDS base_type_name error",
//t    "opt_interface_extends :",
//t    "opt_interface_extends : EXTENDS type_list",
//t    "opt_interface_extends : EXTENDS type_list error",
//t    "opt_class_implements :",
//t    "opt_class_implements : IMPLEMENTS type_list",
//t    "opt_class_implements : IMPLEMENTS type_list error",
//t    "opt_type_parameter_constraints_clauses :",
//t    "opt_type_parameter_constraints_clauses : type_parameter_constraints_clauses",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clause",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clauses type_parameter_constraints_clause",
//t    "type_parameter_constraints_clause : WHERE IDENTIFIER COLON type_parameter_constraints",
//t    "type_parameter_constraints_clause : WHERE IDENTIFIER error",
//t    "type_parameter_constraints : type_parameter_constraint",
//t    "type_parameter_constraints : type_parameter_constraints COMMA type_parameter_constraint",
//t    "type_parameter_constraint : type",
//t    "type_parameter_constraint : NEW OPEN_PARENS CLOSE_PARENS",
//t    "type_parameter_constraint : CLASS",
//t    "type_parameter_constraint : STRUCT",
//t    "opt_type_parameter_variance :",
//t    "opt_type_parameter_variance : type_parameter_variance",
//t    "type_parameter_variance : OUT",
//t    "type_parameter_variance : IN",
//t    "$$85 :",
//t    "block : OPEN_BRACE $$85 opt_statement_list block_end",
//t    "$$86 :",
//t    "anon_block : OPEN_BRACE $$86 opt_statement_list anon_block_end",
//t    "$$87 :",
//t    "config_block : opt_block_config OPEN_BRACE $$87 opt_statement_list block_end",
//t    "opt_block_config :",
//t    "opt_block_config : IDENTIFIER DOUBLE_COLON block_config_identifier",
//t    "block_config_identifier : IDENTIFIER",
//t    "block_end : CLOSE_BRACE",
//t    "block_end : COMPLETE_COMPLETION",
//t    "anon_block_end : CLOSE_BRACE",
//t    "anon_block_end : COMPLETE_COMPLETION",
//t    "$$88 :",
//t    "block_prepared : OPEN_BRACE $$88 opt_statement_list CLOSE_BRACE",
//t    "opt_statement_list :",
//t    "opt_statement_list : statement_list",
//t    "statement_list : statement",
//t    "statement_list : statement_list statement",
//t    "statement : block_variable_declaration",
//t    "statement : valid_declaration_statement",
//t    "statement : labeled_statement",
//t    "statement : error",
//t    "interactive_statement_list : interactive_statement",
//t    "interactive_statement_list : interactive_statement_list interactive_statement",
//t    "interactive_statement : block_variable_declaration",
//t    "interactive_statement : interactive_valid_declaration_statement",
//t    "interactive_statement : labeled_statement",
//t    "valid_declaration_statement : config_block",
//t    "valid_declaration_statement : empty_statement",
//t    "valid_declaration_statement : expression_statement",
//t    "valid_declaration_statement : selection_statement",
//t    "valid_declaration_statement : iteration_statement",
//t    "valid_declaration_statement : jump_statement",
//t    "valid_declaration_statement : try_statement",
//t    "valid_declaration_statement : checked_statement",
//t    "valid_declaration_statement : unchecked_statement",
//t    "valid_declaration_statement : lock_statement",
//t    "valid_declaration_statement : using_statement",
//t    "valid_declaration_statement : unsafe_statement",
//t    "valid_declaration_statement : fixed_statement",
//t    "valid_declaration_statement : local_function_statement",
//t    "interactive_valid_declaration_statement : config_block",
//t    "interactive_valid_declaration_statement : empty_statement",
//t    "interactive_valid_declaration_statement : interactive_expression_statement",
//t    "interactive_valid_declaration_statement : selection_statement",
//t    "interactive_valid_declaration_statement : iteration_statement",
//t    "interactive_valid_declaration_statement : jump_statement",
//t    "interactive_valid_declaration_statement : try_statement",
//t    "interactive_valid_declaration_statement : checked_statement",
//t    "interactive_valid_declaration_statement : unchecked_statement",
//t    "interactive_valid_declaration_statement : lock_statement",
//t    "interactive_valid_declaration_statement : using_statement",
//t    "interactive_valid_declaration_statement : unsafe_statement",
//t    "interactive_valid_declaration_statement : fixed_statement",
//t    "interactive_valid_declaration_statement : local_function_statement",
//t    "embedded_statement : valid_declaration_statement",
//t    "embedded_statement : block_variable_declaration",
//t    "embedded_statement : labeled_statement",
//t    "embedded_statement : error",
//t    "empty_statement : SEMICOLON",
//t    "$$89 :",
//t    "labeled_statement : identifier_inside_body COLON $$89 statement",
//t    "use_namespace_statement : USE NAMESPACE IDENTIFIER stmnt_end_semicolon",
//t    "variable_type : variable_type_simple",
//t    "variable_type : variable_type_simple rank_specifiers",
//t    "variable_type_simple : primary_expression_or_type opt_nullable",
//t    "variable_type_simple : VOID",
//t    "identifier_inside_body : IDENTIFIER",
//t    "identifier_inside_body : AWAIT",
//t    "stmnt_end_semicolon : SEMICOLON",
//t    "$$90 :",
//t    "block_variable_declaration : VAR identifier_inside_body COLON type $$90 opt_local_variable_initializer opt_variable_declarators stmnt_end_semicolon",
//t    "$$91 :",
//t    "block_variable_declaration : VAR identifier_inside_body $$91 opt_local_variable_initializer opt_variable_declarators stmnt_end_semicolon",
//t    "$$92 :",
//t    "block_variable_declaration : CONST identifier_inside_body COLON type $$92 opt_local_variable_initializer opt_variable_declarators stmnt_end_semicolon",
//t    "opt_local_variable_initializer :",
//t    "opt_local_variable_initializer : ASSIGN block_variable_initializer",
//t    "opt_local_variable_initializer : error",
//t    "opt_variable_declarators :",
//t    "opt_variable_declarators : variable_declarators",
//t    "opt_using_or_fixed_variable_declarators :",
//t    "opt_using_or_fixed_variable_declarators : variable_declarators",
//t    "variable_declarators : variable_declarator",
//t    "variable_declarators : variable_declarators variable_declarator",
//t    "variable_declarator : COMMA identifier_inside_body",
//t    "variable_declarator : COMMA identifier_inside_body ASSIGN block_variable_initializer",
//t    "variable_declarator : COMMA identifier_inside_body COLON type",
//t    "variable_declarator : COMMA identifier_inside_body COLON type ASSIGN block_variable_initializer",
//t    "block_variable_initializer : variable_initializer",
//t    "expression_statement : statement_expression stmnt_end_semicolon",
//t    "expression_statement : statement_expression COMPLETE_COMPLETION",
//t    "expression_statement : statement_expression CLOSE_BRACE",
//t    "interactive_expression_statement : interactive_statement_expression SEMICOLON",
//t    "interactive_expression_statement : interactive_statement_expression COMPLETE_COMPLETION",
//t    "statement_expression : expression",
//t    "interactive_statement_expression : expression",
//t    "interactive_statement_expression : error",
//t    "selection_statement : if_statement",
//t    "selection_statement : switch_statement",
//t    "stmnt_close_parens : CLOSE_PARENS",
//t    "stmnt_else : ELSE",
//t    "if_statement : IF open_parens_any boolean_expression stmnt_close_parens embedded_statement",
//t    "if_statement : IF open_parens_any boolean_expression stmnt_close_parens embedded_statement stmnt_else embedded_statement",
//t    "if_statement : IF open_parens_any boolean_expression error",
//t    "$$93 :",
//t    "switch_statement : SWITCH open_parens_any expression CLOSE_PARENS OPEN_BRACE $$93 opt_switch_sections CLOSE_BRACE",
//t    "switch_statement : SWITCH open_parens_any expression error",
//t    "opt_switch_sections :",
//t    "opt_switch_sections : switch_labels",
//t    "opt_switch_sections : switch_sections opt_switch_labels",
//t    "switch_sections : switch_section",
//t    "switch_sections : switch_sections switch_section",
//t    "switch_sections : error",
//t    "switch_section : switch_labels statement_list",
//t    "opt_switch_labels :",
//t    "opt_switch_labels : switch_labels",
//t    "switch_labels : switch_label",
//t    "switch_labels : switch_labels switch_label",
//t    "switch_label : CASE constant_expression COLON",
//t    "switch_label : CASE constant_expression error",
//t    "switch_label : DEFAULT_COLON",
//t    "iteration_statement : while_statement",
//t    "iteration_statement : do_statement",
//t    "iteration_statement : for_statement",
//t    "iteration_statement : foreach_statement",
//t    "while_statement : WHILE open_parens_any boolean_expression stmnt_close_parens embedded_statement",
//t    "while_statement : WHILE open_parens_any boolean_expression error",
//t    "stmnt_do : DO",
//t    "do_while_stmnt_close_parens : CLOSE_PARENS",
//t    "do_statement : stmnt_do embedded_statement WHILE open_parens_any boolean_expression do_while_stmnt_close_parens stmnt_end_semicolon",
//t    "do_statement : stmnt_do embedded_statement error",
//t    "do_statement : stmnt_do embedded_statement WHILE open_parens_any boolean_expression error",
//t    "$$94 :",
//t    "for_statement : FOR open_parens_any $$94 for_statement_cont",
//t    "$$95 :",
//t    "for_statement_cont : for_initializer IN $$95 expression stmnt_close_parens embedded_statement",
//t    "$$96 :",
//t    "for_statement_cont : opt_for_initializer SEMICOLON $$96 for_condition_and_iterator_part embedded_statement",
//t    "for_statement_cont : error",
//t    "$$97 :",
//t    "for_condition_and_iterator_part : opt_for_condition SEMICOLON $$97 for_iterator_part",
//t    "for_condition_and_iterator_part : opt_for_condition close_parens_close_brace",
//t    "for_iterator_part : opt_for_iterator stmnt_close_parens",
//t    "for_iterator_part : opt_for_iterator CLOSE_BRACE",
//t    "close_parens_close_brace : CLOSE_PARENS",
//t    "close_parens_close_brace : CLOSE_BRACE",
//t    "opt_for_initializer :",
//t    "opt_for_initializer : for_initializer",
//t    "$$98 :",
//t    "for_initializer : VAR identifier_inside_body opt_type $$98 opt_local_variable_initializer opt_variable_declarators",
//t    "for_initializer : expression_list",
//t    "opt_type :",
//t    "opt_type : COLON type",
//t    "opt_for_condition :",
//t    "opt_for_condition : boolean_expression",
//t    "opt_for_iterator :",
//t    "opt_for_iterator : for_iterator",
//t    "for_iterator : statement_expression_list",
//t    "statement_expression_list : statement_expression",
//t    "statement_expression_list : statement_expression_list COMMA statement_expression",
//t    "$$99 :",
//t    "$$100 :",
//t    "$$101 :",
//t    "foreach_statement : FOR_EACH $$99 open_parens_any for_initializer IN $$100 expression stmnt_close_parens $$101 embedded_statement",
//t    "jump_statement : break_statement",
//t    "jump_statement : continue_statement",
//t    "jump_statement : goto_statement",
//t    "jump_statement : return_statement",
//t    "jump_statement : throw_statement",
//t    "jump_statement : yield_statement",
//t    "jump_statement : use_namespace_statement",
//t    "break_statement : BREAK stmnt_end_semicolon",
//t    "continue_statement : CONTINUE stmnt_end_semicolon",
//t    "continue_statement : CONTINUE error",
//t    "goto_statement : GOTO identifier_inside_body stmnt_end_semicolon",
//t    "goto_statement : GOTO CASE constant_expression stmnt_end_semicolon",
//t    "goto_statement : GOTO DEFAULT stmnt_end_semicolon",
//t    "return_statement : RETURN opt_expression stmnt_end_semicolon",
//t    "return_statement : RETURN expression error",
//t    "return_statement : RETURN error",
//t    "throw_statement : THROW opt_expression stmnt_end_semicolon",
//t    "throw_statement : THROW expression error",
//t    "throw_statement : THROW error",
//t    "yield_statement : identifier_inside_body RETURN opt_expression stmnt_end_semicolon",
//t    "yield_statement : identifier_inside_body RETURN expression error",
//t    "yield_statement : identifier_inside_body BREAK stmnt_end_semicolon",
//t    "opt_expression :",
//t    "opt_expression : expression",
//t    "try_statement : TRY block catch_clauses",
//t    "try_statement : TRY block FINALLY block",
//t    "try_statement : TRY block catch_clauses FINALLY block",
//t    "try_statement : TRY block error",
//t    "catch_clauses : catch_clause",
//t    "catch_clauses : catch_clauses catch_clause",
//t    "catch_clause : CATCH opt_catch_filter block",
//t    "$$102 :",
//t    "catch_clause : CATCH open_parens_any IDENTIFIER opt_type CLOSE_PARENS $$102 opt_catch_filter block_prepared",
//t    "catch_clause : CATCH open_parens_any error",
//t    "opt_catch_filter :",
//t    "opt_catch_filter : IF open_parens_any expression CLOSE_PARENS",
//t    "checked_statement : CHECKED block",
//t    "unchecked_statement : UNCHECKED block",
//t    "$$103 :",
//t    "unsafe_statement : UNSAFE $$103 block",
//t    "lock_statement : LOCK open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "lock_statement : LOCK open_parens_any expression error",
//t    "$$104 :",
//t    "$$105 :",
//t    "fixed_statement : FIXED open_parens_any type identifier_inside_body $$104 using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators CLOSE_PARENS $$105 embedded_statement",
//t    "$$106 :",
//t    "$$107 :",
//t    "using_statement : USING open_parens_any variable_type identifier_inside_body $$106 using_initialization CLOSE_PARENS $$107 embedded_statement",
//t    "using_statement : USING open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "using_statement : USING open_parens_any expression error",
//t    "using_initialization : using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators",
//t    "using_initialization : error",
//t    "using_or_fixed_variable_initializer :",
//t    "using_or_fixed_variable_initializer : ASSIGN variable_initializer",
//t    "query_expression : first_from_clause query_body",
//t    "query_expression : nested_from_clause query_body",
//t    "query_expression : first_from_clause COMPLETE_COMPLETION",
//t    "query_expression : nested_from_clause COMPLETE_COMPLETION",
//t    "first_from_clause : FROM_FIRST identifier_inside_body IN expression",
//t    "first_from_clause : FROM_FIRST type identifier_inside_body IN expression",
//t    "nested_from_clause : FROM identifier_inside_body IN expression",
//t    "nested_from_clause : FROM type identifier_inside_body IN expression",
//t    "$$108 :",
//t    "from_clause : FROM identifier_inside_body IN $$108 expression_or_error",
//t    "$$109 :",
//t    "from_clause : FROM type identifier_inside_body IN $$109 expression_or_error",
//t    "query_body : query_body_clauses select_or_group_clause opt_query_continuation",
//t    "query_body : select_or_group_clause opt_query_continuation",
//t    "query_body : query_body_clauses COMPLETE_COMPLETION",
//t    "query_body : query_body_clauses error",
//t    "query_body : error",
//t    "$$110 :",
//t    "select_or_group_clause : SELECT $$110 expression_or_error",
//t    "$$111 :",
//t    "$$112 :",
//t    "select_or_group_clause : GROUP $$111 expression_or_error $$112 BY expression_or_error",
//t    "query_body_clauses : query_body_clause",
//t    "query_body_clauses : query_body_clauses query_body_clause",
//t    "query_body_clause : from_clause",
//t    "query_body_clause : let_clause",
//t    "query_body_clause : where_clause",
//t    "query_body_clause : join_clause",
//t    "query_body_clause : orderby_clause",
//t    "$$113 :",
//t    "let_clause : LET identifier_inside_body ASSIGN $$113 expression_or_error",
//t    "$$114 :",
//t    "where_clause : WHERE $$114 expression_or_error",
//t    "$$115 :",
//t    "$$116 :",
//t    "$$117 :",
//t    "join_clause : JOIN identifier_inside_body IN $$115 expression_or_error ON $$116 expression_or_error EQUALS $$117 expression_or_error opt_join_into",
//t    "$$118 :",
//t    "$$119 :",
//t    "$$120 :",
//t    "join_clause : JOIN type identifier_inside_body IN $$118 expression_or_error ON $$119 expression_or_error EQUALS $$120 expression_or_error opt_join_into",
//t    "opt_join_into :",
//t    "opt_join_into : INTO identifier_inside_body",
//t    "$$121 :",
//t    "orderby_clause : ORDERBY $$121 orderings",
//t    "orderings : order_by",
//t    "$$122 :",
//t    "orderings : order_by COMMA $$122 orderings_then_by",
//t    "orderings_then_by : then_by",
//t    "$$123 :",
//t    "orderings_then_by : orderings_then_by COMMA $$123 then_by",
//t    "order_by : expression",
//t    "order_by : expression ASCENDING",
//t    "order_by : expression DESCENDING",
//t    "then_by : expression",
//t    "then_by : expression ASCENDING",
//t    "then_by : expression DESCENDING",
//t    "opt_query_continuation :",
//t    "$$124 :",
//t    "opt_query_continuation : INTO identifier_inside_body $$124 query_body",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER EOF",
//t    "interactive_parsing : EVAL_USING_DECLARATIONS_UNIT_PARSER package_directives opt_COMPLETE_COMPLETION",
//t    "$$125 :",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER $$125 interactive_statement_list opt_COMPLETE_COMPLETION",
//t    "interactive_parsing : EVAL_COMPILATION_UNIT_PARSER interactive_compilation_unit",
//t    "interactive_compilation_unit : opt_extern_alias_directives opt_package_directives",
//t    "interactive_compilation_unit : opt_extern_alias_directives opt_package_directives package_declaration",
//t    "opt_COMPLETE_COMPLETION :",
//t    "opt_COMPLETE_COMPLETION : COMPLETE_COMPLETION",
//t    "documentation_parsing : DOC_SEE doc_cref",
//t    "doc_cref : doc_type_declaration_name opt_doc_method_sig",
//t    "doc_cref : doc_type_declaration_name DOT THIS",
//t    "$$126 :",
//t    "doc_cref : doc_type_declaration_name DOT THIS OPEN_BRACKET $$126 opt_doc_parameters CLOSE_BRACKET",
//t    "doc_cref : EXPLICIT OPERATOR type opt_doc_method_sig",
//t    "doc_cref : IMPLICIT OPERATOR type opt_doc_method_sig",
//t    "doc_cref : OPERATOR overloadable_operator opt_doc_method_sig",
//t    "doc_type_declaration_name : type_declaration_name",
//t    "doc_type_declaration_name : doc_type_declaration_name DOT type_declaration_name",
//t    "opt_doc_method_sig :",
//t    "$$127 :",
//t    "opt_doc_method_sig : OPEN_PARENS $$127 opt_doc_parameters CLOSE_PARENS",
//t    "opt_doc_parameters :",
//t    "opt_doc_parameters : doc_parameters",
//t    "doc_parameters : doc_parameter",
//t    "doc_parameters : doc_parameters COMMA doc_parameter",
//t    "doc_parameter : opt_parameter_modifier parameter_type",
//t  };
//t public static string getRule (int index) {
//t    return yyRule [index];
//t }
//t}
  protected static readonly string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"EOF","NONE","ERROR",
    "FIRST_KEYWORD","ABSTRACT","AS","ADD","SUPER","BOOL","BOOLEAN",
    "BREAK","BYTE","CASE","CATCH","CHAR","CHECKED","CLASS","CONST",
    "CONTINUE","DECIMAL","DEFAULT","DELEGATE","DELETE","DO","DOUBLE",
    "DOUBLE2","DOUBLE3","DOUBLE4","DYNAMIC","EACH","ELSE","ENUM","EVENT",
    "EXPLICIT","EXTENDS","FALSE","FINAL","FINALLY","FIXED","FLOAT",
    "FLOAT2","FLOAT3","FLOAT4","FOR","FOR_EACH","FUNCTION","FUNCTION_GET",
    "FUNCTION_SET","GOTO","IF","IMPLICIT","IMPLEMENTS","IMPORT","IN",
    "INDEXER","INSTANCEOF","INT","INTERFACE","INTERNAL","IS","LOCK",
    "LONG","NAMESPACE","NATIVE","NEW","NULL","OBJECT","OPERATOR","OUT",
    "OVERRIDE","OVERLOAD","PACKAGE","PARAMS","PRIVATE","PROPERTY",
    "PROTECTED","PUBLIC","READONLY","REF","RETURN","REMOVE","SBYTE",
    "SHORT","SIZEOF","STACKALLOC","STATIC","STRING","STRUCT","SWITCH",
    "THIS","THROW","TRUE","TRY","TYPEOF","UINT","ULONG","UNCHECKED",
    "UNDEFINED","UNSAFE","USE","USHORT","USING","VAR","VIRTUAL","VOID",
    "VOLATILE","WHERE","WHILE","PARTIAL","ARROW","FROM","FROM_FIRST",
    "JOIN","ON","EQUALS","SELECT","GROUP","BY","LET","ORDERBY",
    "ASCENDING","DESCENDING","INTO","INTERR_NULLABLE","EXTERN","ASYNC",
    "AWAIT","INTERR_OPERATOR","GET","SET","LAST_KEYWORD","OPEN_BRACE",
    "CLOSE_BRACE","OPEN_BRACKET","CLOSE_BRACKET","OPEN_PARENS",
    "CLOSE_PARENS","DOT","DOT_AT","DOT_STAR","DOTDOT","DOTDOT_AT",
    "DOTDOT_STAR","DOTDOTDOT","DOT_OPEN_PARENS","CLOSE_PARENS_DOT",
    "COMMA","COLON","SEMICOLON","TILDE","PLUS","MINUS","BANG","ASSIGN",
    "OP_LT","OP_GT","BITWISE_AND","BITWISE_OR","LOGICAL_AND_ASSIGN",
    "LOGICAL_OR_ASSIGN","STAR","PERCENT","DIV","CARRET","INTERR",
    "DOUBLE_COLON","OP_INC","OP_DEC","OP_SHIFT_LEFT","OP_SHIFT_RIGHT",
    "OP_USHIFT_RIGHT","OP_LE","OP_GE","OP_EQ","OP_STRICT_EQ","OP_NE",
    "OP_STRICT_NE","OP_AND","OP_OR","OP_MULT_ASSIGN","OP_DIV_ASSIGN",
    "OP_MOD_ASSIGN","OP_ADD_ASSIGN","OP_SUB_ASSIGN",
    "OP_SHIFT_LEFT_ASSIGN","OP_SHIFT_RIGHT_ASSIGN",
    "OP_USHIFT_RIGHT_ASSIGN","OP_AND_ASSIGN","OP_XOR_ASSIGN",
    "OP_OR_ASSIGN","OP_PTR","OP_COALESCING","OP_IN","OP_AT",
    "OP_GENERICS_LT","OP_GENERICS_LT_DECL","OP_GENERICS_GT","LITERAL",
    "IDENTIFIER","IDENTIFIER_MODIFIER","IDENTIFIER_CONFIG",
    "GENERIC_DIMENSION","DEFAULT_COLON","OPEN_BRACKET_EXPR",
    "OPEN_BRACE_INIT","EVAL_STATEMENT_PARSER",
    "EVAL_COMPILATION_UNIT_PARSER","EVAL_USING_DECLARATIONS_UNIT_PARSER",
    "DOC_SEE","GENERATE_COMPLETION","COMPLETE_COMPLETION","UMINUS",
    "qualified_alias_member",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
//t  public static string yyname (int token) {
//t    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
//t    string name;
//t    if ((name = yyNames[token]) != null) return name;
//t    return "[unknown]";
//t  }

#pragma warning disable 414
  int yyExpectingState;
#pragma warning restore 414
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
//t    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

	static int[] global_yyStates;
	static object[] global_yyVals;
#pragma warning disable 649
	protected bool use_global_stacks;
#pragma warning restore 649
	object[] yyVals;					// value stack
	object yyVal;						// value stack ptr
	int yyToken;						// current input
	int yyTop;

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;		// initial size
    int yyState = 0;                   // state stack ptr
    int [] yyStates;               	// state stack 
    yyVal = null;
    yyToken = -1;
    int yyErrorFlag = 0;				// #tks to shift
	if (use_global_stacks && global_yyStates != null) {
		yyVals = global_yyVals;
		yyStates = global_yyStates;
   } else {
		yyVals = new object [yyMax];
		yyStates = new int [yyMax];
		if (use_global_stacks) {
			global_yyVals = yyVals;
			global_yyStates = yyStates;
		}
	}

    /*yyLoop:*/ for (yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        global::System.Array.Resize (ref yyStates, yyStates.Length+yyMax);
        global::System.Array.Resize (ref yyVals, yyVals.Length+yyMax);
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
//t      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ while (true) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
//t            if (debug != null)
//t              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
//t              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
//t                  if (debug != null)
//t                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
//t                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
//t              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
//t                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
//t              if (debug != null)
//t                debug.discard(yyState, yyToken, yyname(yyToken),
//t  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
//t        if (debug != null)
//t          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyV > yyTop ? null : yyVals[yyV]; // yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 1:
#line 438 "ps-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 2:
#line 439 "ps-parser.jay"
  { Lexer.CompleteOnEOF = false; }
  break;
case 6:
  case_6();
  break;
case 7:
#line 458 "ps-parser.jay"
  {
		module.AddAttributes ((Attributes) yyVals[0+yyTop], current_namespace);
	  }
  break;
case 8:
  case_8();
  break;
case 13:
  case_13();
  break;
case 14:
#line 503 "ps-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 19:
  case_19();
  break;
case 20:
  case_20();
  break;
case 21:
  case_21();
  break;
case 22:
  case_22();
  break;
case 25:
  case_25();
  break;
case 27:
  case_27();
  break;
case 28:
#line 569 "ps-parser.jay"
  {
	    Lexer.AllowAutoSemiAfterToken(Token.DOT_STAR, true);
	  }
  break;
case 29:
  case_29();
  break;
case 30:
  case_30();
  break;
case 31:
  case_31();
  break;
case 32:
  case_32();
  break;
case 33:
#line 621 "ps-parser.jay"
  {
	  	Lexer.AutoSemiInsertion = false;
	  }
  break;
case 34:
  case_34();
  break;
case 35:
  case_35();
  break;
case 36:
  case_36();
  break;
case 37:
  case_37();
  break;
case 40:
  case_40();
  break;
case 41:
  case_41();
  break;
case 42:
  case_42();
  break;
case 59:
  case_59();
  break;
case 60:
  case_60();
  break;
case 61:
  case_61();
  break;
case 63:
  case_63();
  break;
case 64:
  case_64();
  break;
case 65:
  case_65();
  break;
case 66:
  case_66();
  break;
case 75:
  case_75();
  break;
case 76:
  case_76();
  break;
case 77:
  case_77();
  break;
case 78:
  case_78();
  break;
case 79:
  case_79();
  break;
case 80:
  case_80();
  break;
case 81:
  case_81();
  break;
case 82:
  case_82();
  break;
case 83:
  case_83();
  break;
case 84:
  case_84();
  break;
case 85:
#line 953 "ps-parser.jay"
  { yyVal = "event"; }
  break;
case 86:
#line 954 "ps-parser.jay"
  { yyVal = "return"; }
  break;
case 87:
#line 961 "ps-parser.jay"
  {
		yyVal = new List<Attribute> (4) { (Attribute) yyVals[0+yyTop] };
	  }
  break;
case 88:
  case_88();
  break;
case 89:
#line 978 "ps-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 90:
  case_90();
  break;
case 92:
#line 997 "ps-parser.jay"
  { yyVal = null; }
  break;
case 93:
  case_93();
  break;
case 94:
#line 1007 "ps-parser.jay"
  { yyVal = null; }
  break;
case 95:
  case_95();
  break;
case 96:
  case_96();
  break;
case 97:
  case_97();
  break;
case 98:
  case_98();
  break;
case 99:
#line 1049 "ps-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 100:
  case_100();
  break;
case 101:
#line 1063 "ps-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 102:
  case_102();
  break;
case 105:
  case_105();
  break;
case 106:
  case_106();
  break;
case 121:
  case_121();
  break;
case 122:
  case_122();
  break;
case 123:
  case_123();
  break;
case 124:
  case_124();
  break;
case 125:
  case_125();
  break;
case 126:
  case_126();
  break;
case 127:
  case_127();
  break;
case 128:
  case_128();
  break;
case 129:
  case_129();
  break;
case 130:
  case_130();
  break;
case 131:
  case_131();
  break;
case 132:
  case_132();
  break;
case 133:
  case_133();
  break;
case 134:
#line 1218 "ps-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 135:
#line 1225 "ps-parser.jay"
  {
	  	yyVal = null;
	  }
  break;
case 136:
#line 1229 "ps-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 137:
  case_137();
  break;
case 138:
  case_138();
  break;
case 141:
#line 1277 "ps-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 142:
#line 1281 "ps-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 143:
  case_143();
  break;
case 144:
#line 1304 "ps-parser.jay"
  { 
		yyVal = new ConstInitializer (current_field, new DefaultValueExpression(current_field.TypeExpression, current_field.Location), current_field.Location); 
	  }
  break;
case 146:
#line 1312 "ps-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 147:
  case_147();
  break;
case 148:
  case_148();
  break;
case 150:
  case_150();
  break;
case 151:
  case_151();
  break;
case 152:
  case_152();
  break;
case 153:
  case_153();
  break;
case 154:
#line 1403 "ps-parser.jay"
  {
		report.Error (1641, GetLocation (yyVals[0+yyTop]), "A fixed size buffer field must have the array size specifier after the field name");
	  }
  break;
case 156:
  case_156();
  break;
case 157:
  case_157();
  break;
case 160:
#line 1432 "ps-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 161:
#line 1436 "ps-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 162:
  case_162();
  break;
case 163:
#line 1456 "ps-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 164:
  case_164();
  break;
case 167:
#line 1482 "ps-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 168:
#line 1486 "ps-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 169:
  case_169();
  break;
case 170:
#line 1502 "ps-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 171:
  case_171();
  break;
case 172:
  case_172();
  break;
case 174:
  case_174();
  break;
case 175:
  case_175();
  break;
case 176:
  case_176();
  break;
case 177:
  case_177();
  break;
case 178:
#line 1645 "ps-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 179:
  case_179();
  break;
case 180:
#line 1714 "ps-parser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 181:
  case_181();
  break;
case 182:
#line 1776 "ps-parser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 183:
  case_183();
  break;
case 184:
#line 1845 "ps-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 185:
  case_185();
  break;
case 186:
#line 1855 "ps-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 187:
  case_187();
  break;
case 188:
  case_188();
  break;
case 189:
  case_189();
  break;
case 191:
#line 1926 "ps-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 192:
  case_192();
  break;
case 194:
  case_194();
  break;
case 195:
#line 1947 "ps-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 197:
  case_197();
  break;
case 198:
  case_198();
  break;
case 199:
  case_199();
  break;
case 200:
  case_200();
  break;
case 201:
#line 2005 "ps-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[0+yyTop] } );
	  }
  break;
case 202:
  case_202();
  break;
case 203:
  case_203();
  break;
case 204:
  case_204();
  break;
case 205:
  case_205();
  break;
case 206:
  case_206();
  break;
case 207:
  case_207();
  break;
case 208:
#line 2087 "ps-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 209:
  case_209();
  break;
case 210:
#line 2135 "ps-parser.jay"
  { yyVal = Parameter.Modifier.NONE; }
  break;
case 212:
#line 2143 "ps-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 213:
  case_213();
  break;
case 214:
  case_214();
  break;
case 215:
  case_215();
  break;
case 216:
  case_216();
  break;
case 217:
  case_217();
  break;
case 218:
  case_218();
  break;
case 219:
  case_219();
  break;
case 221:
  case_221();
  break;
case 222:
  case_222();
  break;
case 223:
  case_223();
  break;
case 224:
  case_224();
  break;
case 225:
  case_225();
  break;
case 226:
#line 2297 "ps-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 227:
  case_227();
  break;
case 228:
#line 2338 "ps-parser.jay"
  {
		lexer.PropertyParsing = false;
	  }
  break;
case 229:
  case_229();
  break;
case 234:
  case_234();
  break;
case 235:
  case_235();
  break;
case 236:
  case_236();
  break;
case 237:
  case_237();
  break;
case 238:
  case_238();
  break;
case 240:
  case_240();
  break;
case 241:
  case_241();
  break;
case 242:
  case_242();
  break;
case 243:
  case_243();
  break;
case 244:
  case_244();
  break;
case 245:
  case_245();
  break;
case 246:
  case_246();
  break;
case 247:
  case_247();
  break;
case 248:
#line 2531 "ps-parser.jay"
  {
		Error_SyntaxError (yyToken);	  
	  }
  break;
case 251:
  case_251();
  break;
case 252:
  case_252();
  break;
case 253:
#line 2556 "ps-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 254:
#line 2560 "ps-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 259:
#line 2568 "ps-parser.jay"
  {
	  	report.Error (567, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain operators");
	  }
  break;
case 260:
#line 2576 "ps-parser.jay"
  {
	  	report.Error (524, GetLocation (yyVals[0+yyTop]), "Interfaces cannot declare classes, structs, interfaces, delegates, or enumerations");
	  }
  break;
case 261:
#line 2582 "ps-parser.jay"
  {
	  }
  break;
case 262:
  case_262();
  break;
case 264:
#line 2628 "ps-parser.jay"
  { yyVal = null; }
  break;
case 266:
  case_266();
  break;
case 267:
#line 2644 "ps-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 268:
  case_268();
  break;
case 270:
#line 2692 "ps-parser.jay"
  { yyVal = Operator.OpType.LogicalNot; }
  break;
case 271:
#line 2693 "ps-parser.jay"
  { yyVal = Operator.OpType.OnesComplement; }
  break;
case 272:
#line 2694 "ps-parser.jay"
  { yyVal = Operator.OpType.Increment; }
  break;
case 273:
#line 2695 "ps-parser.jay"
  { yyVal = Operator.OpType.Decrement; }
  break;
case 274:
#line 2696 "ps-parser.jay"
  { yyVal = Operator.OpType.True; }
  break;
case 275:
#line 2697 "ps-parser.jay"
  { yyVal = Operator.OpType.False; }
  break;
case 276:
#line 2699 "ps-parser.jay"
  { yyVal = Operator.OpType.Addition; }
  break;
case 277:
#line 2700 "ps-parser.jay"
  { yyVal = Operator.OpType.Subtraction; }
  break;
case 278:
#line 2702 "ps-parser.jay"
  { yyVal = Operator.OpType.Multiply; }
  break;
case 279:
#line 2703 "ps-parser.jay"
  {  yyVal = Operator.OpType.Division; }
  break;
case 280:
#line 2704 "ps-parser.jay"
  { yyVal = Operator.OpType.Modulus; }
  break;
case 281:
#line 2705 "ps-parser.jay"
  { yyVal = Operator.OpType.BitwiseAnd; }
  break;
case 282:
#line 2706 "ps-parser.jay"
  { yyVal = Operator.OpType.BitwiseOr; }
  break;
case 283:
#line 2707 "ps-parser.jay"
  { yyVal = Operator.OpType.ExclusiveOr; }
  break;
case 284:
#line 2708 "ps-parser.jay"
  { yyVal = Operator.OpType.LeftShift; }
  break;
case 285:
#line 2709 "ps-parser.jay"
  { yyVal = Operator.OpType.RightShift; }
  break;
case 286:
#line 2710 "ps-parser.jay"
  { yyVal = Operator.OpType.AsURightShift; }
  break;
case 287:
#line 2711 "ps-parser.jay"
  { yyVal = Operator.OpType.Equality; }
  break;
case 288:
#line 2712 "ps-parser.jay"
  { yyVal = Operator.OpType.Inequality; }
  break;
case 289:
#line 2713 "ps-parser.jay"
  { yyVal = Operator.OpType.GreaterThan; }
  break;
case 290:
#line 2714 "ps-parser.jay"
  { yyVal = Operator.OpType.LessThan; }
  break;
case 291:
#line 2715 "ps-parser.jay"
  { yyVal = Operator.OpType.GreaterThanOrEqual; }
  break;
case 292:
#line 2716 "ps-parser.jay"
  { yyVal = Operator.OpType.LessThanOrEqual; }
  break;
case 293:
#line 2717 "ps-parser.jay"
  { yyVal = Operator.OpType.AsIn; }
  break;
case 294:
#line 2724 "ps-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 295:
  case_295();
  break;
case 296:
#line 2743 "ps-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 297:
  case_297();
  break;
case 298:
  case_298();
  break;
case 299:
  case_299();
  break;
case 300:
  case_300();
  break;
case 301:
  case_301();
  break;
case 302:
  case_302();
  break;
case 303:
  case_303();
  break;
case 304:
  case_304();
  break;
case 305:
  case_305();
  break;
case 306:
  case_306();
  break;
case 308:
#line 3007 "ps-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 309:
  case_309();
  break;
case 312:
#line 3024 "ps-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 313:
#line 3028 "ps-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 314:
  case_314();
  break;
case 315:
#line 3041 "ps-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 316:
  case_316();
  break;
case 317:
  case_317();
  break;
case 318:
#line 3066 "ps-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 321:
  case_321();
  break;
case 322:
  case_322();
  break;
case 323:
  case_323();
  break;
case 324:
  case_324();
  break;
case 325:
  case_325();
  break;
case 326:
  case_326();
  break;
case 327:
  case_327();
  break;
case 328:
  case_328();
  break;
case 330:
  case_330();
  break;
case 331:
  case_331();
  break;
case 332:
  case_332();
  break;
case 333:
  case_333();
  break;
case 334:
  case_334();
  break;
case 336:
  case_336();
  break;
case 337:
  case_337();
  break;
case 340:
#line 3236 "ps-parser.jay"
  {
	  	lbag.AddLocation (yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 342:
  case_342();
  break;
case 343:
  case_343();
  break;
case 344:
  case_344();
  break;
case 345:
  case_345();
  break;
case 346:
  case_346();
  break;
case 348:
#line 3310 "ps-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 349:
  case_349();
  break;
case 350:
#line 3329 "ps-parser.jay"
  {
		lexer.ConstraintsParsing = false;
	  }
  break;
case 351:
  case_351();
  break;
case 352:
  case_352();
  break;
case 355:
  case_355();
  break;
case 357:
  case_357();
  break;
case 360:
  case_360();
  break;
case 361:
  case_361();
  break;
case 362:
  case_362();
  break;
case 363:
  case_363();
  break;
case 365:
  case_365();
  break;
case 366:
  case_366();
  break;
case 367:
  case_367();
  break;
case 368:
  case_368();
  break;
case 369:
#line 3485 "ps-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 370:
  case_370();
  break;
case 371:
  case_371();
  break;
case 373:
  case_373();
  break;
case 374:
  case_374();
  break;
case 375:
  case_375();
  break;
case 376:
  case_376();
  break;
case 377:
  case_377();
  break;
case 379:
  case_379();
  break;
case 380:
  case_380();
  break;
case 381:
  case_381();
  break;
case 382:
  case_382();
  break;
case 383:
  case_383();
  break;
case 385:
#line 3603 "ps-parser.jay"
  {
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 386:
#line 3610 "ps-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 388:
  case_388();
  break;
case 390:
  case_390();
  break;
case 391:
#line 3638 "ps-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 392:
#line 3642 "ps-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 394:
  case_394();
  break;
case 396:
  case_396();
  break;
case 397:
  case_397();
  break;
case 398:
#line 3679 "ps-parser.jay"
  {
		yyVal = new TypeExpression (compiler.BuiltinTypes.AsUntyped, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 399:
  case_399();
  break;
case 400:
  case_400();
  break;
case 401:
  case_401();
  break;
case 402:
  case_402();
  break;
case 403:
#line 3732 "ps-parser.jay"
  { CheckIsPlayScript("decimal", GetLocation(yyVals[0+yyTop])); yyVal = new TypeExpression (compiler.BuiltinTypes.Decimal, GetLocation (yyVals[0+yyTop])); }
  break;
case 404:
#line 3733 "ps-parser.jay"
  { CheckIsPlayScript("float", GetLocation(yyVals[0+yyTop])); yyVal = new TypeExpression (compiler.BuiltinTypes.Float, GetLocation (yyVals[0+yyTop])); }
  break;
case 405:
#line 3737 "ps-parser.jay"
  { CheckIsPlayScript("double", GetLocation(yyVals[0+yyTop])); yyVal = new TypeExpression (compiler.BuiltinTypes.Double, GetLocation (yyVals[0+yyTop])); }
  break;
case 407:
#line 3745 "ps-parser.jay"
  { CheckIsPlayScript("sbyte", GetLocation(yyVals[0+yyTop])); yyVal = new TypeExpression (compiler.BuiltinTypes.SByte, GetLocation (yyVals[0+yyTop])); }
  break;
case 408:
#line 3746 "ps-parser.jay"
  { CheckIsPlayScript("byte", GetLocation(yyVals[0+yyTop])); yyVal = new TypeExpression (compiler.BuiltinTypes.Byte, GetLocation (yyVals[0+yyTop])); }
  break;
case 409:
#line 3747 "ps-parser.jay"
  { CheckIsPlayScript("short", GetLocation(yyVals[0+yyTop])); yyVal = new TypeExpression (compiler.BuiltinTypes.Short, GetLocation (yyVals[0+yyTop])); }
  break;
case 410:
#line 3748 "ps-parser.jay"
  { CheckIsPlayScript("ushort", GetLocation(yyVals[0+yyTop])); yyVal = new TypeExpression (compiler.BuiltinTypes.UShort, GetLocation (yyVals[0+yyTop])); }
  break;
case 411:
#line 3749 "ps-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Int, GetLocation (yyVals[0+yyTop])); }
  break;
case 412:
#line 3750 "ps-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UInt, GetLocation (yyVals[0+yyTop])); }
  break;
case 413:
#line 3751 "ps-parser.jay"
  { CheckIsPlayScript("long", GetLocation(yyVals[0+yyTop])); yyVal = new TypeExpression (compiler.BuiltinTypes.Long, GetLocation (yyVals[0+yyTop])); }
  break;
case 414:
#line 3752 "ps-parser.jay"
  { CheckIsPlayScript("ulong", GetLocation(yyVals[0+yyTop])); yyVal = new TypeExpression (compiler.BuiltinTypes.ULong, GetLocation (yyVals[0+yyTop])); }
  break;
case 415:
#line 3753 "ps-parser.jay"
  { CheckIsPlayScript("char", GetLocation(yyVals[0+yyTop])); yyVal = new TypeExpression (compiler.BuiltinTypes.Char, GetLocation (yyVals[0+yyTop])); }
  break;
case 434:
  case_434();
  break;
case 435:
#line 3802 "ps-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 439:
#line 3809 "ps-parser.jay"
  { yyVal = new AsUndefinedLiteral (GetLocation (yyVals[0+yyTop])); }
  break;
case 440:
#line 3810 "ps-parser.jay"
  { yyVal = new NullLiteral (GetLocation (yyVals[0+yyTop])); }
  break;
case 441:
#line 3814 "ps-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, true, GetLocation (yyVals[0+yyTop])); }
  break;
case 442:
#line 3815 "ps-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, false, GetLocation (yyVals[0+yyTop])); }
  break;
case 446:
  case_446();
  break;
case 447:
#line 3841 "ps-parser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 448:
  case_448();
  break;
case 449:
  case_449();
  break;
case 450:
  case_450();
  break;
case 451:
  case_451();
  break;
case 452:
  case_452();
  break;
case 453:
  case_453();
  break;
case 454:
  case_454();
  break;
case 455:
  case_455();
  break;
case 456:
  case_456();
  break;
case 457:
  case_457();
  break;
case 458:
  case_458();
  break;
case 459:
  case_459();
  break;
case 460:
  case_460();
  break;
case 461:
  case_461();
  break;
case 462:
#line 3968 "ps-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null,GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 463:
  case_463();
  break;
case 464:
  case_464();
  break;
case 465:
  case_465();
  break;
case 466:
  case_466();
  break;
case 467:
  case_467();
  break;
case 468:
  case_468();
  break;
case 469:
  case_469();
  break;
case 470:
  case_470();
  break;
case 471:
  case_471();
  break;
case 473:
#line 4070 "ps-parser.jay"
  { yyVal = null; }
  break;
case 474:
#line 4074 "ps-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 475:
  case_475();
  break;
case 476:
  case_476();
  break;
case 477:
  case_477();
  break;
case 478:
  case_478();
  break;
case 479:
  case_479();
  break;
case 480:
  case_480();
  break;
case 481:
#line 4130 "ps-parser.jay"
  {
		yyVal = new CompletionElementInitializer (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 483:
#line 4157 "ps-parser.jay"
  { yyVal = null; }
  break;
case 485:
  case_485();
  break;
case 486:
  case_486();
  break;
case 487:
  case_487();
  break;
case 488:
  case_488();
  break;
case 489:
#line 4191 "ps-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 491:
  case_491();
  break;
case 492:
#line 4204 "ps-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref);
	  }
  break;
case 493:
  case_493();
  break;
case 494:
#line 4213 "ps-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out);
	  }
  break;
case 495:
  case_495();
  break;
case 496:
  case_496();
  break;
case 497:
  case_497();
  break;
case 499:
  case_499();
  break;
case 500:
  case_500();
  break;
case 501:
  case_501();
  break;
case 502:
  case_502();
  break;
case 503:
  case_503();
  break;
case 504:
  case_504();
  break;
case 505:
  case_505();
  break;
case 506:
  case_506();
  break;
case 507:
  case_507();
  break;
case 508:
#line 4353 "ps-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 509:
#line 4360 "ps-parser.jay"
  {
		yyVal = new This (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 510:
  case_510();
  break;
case 511:
  case_511();
  break;
case 512:
#line 4380 "ps-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostIncrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 513:
#line 4387 "ps-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostDecrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 514:
#line 4451 "ps-parser.jay"
  {
		yyVal = new AsNew ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 515:
#line 4455 "ps-parser.jay"
  {
		yyVal = new AsNew ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 516:
#line 4459 "ps-parser.jay"
  {
		yyVal = new AsNew ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 517:
  case_517();
  break;
case 519:
#line 4473 "ps-parser.jay"
  {
		yyVal = new This (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 520:
  case_520();
  break;
case 521:
  case_521();
  break;
case 523:
  case_523();
  break;
case 524:
  case_524();
  break;
case 525:
  case_525();
  break;
case 526:
#line 4585 "ps-parser.jay"
  {
		yyVal = 2;
	  }
  break;
case 527:
#line 4589 "ps-parser.jay"
  {
		yyVal = ((int) yyVals[-1+yyTop]) + 1;
	  }
  break;
case 528:
  case_528();
  break;
case 529:
  case_529();
  break;
case 530:
  case_530();
  break;
case 531:
  case_531();
  break;
case 532:
#line 4648 "ps-parser.jay"
  {
      	Lexer.AutoSemiInsertion = (bool) oob_stack.Pop ();
 	  }
  break;
case 533:
  case_533();
  break;
case 534:
  case_534();
  break;
case 535:
  case_535();
  break;
case 537:
  case_537();
  break;
case 538:
  case_538();
  break;
case 539:
  case_539();
  break;
case 540:
  case_540();
  break;
case 541:
  case_541();
  break;
case 542:
  case_542();
  break;
case 543:
  case_543();
  break;
case 544:
  case_544();
  break;
case 545:
#line 4814 "ps-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 546:
  case_546();
  break;
case 547:
#line 4823 "ps-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
	  }
  break;
case 548:
#line 4827 "ps-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 549:
  case_549();
  break;
case 550:
#line 4836 "ps-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
	  }
  break;
case 551:
#line 4843 "ps-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 552:
  case_552();
  break;
case 553:
  case_553();
  break;
case 554:
#line 4864 "ps-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 555:
  case_555();
  break;
case 556:
  case_556();
  break;
case 557:
  case_557();
  break;
case 559:
#line 4914 "ps-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.LogicalNot, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 560:
#line 4918 "ps-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.OnesComplement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 561:
  case_561();
  break;
case 562:
#line 4946 "ps-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.AsE4xAttribute, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 563:
#line 4950 "ps-parser.jay"
  {
	  	yyVal = new AsTypeOf ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 564:
  case_564();
  break;
case 565:
  case_565();
  break;
case 566:
  case_566();
  break;
case 567:
  case_567();
  break;
case 568:
  case_568();
  break;
case 569:
  case_569();
  break;
case 570:
  case_570();
  break;
case 572:
#line 5007 "ps-parser.jay"
  { 
	  	yyVal = new Unary (Unary.Operator.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 573:
#line 5011 "ps-parser.jay"
  { 
		yyVal = new Unary (Unary.Operator.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 574:
#line 5015 "ps-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 575:
#line 5019 "ps-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 576:
#line 5027 "ps-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.AddressOf, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 577:
  case_577();
  break;
case 578:
  case_578();
  break;
case 579:
  case_579();
  break;
case 580:
  case_580();
  break;
case 581:
  case_581();
  break;
case 583:
  case_583();
  break;
case 584:
  case_584();
  break;
case 585:
  case_585();
  break;
case 586:
  case_586();
  break;
case 587:
  case_587();
  break;
case 588:
  case_588();
  break;
case 590:
  case_590();
  break;
case 591:
  case_591();
  break;
case 592:
#line 5121 "ps-parser.jay"
  {
		yyVal = new AsIn ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 593:
#line 5125 "ps-parser.jay"
  {
		yyVal = new As ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 594:
  case_594();
  break;
case 595:
  case_595();
  break;
case 596:
  case_596();
  break;
case 597:
  case_597();
  break;
case 598:
  case_598();
  break;
case 599:
  case_599();
  break;
case 601:
  case_601();
  break;
case 602:
  case_602();
  break;
case 603:
  case_603();
  break;
case 604:
  case_604();
  break;
case 605:
  case_605();
  break;
case 606:
  case_606();
  break;
case 608:
  case_608();
  break;
case 609:
  case_609();
  break;
case 610:
  case_610();
  break;
case 611:
  case_611();
  break;
case 612:
  case_612();
  break;
case 613:
  case_613();
  break;
case 614:
  case_614();
  break;
case 615:
  case_615();
  break;
case 617:
  case_617();
  break;
case 618:
  case_618();
  break;
case 619:
  case_619();
  break;
case 620:
  case_620();
  break;
case 622:
  case_622();
  break;
case 623:
  case_623();
  break;
case 625:
  case_625();
  break;
case 626:
  case_626();
  break;
case 628:
  case_628();
  break;
case 629:
  case_629();
  break;
case 631:
  case_631();
  break;
case 632:
  case_632();
  break;
case 634:
  case_634();
  break;
case 635:
  case_635();
  break;
case 637:
  case_637();
  break;
case 639:
  case_639();
  break;
case 640:
  case_640();
  break;
case 641:
  case_641();
  break;
case 642:
  case_642();
  break;
case 643:
  case_643();
  break;
case 644:
  case_644();
  break;
case 645:
  case_645();
  break;
case 646:
  case_646();
  break;
case 647:
  case_647();
  break;
case 648:
  case_648();
  break;
case 649:
  case_649();
  break;
case 650:
  case_650();
  break;
case 651:
  case_651();
  break;
case 652:
  case_652();
  break;
case 653:
  case_653();
  break;
case 654:
  case_654();
  break;
case 655:
  case_655();
  break;
case 657:
  case_657();
  break;
case 663:
#line 5540 "ps-parser.jay"
  {
		yyVal = new BooleanExpression ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 664:
  case_664();
  break;
case 665:
  case_665();
  break;
case 666:
  case_666();
  break;
case 667:
  case_667();
  break;
case 668:
  case_668();
  break;
case 669:
  case_669();
  break;
case 670:
#line 5618 "ps-parser.jay"
  { yyVal = null; }
  break;
case 671:
#line 5620 "ps-parser.jay"
  { yyVal = yyVals[0+yyTop]; }
  break;
case 672:
  case_672();
  break;
case 673:
#line 5633 "ps-parser.jay"
  {
		lexer.parsing_modifiers = false;		
	  }
  break;
case 675:
  case_675();
  break;
case 676:
  case_676();
  break;
case 677:
  case_677();
  break;
case 678:
  case_678();
  break;
case 679:
  case_679();
  break;
case 680:
  case_680();
  break;
case 681:
  case_681();
  break;
case 682:
  case_682();
  break;
case 683:
  case_683();
  break;
case 684:
  case_684();
  break;
case 685:
  case_685();
  break;
case 686:
  case_686();
  break;
case 687:
  case_687();
  break;
case 688:
  case_688();
  break;
case 689:
  case_689();
  break;
case 690:
  case_690();
  break;
case 691:
  case_691();
  break;
case 692:
  case_692();
  break;
case 694:
#line 5754 "ps-parser.jay"
  {
		current_type.AddBaseForPart ((FullNamedExpression) yyVals[0+yyTop]);
	 }
  break;
case 695:
  case_695();
  break;
case 697:
#line 5768 "ps-parser.jay"
  {
		current_type.SetBaseTypes ((List<FullNamedExpression>) yyVals[0+yyTop]);
	 }
  break;
case 698:
  case_698();
  break;
case 700:
#line 5782 "ps-parser.jay"
  {
		current_type.AddBasesForPart ((List<FullNamedExpression>) yyVals[0+yyTop]);
	 }
  break;
case 701:
  case_701();
  break;
case 703:
#line 5796 "ps-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 704:
  case_704();
  break;
case 705:
  case_705();
  break;
case 706:
  case_706();
  break;
case 707:
  case_707();
  break;
case 708:
  case_708();
  break;
case 709:
  case_709();
  break;
case 710:
  case_710();
  break;
case 711:
  case_711();
  break;
case 712:
#line 5888 "ps-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Class, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 713:
#line 5892 "ps-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Struct, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 714:
#line 5899 "ps-parser.jay"
  {
		yyVal = Variance.None;
	  }
  break;
case 715:
  case_715();
  break;
case 716:
#line 5913 "ps-parser.jay"
  {
		yyVal = Variance.Covariant;
	  }
  break;
case 717:
#line 5917 "ps-parser.jay"
  {
		yyVal = Variance.Contravariant;
	  }
  break;
case 718:
  case_718();
  break;
case 719:
#line 5944 "ps-parser.jay"
  {
  		yyVal = yyVals[0+yyTop];
	  }
  break;
case 720:
  case_720();
  break;
case 721:
#line 5960 "ps-parser.jay"
  {
  		yyVal = yyVals[0+yyTop];
	  }
  break;
case 722:
  case_722();
  break;
case 723:
  case_723();
  break;
case 725:
  case_725();
  break;
case 726:
  case_726();
  break;
case 727:
  case_727();
  break;
case 728:
  case_728();
  break;
case 729:
  case_729();
  break;
case 730:
  case_730();
  break;
case 731:
  case_731();
  break;
case 732:
  case_732();
  break;
case 737:
#line 6063 "ps-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 738:
#line 6067 "ps-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 740:
  case_740();
  break;
case 743:
#line 6091 "ps-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 744:
#line 6095 "ps-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 775:
  case_775();
  break;
case 776:
  case_776();
  break;
case 777:
  case_777();
  break;
case 778:
  case_778();
  break;
case 779:
  case_779();
  break;
case 781:
  case_781();
  break;
case 783:
  case_783();
  break;
case 784:
  case_784();
  break;
case 785:
  case_785();
  break;
case 787:
  case_787();
  break;
case 788:
#line 6301 "ps-parser.jay"
  {
	  	Lexer.AutoSemiInsertion = true;
	  }
  break;
case 789:
  case_789();
  break;
case 790:
  case_790();
  break;
case 791:
  case_791();
  break;
case 792:
  case_792();
  break;
case 793:
  case_793();
  break;
case 794:
  case_794();
  break;
case 796:
  case_796();
  break;
case 797:
  case_797();
  break;
case 801:
  case_801();
  break;
case 804:
  case_804();
  break;
case 805:
  case_805();
  break;
case 806:
  case_806();
  break;
case 807:
  case_807();
  break;
case 809:
  case_809();
  break;
case 810:
#line 6478 "ps-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 811:
  case_811();
  break;
case 812:
#line 6488 "ps-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 813:
#line 6489 "ps-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 814:
#line 6500 "ps-parser.jay"
  {
		yyVal = ConvertExpressionToStatement((Expression)yyVals[0+yyTop]);
	  }
  break;
case 815:
  case_815();
  break;
case 816:
  case_816();
  break;
case 819:
#line 6525 "ps-parser.jay"
  {
	  	Lexer.AutoSemiInsertionAfter = 1;
	  }
  break;
case 820:
#line 6532 "ps-parser.jay"
  {
	  	Lexer.AutoSemiInsertionAfter = 1;
	  }
  break;
case 821:
  case_821();
  break;
case 822:
  case_822();
  break;
case 823:
  case_823();
  break;
case 824:
  case_824();
  break;
case 825:
  case_825();
  break;
case 826:
  case_826();
  break;
case 827:
#line 6590 "ps-parser.jay"
  {
		report.Warning (1522, 1, current_block.StartLocation, "Empty switch block"); 
	  }
  break;
case 828:
#line 6594 "ps-parser.jay"
  {
		report.Warning (1522, 1, current_block.StartLocation, "Empty switch block"); 
	  }
  break;
case 832:
#line 6604 "ps-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 836:
  case_836();
  break;
case 837:
#line 6626 "ps-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 838:
  case_838();
  break;
case 839:
  case_839();
  break;
case 840:
  case_840();
  break;
case 845:
  case_845();
  break;
case 846:
  case_846();
  break;
case 847:
#line 6677 "ps-parser.jay"
  {
	    Lexer.AutoSemiInsertionAfter = 1;
	  }
  break;
case 848:
#line 6684 "ps-parser.jay"
  {
	    Lexer.AutoSemiInsertion = true;
	  }
  break;
case 849:
  case_849();
  break;
case 850:
  case_850();
  break;
case 851:
  case_851();
  break;
case 852:
  case_852();
  break;
case 853:
  case_853();
  break;
case 854:
#line 6733 "ps-parser.jay"
  {
	    lexer.ForInParsing = false;
	  }
  break;
case 855:
  case_855();
  break;
case 856:
  case_856();
  break;
case 857:
  case_857();
  break;
case 858:
  case_858();
  break;
case 859:
  case_859();
  break;
case 860:
#line 6820 "ps-parser.jay"
  {
		yyVal = new Tuple<Location,Location> (GetLocation (yyVals[-2+yyTop]), (Location) yyVals[0+yyTop]);
	  }
  break;
case 861:
  case_861();
  break;
case 862:
  case_862();
  break;
case 863:
  case_863();
  break;
case 865:
#line 6850 "ps-parser.jay"
  { lexer.putback ('}'); }
  break;
case 866:
#line 6854 "ps-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 868:
  case_868();
  break;
case 869:
  case_869();
  break;
case 870:
#line 6881 "ps-parser.jay"
  {
		
	  }
  break;
case 871:
#line 6888 "ps-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 872:
#line 6892 "ps-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 873:
#line 6896 "ps-parser.jay"
  { yyVal = null; }
  break;
case 875:
#line 6901 "ps-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 879:
  case_879();
  break;
case 880:
#line 6930 "ps-parser.jay"
  {
		lexer.ForInParsing = true;
	  }
  break;
case 881:
#line 6934 "ps-parser.jay"
  {
	  	lexer.ForInParsing = false;
	  }
  break;
case 882:
  case_882();
  break;
case 883:
  case_883();
  break;
case 891:
  case_891();
  break;
case 892:
  case_892();
  break;
case 893:
  case_893();
  break;
case 894:
  case_894();
  break;
case 895:
  case_895();
  break;
case 896:
  case_896();
  break;
case 897:
  case_897();
  break;
case 898:
  case_898();
  break;
case 899:
  case_899();
  break;
case 900:
  case_900();
  break;
case 901:
  case_901();
  break;
case 902:
  case_902();
  break;
case 903:
  case_903();
  break;
case 904:
  case_904();
  break;
case 905:
  case_905();
  break;
case 908:
#line 7126 "ps-parser.jay"
  {
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], (List<Catch>) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), false);
	  }
  break;
case 909:
  case_909();
  break;
case 910:
  case_910();
  break;
case 911:
  case_911();
  break;
case 912:
  case_912();
  break;
case 913:
  case_913();
  break;
case 914:
  case_914();
  break;
case 915:
  case_915();
  break;
case 916:
  case_916();
  break;
case 917:
  case_917();
  break;
case 919:
  case_919();
  break;
case 920:
#line 7239 "ps-parser.jay"
  {
		yyVal = new Checked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 921:
#line 7246 "ps-parser.jay"
  {
		yyVal = new Unchecked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 922:
  case_922();
  break;
case 923:
#line 7256 "ps-parser.jay"
  {
		yyVal = new Unsafe ((Block) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 924:
  case_924();
  break;
case 925:
  case_925();
  break;
case 926:
  case_926();
  break;
case 927:
  case_927();
  break;
case 928:
  case_928();
  break;
case 929:
  case_929();
  break;
case 930:
  case_930();
  break;
case 931:
  case_931();
  break;
case 932:
  case_932();
  break;
case 933:
  case_933();
  break;
case 935:
  case_935();
  break;
case 936:
#line 7365 "ps-parser.jay"
  {
		Error_MissingInitializer (lexer.Location);
	  }
  break;
case 937:
  case_937();
  break;
case 938:
  case_938();
  break;
case 939:
  case_939();
  break;
case 940:
  case_940();
  break;
case 941:
  case_941();
  break;
case 942:
  case_942();
  break;
case 943:
  case_943();
  break;
case 944:
  case_944();
  break;
case 945:
  case_945();
  break;
case 946:
#line 7477 "ps-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 947:
  case_947();
  break;
case 948:
#line 7492 "ps-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 949:
  case_949();
  break;
case 950:
  case_950();
  break;
case 951:
  case_951();
  break;
case 953:
  case_953();
  break;
case 954:
  case_954();
  break;
case 955:
#line 7554 "ps-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 956:
  case_956();
  break;
case 957:
  case_957();
  break;
case 958:
  case_958();
  break;
case 959:
  case_959();
  break;
case 961:
  case_961();
  break;
case 967:
#line 7608 "ps-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 968:
  case_968();
  break;
case 969:
#line 7627 "ps-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 970:
  case_970();
  break;
case 971:
  case_971();
  break;
case 972:
  case_972();
  break;
case 973:
  case_973();
  break;
case 974:
  case_974();
  break;
case 975:
  case_975();
  break;
case 976:
  case_976();
  break;
case 977:
  case_977();
  break;
case 978:
  case_978();
  break;
case 980:
#line 7771 "ps-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 981:
#line 7778 "ps-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 982:
  case_982();
  break;
case 984:
  case_984();
  break;
case 985:
  case_985();
  break;
case 987:
  case_987();
  break;
case 988:
  case_988();
  break;
case 989:
#line 7824 "ps-parser.jay"
  {
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 990:
  case_990();
  break;
case 991:
  case_991();
  break;
case 992:
#line 7841 "ps-parser.jay"
  {
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 993:
  case_993();
  break;
case 994:
  case_994();
  break;
case 996:
  case_996();
  break;
case 997:
  case_997();
  break;
case 1000:
  case_1000();
  break;
case 1001:
  case_1001();
  break;
case 1007:
#line 7966 "ps-parser.jay"
  {
		module.DocumentationBuilder.ParsedName = (MemberName) yyVals[0+yyTop];
	  }
  break;
case 1008:
#line 7973 "ps-parser.jay"
  {
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
	  }
  break;
case 1009:
#line 7990 "ps-parser.jay"
  {
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], MemberCache.IndexerNameAlias, Location.Null);
	  }
  break;
case 1010:
#line 7994 "ps-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 1011:
  case_1011();
  break;
case 1012:
  case_1012();
  break;
case 1013:
  case_1013();
  break;
case 1014:
  case_1014();
  break;
case 1016:
#line 8030 "ps-parser.jay"
  {
		yyVal = new MemberName (((MemberName) yyVals[-2+yyTop]), (MemberName) yyVals[0+yyTop]);
	  }
  break;
case 1018:
#line 8038 "ps-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 1019:
#line 8042 "ps-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 1020:
#line 8049 "ps-parser.jay"
  {
		yyVal = new List<DocumentationParameter> (0);
	  }
  break;
case 1022:
  case_1022();
  break;
case 1023:
  case_1023();
  break;
case 1024:
  case_1024();
  break;
#line default
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
//t          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
//t            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
//t        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: ;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: ;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

/*
 All more than 3 lines long rules are wrapped into a method
*/
void case_6()
#line 446 "ps-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			Attributes attrs = (Attributes) yyVals[0+yyTop];
			report.Error (1730, attrs.Attrs [0].Location,
				"Assembly and module attributes must precede all other elements except using clauses and extern alias declarations");

			current_namespace.UnattachedAttributes = attrs;
		}
	  }

void case_8()
#line 460 "ps-parser.jay"
{
		if (yyToken == Token.EXTERN)
			report.Error (439, lexer.Location, "An extern alias declaration must precede all other elements");
		else
			Error_SyntaxError (yyToken);
	  }

void case_13()
#line 480 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "alias") {
			syntax_error (lt.Location, "`alias' expected");
		} else {
			if (lang_version == LanguageVersion.ISO_1)
				FeatureIsNotAvailable (lt.Location, "external alias");

			lt = (LocatedToken) yyVals[-1+yyTop];
			if (lt.Value == QualifiedAliasMember.GlobalAlias) {
				RootNamespace.Error_GlobalNamespaceRedefined (report, lt.Location);
			}
			
			var na = new UsingExternAlias (new SimpleMemberName (lt.Value, lt.Location), GetLocation (yyVals[-3+yyTop]));
			current_namespace.AddUsing (na);
			
			lbag.AddLocation (na, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_19()
#line 518 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
	    is_config_enabled = IsConfigVarDefined(lt.Value); 	  
	  }

void case_20()
#line 523 "ps-parser.jay"
{
	  	is_config_enabled = true;
	  	yyVal = yyVals[0+yyTop];
	  }

void case_21()
#line 528 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		is_config_enabled = IsConfigVarDefined(lt.Value);
	    Lexer.EatBlock = !is_config_enabled;	  
	  }

void case_22()
#line 534 "ps-parser.jay"
{
	  	is_config_enabled = true;
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_25()
#line 547 "ps-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_27()
#line 559 "ps-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_29()
#line 571 "ps-parser.jay"
{
	    if (is_config_enabled) {
			var un = new UsingNamespace ((ATypeNameExpression) yyVals[-3+yyTop], GetLocation (yyVals[-4+yyTop]));
		  	current_namespace.AddUsing (un);
		
			lbag.AddLocation (un, GetLocation (yyVals[0+yyTop]));
			
		    Lexer.AllowAutoSemiAfterToken(Token.DOT_STAR, false);
		}
	  }

void case_30()
#line 582 "ps-parser.jay"
{
	    if (is_config_enabled) {
			var ut = new UsingType ((ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
			current_namespace.AddUsing (ut);
		
			lbag.AddLocation (ut, GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_31()
#line 591 "ps-parser.jay"
{
	    if (is_config_enabled) {
			var lt = (LocatedToken) yyVals[-3+yyTop];
			if (lang_version != LanguageVersion.ISO_1 && lt.Value == "global") {
				report.Warning (440, 2, lt.Location,
				 "An alias named `global' will not be used when resolving `global::'. The global namespace will be used instead");
			}

			var un = new UsingAliasNamespace (new SimpleMemberName (lt.Value, lt.Location), (ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
			current_namespace.AddUsing (un);
		
			lbag.AddLocation (un, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_32()
#line 606 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_34()
#line 623 "ps-parser.jay"
{
		Attributes attrs = (Attributes) yyVals[-3+yyTop];
		var name = yyVals[0+yyTop] as MemberName;
		if (name == null) {
			name = new MemberName(RootNs);
		}
		if (attrs != null) {
			bool valid_global_attrs = true;
			if ((current_namespace.DeclarationFound || current_namespace != file)) {
				valid_global_attrs = false;
			} else {
				foreach (var a in attrs.Attrs) {
					if (a.ExplicitTarget == "assembly" || a.ExplicitTarget == "module")
						continue;
						
					valid_global_attrs = false;
					break;
				}
			}
			
			if (!valid_global_attrs)
				report.Error (1671, name.Location, "A namespace declaration cannot have modifiers or attributes");
		}
	
		module.AddAttributes (attrs, current_namespace);
		
	    /* Close the private package namespace (if it's active)*/
	  	if (current_namespace == private_namespace) {
	  		if (private_namespace.Containers.Count > 0) {
		  		prev_namespace.AddTypeContainer(private_namespace);
				var priv_un = new UsingNamespace (
					private_namespace.NS.MakeTypeNameExpression(GetLocation(yyVals[-3+yyTop])), GetLocation (yyVals[-3+yyTop]));
				prev_namespace.AddUsing(priv_un, true);
			}
			current_container = current_namespace = prev_namespace.Parent;
			prev_namespace = private_namespace = null; 
	  	}
		
		var ns = new NamespaceContainer (name, current_namespace);
		current_namespace.AddTypeContainer (ns);
		current_container = current_namespace = ns;
		var un = new UsingNamespace (new SimpleName (RootNs, GetLocation (yyVals[-3+yyTop])), GetLocation (yyVals[-3+yyTop]));
		current_namespace.AddUsing(un, true);
	  }

void case_35()
#line 668 "ps-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
			
		Lexer.AutoSemiInsertion = true;
	  }

void case_36()
#line 675 "ps-parser.jay"
{
	  	lbag.AddLocation (current_container, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  
	  	if (current_namespace.Parent != null && current_namespace.Parent.Parent == null) { /* Is this the top level package?*/
			var ns = new NamespaceContainer (new MemberName("__" + file.FileName.Replace(".","_").Replace("/","_").Replace("\\", "_").Replace("-", "_")  ), current_namespace);
			prev_namespace = current_namespace;
			current_container = private_namespace = current_namespace = ns;
	    } else {
			current_container = current_namespace = current_namespace.Parent;
		}
		
		lexer.parsing_modifiers = false;
	  }

void case_37()
#line 689 "ps-parser.jay"
{
	    /* Close the private package namespace (if it's active)*/
	  	if (current_namespace == private_namespace) {
	  		if (private_namespace.Containers.Count > 0) {
		  		prev_namespace.AddTypeContainer(private_namespace);
				var priv_un = new UsingNamespace (
					private_namespace.NS.MakeTypeNameExpression(GetLocation(yyVals[-10+yyTop])), GetLocation (yyVals[-10+yyTop]));
				prev_namespace.AddUsing(priv_un, true);
			}
			current_container = current_namespace = prev_namespace.Parent;
			prev_namespace = private_namespace = null; 
	  	}
	  
/*	  	lbag.AddLocation (current_container, GetLocation ($2), GetLocation ($6), GetLocation ($11));*/
	  }

void case_40()
#line 713 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName (lt.Value, lt.Location);
	  }

void case_41()
#line 718 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }

void case_42()
#line 723 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new MemberName ("<invalid>", lexer.Location);
	  }

void case_59()
#line 767 "ps-parser.jay"
{
		current_namespace.UnattachedAttributes = (Attributes) yyVals[-1+yyTop];
		report.Error (1518, lexer.Location, "Attributes must be attached to class, delegate, enum, interface or struct");
		lexer.putback ('}');
		is_config_enabled = true;		
	  }

void case_60()
#line 777 "ps-parser.jay"
{
	    if (is_config_enabled) {
			if (yyVals[0+yyTop] != null) {
				TypeContainer ds = (TypeContainer)yyVals[0+yyTop];

				if ((ds.ModFlags & (Modifiers.PRIVATE | Modifiers.PROTECTED)) != 0){
					report.Error (1527, ds.Location, 
					"Namespace elements cannot be explicitly declared as private, protected or protected internal");
				}

				/* Here is a trick, for explicit attributes we don't know where they belong to until*/
				/* we parse succeeding declaration hence we parse them as normal and re-attach them*/
				/* when we know whether they are global (assembly:, module:) or local (type:).*/
				if (ds.OptAttributes != null) {
					ds.OptAttributes.ConvertGlobalAttributes (ds, current_namespace, !current_namespace.DeclarationFound && current_namespace == file);
				}
			}
			current_namespace.DeclarationFound = true;
		}
	  }

void case_61()
#line 798 "ps-parser.jay"
{
	  	if (is_config_enabled) {
			current_namespace.DeclarationFound = true;
		}
	  }

void case_63()
#line 808 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
	    is_config_enabled = IsConfigVarDefined(lt.Value);	 	  
	  }

void case_64()
#line 813 "ps-parser.jay"
{
	    is_config_enabled = true;
	    yyVal = yyVals[0+yyTop];
	  }

void case_65()
#line 818 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
	    is_config_enabled = IsConfigVarDefined(lt.Value);	  
	  	Lexer.EatBlock = !is_config_enabled;
	  }

void case_66()
#line 824 "ps-parser.jay"
{
	  	is_config_enabled = true;
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_75()
#line 859 "ps-parser.jay"
{
		var sect = (List<Attribute>) yyVals[0+yyTop];
			yyVal = new Attributes (sect);
		}

void case_76()
#line 864 "ps-parser.jay"
{
		Attributes attrs = yyVals[-1+yyTop] as Attributes;
		var sect = (List<Attribute>) yyVals[0+yyTop];
			if (attrs == null)
				attrs = new Attributes (sect);
		else if (sect != null)
				attrs.AddAttributes (sect);
		yyVal = attrs;
	  }

void case_77()
#line 877 "ps-parser.jay"
{
	  	PushLocation (GetLocation (yyVals[0+yyTop]));
		lexer.parsing_attribute_section = true;
	  }

void case_78()
#line 882 "ps-parser.jay"
{
		lexer.parsing_attribute_section = false;
		yyVal = yyVals[0+yyTop];
	  }

void case_79()
#line 890 "ps-parser.jay"
{
		current_attr_target = (string) yyVals[-1+yyTop];
		if (current_attr_target == "assembly" || current_attr_target == "module") {
			Lexer.check_incorrect_doc_comment ();
		}
	  }

void case_80()
#line 897 "ps-parser.jay"
{
		/* when attribute target is invalid*/
		if (current_attr_target == string.Empty)
			yyVal = new List<Attribute> (0);
		else
			yyVal = yyVals[-2+yyTop];
	  
		lbag.InsertLocation (yyVal, 0, PopLocation ());
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));
		}

		current_attr_target = null;
		lexer.parsing_attribute_section = false;
		lexer.AutoSemiInsertionAfter = 1;
 	  }

void case_81()
#line 916 "ps-parser.jay"
{
		lexer.AutoSemiInsertionAfter = 1;
		yyVal = yyVals[-2+yyTop];

		lbag.InsertLocation (yyVal, 0, PopLocation ());
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (yyVal, GetLocation(yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (yyVal, GetLocation(yyVals[0+yyTop]));
		}
	  }

void case_82()
#line 928 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		var lt = (LocatedToken) yyVals[-1+yyTop];
		var tne = new SimpleName (lt.Value, null, lt.Location);

		yyVal = new List<Attribute> () {
			new Attribute (null, tne, null, GetLocation (yyVals[-1+yyTop]), false)
		};
	  }

void case_83()
#line 939 "ps-parser.jay"
{
 		/*CheckAttributeTarget (GetTokenName (yyToken), GetLocation ($1));*/
 		CheckAttributeTarget (yyToken, GetTokenName (yyToken), GetLocation (yyVals[0+yyTop]));
 		yyVal = null;
	  }

void case_84()
#line 948 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		/*$$ = CheckAttributeTarget (lt.Value, lt.Location);*/
		yyVal = CheckAttributeTarget (yyToken, lt.Value, lt.Location);
	  }

void case_88()
#line 963 "ps-parser.jay"
{
		var attrs = (List<Attribute>) yyVals[-2+yyTop];
		if (attrs != null) {
			attrs.Add ((Attribute) yyVals[0+yyTop]);
	  		lbag.AppendTo (attrs, GetLocation (yyVals[-1+yyTop]));
	  	}

		yyVal = attrs;
	  }

void case_90()
#line 980 "ps-parser.jay"
{
		--lexer.parsing_block;
		
		var tne = (ATypeNameExpression) yyVals[-2+yyTop];
		if (tne.HasTypeArguments) {
			report.Error (404, tne.Location, "Attributes cannot be generic");
		}

		yyVal = new Attribute (current_attr_target, tne, (Arguments[]) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), lexer.IsEscapedIdentifier (tne));
	  }

void case_93()
#line 999 "ps-parser.jay"
{
	    lexer.AutoSemiInsertionAfter = 1;
		yyVal = yyVals[-1+yyTop];
	  }

void case_95()
#line 1009 "ps-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);
		yyVal = new Arguments [] { a, null };
	  }

void case_96()
#line 1015 "ps-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);  
		yyVal = new Arguments [] { null, a };
	  }

void case_97()
#line 1021 "ps-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] != null) {
			report.Error (1016, ((Argument) yyVals[0+yyTop]).Expr.Location, "Named attribute arguments must appear after the positional arguments");
			o [0] = new Arguments (4);
		}
		
		Arguments args = ((Arguments) o [0]);
		if (args.Count > 0 && !(yyVals[0+yyTop] is NamedArgument) && args [args.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
		
		args.Add ((Argument) yyVals[0+yyTop]);
	  }

void case_98()
#line 1035 "ps-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] == null) {
			o [1] = new Arguments (4);
		}

		((Arguments) o [1]).Add ((Argument) yyVals[0+yyTop]);
	  }

void case_100()
#line 1051 "ps-parser.jay"
{
	  	--lexer.parsing_block;
	  	var lt = (LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop]);	  
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }

void case_102()
#line 1065 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_105()
#line 1078 "ps-parser.jay"
{
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }

void case_106()
#line 1083 "ps-parser.jay"
{
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }

void case_121()
#line 1106 "ps-parser.jay"
{
		report.Error (1519, lexer.Location, "Unexpected symbol `{0}' in class, struct, or interface member declaration",
			GetSymbolName (yyToken));
		yyVal = null;
		lexer.parsing_generic_declaration = false;
	  }

void case_122()
#line 1118 "ps-parser.jay"
{
	  	if (yyVals[-2+yyTop] != null || (Modifiers) yyVals[-1+yyTop] != 0) {
			report.Error (7058, GetLocation(yyVals[-2+yyTop] ?? yyVals[-1+yyTop]), "Modifiers and attributes not allowed");
	  	}
	  }

void case_123()
#line 1129 "ps-parser.jay"
{
	  	if (yyVals[-2+yyTop] != null || (Modifiers) yyVals[-1+yyTop] != 0) {
			report.Error (7058, GetLocation(yyVals[-2+yyTop] ?? yyVals[-1+yyTop]), "Modifiers and attributes not allowed");
	  	}
	  }

void case_124()
#line 1138 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
	    is_config_enabled = IsConfigVarDefined(lt.Value);	  
	  }

void case_125()
#line 1143 "ps-parser.jay"
{
	    is_config_enabled = true;
	    yyVal = yyVals[0+yyTop];
	  }

void case_126()
#line 1152 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		is_config_enabled = IsConfigVarDefined(lt.Value);
	    Lexer.EatBlock = !is_config_enabled;	  
	  }

void case_127()
#line 1158 "ps-parser.jay"
{
	  	is_config_enabled = true;
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_128()
#line 1169 "ps-parser.jay"
{
		lexer.ConstraintsParsing = true;
		lexer.AutoSemiInsertion = false;
	  }

void case_129()
#line 1174 "ps-parser.jay"
{
	  	bool is_partial = IsPartial(yyVals[-5+yyTop]) || yyVals[-3+yyTop] != null;
		push_current_container (new Struct (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), is_partial);
	  }

void case_130()
#line 1181 "ps-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support)
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-6+yyTop]));
		
		lexer.parsing_modifiers = true;
		lexer.AutoSemiInsertion = true;
	  }

void case_131()
#line 1196 "ps-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
		lexer.DynamicParsing = false;
		Lexer.EatBlock = !is_config_enabled;		
	  }

void case_132()
#line 1203 "ps-parser.jay"
{
		lexer.DynamicParsing = true;
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_133()
#line 1210 "ps-parser.jay"
{
	  	is_config_enabled = true;
		lbag.AppendToMember (current_container, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_137()
#line 1236 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		if (yyVals[0+yyTop] == null) {
		  	if (settings.PsStrictMode)
				report.Error (7012, lt.Location, "Constant `{0}' has no type declaration.", lt.Value);
			else
				report.Warning (1009, 1, lt.Location, "Constant `{0}' has no type declaration.", lt.Value);
			yyVals[0+yyTop] = new UntypedTypeExpression (GetLocation (yyVals[-1+yyTop]));
		}
		var mod = (Modifiers) yyVals[-3+yyTop];
		mod &= ~Modifiers.STATIC;
		current_field = new Const (current_type, (FullNamedExpression) yyVals[0+yyTop], mod, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
		if (is_config_enabled) {
			current_type.AddMember (current_field);
		}
		is_config_enabled = true;
				
		yyVal = current_field;
	  }

void case_138()
#line 1256 "ps-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_field = null;
	  }

void case_143()
#line 1286 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		if (yyVals[-1+yyTop] == null) {
		  	if (settings.PsStrictMode)
				report.Error (7012, lt.Location, "Constant `{0}' has no type declaration.", lt.Value);
			else
				report.Warning (1009, 1, lt.Location, "Constant `{0}' has no type declaration.", lt.Value);
			yyVals[-1+yyTop] = new UntypedTypeExpression (GetLocation (yyVals[-2+yyTop]));
		}
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop], (FullNamedExpression) yyVals[-1+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]));
	  }

void case_147()
#line 1314 "ps-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_148()
#line 1319 "ps-parser.jay"
{
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
		yyVal = null;
	  }

void case_150()
#line 1333 "ps-parser.jay"
{
	  	lexer.parsing_generic_declaration = false;

	  	var lt = (LocatedToken) yyVals[-1+yyTop];
	  	if (yyVals[0+yyTop] == null) {
		  	if (settings.PsStrictMode)
				report.Error (7012, lt.Location, "Field `{0}' has no type declaration.", lt.Value);
			else
				report.Warning (1009, 1, lt.Location, "Field `{0}' has no type declaration.", lt.Value);
			yyVals[0+yyTop] = new UntypedTypeExpression (GetLocation (yyVals[-1+yyTop]));
		}

		FullNamedExpression type = (FullNamedExpression) yyVals[0+yyTop];
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (670, GetLocation (yyVals[0+yyTop]), "Fields cannot have void type");
		
		current_field = new Field (current_type, type, (Modifiers) yyVals[-3+yyTop], new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
		if (is_config_enabled) {
			current_type.AddField (current_field);
		}
		is_config_enabled = true;
		yyVal = current_field;
	  }

void case_151()
#line 1359 "ps-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
		current_field = null;
	  }

void case_152()
#line 1372 "ps-parser.jay"
{ 
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "fixed size buffers");

		var lt = (LocatedToken) yyVals[-2+yyTop];
		current_field = new FixedField (current_type, (FullNamedExpression) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop],
			new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-5+yyTop]);
			
		if (is_config_enabled) {
			current_type.AddField (current_field);
		}
		is_config_enabled = true;
	  }

void case_153()
#line 1386 "ps-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
	    }

		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];	    
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
	    current_field = null;
	  }

void case_156()
#line 1409 "ps-parser.jay"
{
	  	++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_157()
#line 1415 "ps-parser.jay"
{
	  	--lexer.parsing_block;
		current_field.Initializer = (Expression) yyVals[0+yyTop];
		end_block (lexer.Location);
		current_local_parameters = null;
	  }

void case_162()
#line 1441 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		if (yyVals[0+yyTop] == null) {
		  	if (settings.PsStrictMode)
				report.Error (7012, lt.Location, "Field `{0}' has no type declaration.", lt.Value);
			else
				report.Warning (1009, 1, lt.Location, "Field `{0}' has no type declaration.", lt.Value);
			yyVals[0+yyTop] = new UntypedTypeExpression (GetLocation (yyVals[-1+yyTop]));
		}
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null, (FullNamedExpression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_164()
#line 1458 "ps-parser.jay"
{
		--lexer.parsing_block;
		var lt = (LocatedToken) yyVals[-4+yyTop];
		if (yyVals[-3+yyTop] == null) {
		  	if (settings.PsStrictMode)
				report.Error (7012, lt.Location, "Field `{0}' has no type declaration.", lt.Value);
			else
				report.Warning (1009, 1, lt.Location, "Field `{0}' has no type declaration.", lt.Value);
			yyVals[-3+yyTop] = new UntypedTypeExpression (GetLocation (yyVals[-4+yyTop]));
		}
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop], (FullNamedExpression) yyVals[-3+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_169()
#line 1491 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-3+yyTop];	  
		yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[-2+yyTop], (FullNamedExpression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]));
	  }

void case_171()
#line 1504 "ps-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_172()
#line 1510 "ps-parser.jay"
{
		report.Error (443, lexer.Location, "Value or constant expected");
		yyVal = null;
	  }

void case_174()
#line 1519 "ps-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }

void case_175()
#line 1528 "ps-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.NotAllowed;

		/* Add it early in the case of body being eof for full ast*/
		Method m = yyVals[0+yyTop] as Method;
		if (m != null) {
			async_block = (m.ModFlags & Modifiers.ASYNC) != 0;
			if (is_config_enabled) {
				current_type.AddMember (m);
			}
		}
		
		Constructor c = yyVals[0+yyTop] as Constructor;
		if (c != null) {
			if (is_config_enabled) {
				current_type.AddConstructor (c);
			}
			current_constructor = c;
		}
		
		if (is_package_function)
			lexer.DynamicParsing = false;
			
	  }

void case_176()
#line 1554 "ps-parser.jay"
{
		if (is_package_function)
			lexer.DynamicParsing = true;
	  
	 	async_block = false;

		if (yyVals[-2+yyTop] is Method) {
		
			Method method = yyVals[-2+yyTop] as Method;
			
			if (yyVals[0+yyTop] == null) {
				method.ParameterInfo.CheckParameters (method);
	
				if ((method.ModFlags & Modifiers.ASYNC) != 0) {
					report.Error (1994, method.Location, "`{0}': The async modifier can only be used with methods that have a body",
						method.GetSignatureForError ());
				}
			} else {
				method.Block = (ToplevelBlock) yyVals[0+yyTop];
				
				if (current_container.Kind == MemberKind.Interface) {
					report.Error (531, method.Location, "`{0}': interface members cannot have a definition",
						method.GetSignatureForError ());
				}
			}
			
		} else if (yyVals[-2+yyTop] is Constructor) {
		
			Constructor c = yyVals[-2+yyTop] as Constructor;
			
			if (yyVals[0+yyTop] != null) {		
				c.Block = (ToplevelBlock) yyVals[0+yyTop];
			}
			
			if (doc_support)
				c.DocComment = ConsumeStoredComment ();
		
		} else {
		
			Property.PropertyMethod propMethod = yyVals[-2+yyTop] as Property.PropertyMethod;
			
			if (yyVals[0+yyTop] != null) {
		  		propMethod.Block = (ToplevelBlock) yyVals[0+yyTop];			
		  	
				if (current_container.Kind == MemberKind.Interface) {
					report.Error (531, propMethod.Block.StartLocation,
						"`{0}': interface members cannot have a definition", propMethod.GetSignatureForError ());
				}
			}
			
		}

		current_local_parameters = null;
		current_property = null;
		current_constructor = null;
		
		/* If this was a package function, pop the container xxxxx_fn class.*/
		if (is_package_function) {
			pop_current_class();
			is_package_function = false;
		}
	
		is_config_enabled = true;
	
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_177()
#line 1628 "ps-parser.jay"
{
		valid_param_mod = ParameterModifierType.All;
		
		/* If package level function, create a new package function class with */
		/* the name of the function plus "_fn".*/
		if (current_container is NamespaceContainer) {
			MemberName methodName = (MemberName) yyVals[-1+yyTop];
			MemberName className = new MemberName(methodName.Name + "_fn", GetLocation(yyVals[-1+yyTop]));
			var fnClassModifiers = (Modifiers) yyVals[-3+yyTop] | Modifiers.PARTIAL | Modifiers.STATIC; /* Allows overloads..*/
			push_current_container(new Class (current_container, className, fnClassModifiers, (Attributes) yyVals[-4+yyTop]), GetLocation(yyVals[-2+yyTop]));
			is_package_function = true;
		}
		
	  }

void case_179()
#line 1647 "ps-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;
		MemberName name = (MemberName) yyVals[-7+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-4+yyTop];

		var modifiers = (Modifiers) yyVals[-9+yyTop];
		if (is_package_function) {
			modifiers |= Modifiers.STATIC;
		}
		
		if (current_type != null && name.Name == current_type.MemberName.Name) {

			var c = new Constructor (current_type, name.Name, modifiers, (Attributes) yyVals[-10+yyTop], current_local_parameters, name.Location);

			if (yyVals[0+yyTop] != null) {
					report.Error (7011, c.Location,
						"`{0}': constructor can not have type constraints.",
						c.GetSignatureForError ());
			}

			if ((modifiers & Modifiers.STATIC) != 0) {
				if ((modifiers & Modifiers.AccessibilityMask) != 0){
					report.Error (515, c.Location,
						"`{0}': static constructor cannot have an access modifier",
						c.GetSignatureForError ());
				}
			}

			if (doc_support)
				c.DocComment = Lexer.consume_doc_comment ();
				
			lbag.AddMember (c, mod_locations, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]));
			yyVal = c;
		
		} else {
			if (current_container.Kind == MemberKind.Class && name.ExplicitInterface == null &&
				(modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.PRIVATE | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)
					modifiers |= Modifiers.VIRTUAL;

			var ret_type = yyVals[-2+yyTop] as FullNamedExpression;
			if (ret_type == null) {
				if (settings.PsStrictMode)
					report.Error (7012, GetLocation(yyVals[-3+yyTop]), "Method `{0}' must specify a return type.", name.Name);
				else
					report.Warning (1009, 1, GetLocation(yyVals[-3+yyTop]), "Method `{0}' return type has no type declaration.", name.Name);
			}

			var method = AsMethod.Create (current_type, (FullNamedExpression) yyVals[-2+yyTop], modifiers,
					     name, current_local_parameters, (Attributes) yyVals[-10+yyTop]);

			if (yyVals[0+yyTop] != null)
				method.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);
					     
			if (doc_support)
				method.DocComment = Lexer.consume_doc_comment ();

			lbag.AddMember (method, mod_locations, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]));
			yyVal = method;
			
		}
	  }

void case_181()
#line 1716 "ps-parser.jay"
{
		var type = (FullNamedExpression) yyVals[0+yyTop];
		var name = (MemberName) yyVals[-5+yyTop];
		var modifiers = (Modifiers) yyVals[-7+yyTop];
		var parameters = (ParametersCompiled) yyVals[-2+yyTop];		
		
		if (type == null) {
			if (settings.PsStrictMode)
				report.Error (7012, name.Location, "Property getter `{0}' must specify a return type.", name.Name);
			else
				report.Warning (1009, 1, name.Location, "Property getter `{0}' return type has no type declaration.", name.Name);
			type = new UntypedTypeExpression (name.Location);
		}

		if (current_container.Kind == MemberKind.Class && name.ExplicitInterface == null &&
			(modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.PRIVATE | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)
				modifiers |= Modifiers.VIRTUAL;

		if (parameters != null && parameters.Count > 0)
			report.Error (7016, GetLocation (yyVals[0+yyTop]), "Property getter functions may not have parameters");

		current_property = current_type.LookupNameInContainer (name.Name, modifiers) as Property;
		
		if (current_property == null) {
			current_property = new Property (current_type, type, modifiers, name, (Attributes) yyVals[-8+yyTop]);
			if (is_config_enabled) {
				current_type.AddMember (current_property);
			}
			modifiers = (Modifiers) 0;
		} else {
			if (current_property.Set != null && ModifiersExtensions.IsRestrictedModifier (current_property.ModFlags & Modifiers.AccessibilityMask, modifiers & Modifiers.AccessibilityMask)) {
				current_property.Set.ModFlags |= current_property.ModFlags & Modifiers.AccessibilityMask;
				current_property.ModFlags = (current_property.ModFlags & ~Modifiers.AccessibilityMask) | (modifiers & Modifiers.AccessibilityMask);
				modifiers = (Modifiers) 0;
			} else if ((modifiers & Modifiers.AccessibilityMask) == (current_property.ModFlags & Modifiers.AccessibilityMask)) {
				modifiers = (Modifiers) 0;
			}
		}
		
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (547, GetLocation (yyVals[0+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
		
		if (current_property.Get != null) {
			report.Error (1007, GetLocation (yyVals[-6+yyTop]), "Property getter already defined");
		}
		
		current_property.Get = new Property.GetMethod (current_property,
			modifiers & Modifiers.AccessibilityMask, (Attributes) yyVals[-8+yyTop], GetLocation (yyVals[-6+yyTop]));

		is_config_enabled = true;

		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_property.Get.ParameterInfo;
		yyVal = current_property.Get;
	  }

void case_183()
#line 1778 "ps-parser.jay"
{
		var void_type = (FullNamedExpression) yyVals[0+yyTop];
		var name = (MemberName) yyVals[-5+yyTop];
		var modifiers = (Modifiers) yyVals[-7+yyTop];
		var parameters = (ParametersCompiled) yyVals[-2+yyTop];
		
		if (void_type == null) {
			if (settings.PsStrictMode)
				report.Error (7012, name.Location, "Property setter `{0}' must specify a return type.", name.Name);
			else
				report.Warning (1009, 1, name.Location, "Property setter `{0}' return type has no type declaration.", name.Name);
			void_type = new TypeExpression (compiler.BuiltinTypes.Void, name.Location);
		}

		if (current_container.Kind == MemberKind.Class && name.ExplicitInterface == null &&
			(modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.PRIVATE | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)
				modifiers |= Modifiers.VIRTUAL;
		
		if (void_type.Type != null && void_type.Type.Kind != MemberKind.Void)
			report.Error (7003, GetLocation (yyVals[0+yyTop]), "Property setter function must be of type void");					

		current_property = current_type.LookupNameInContainer (name.Name, modifiers) as Property;

		FullNamedExpression type; 
		
		if (parameters == null || parameters.Count != 1 || parameters.FixedParameters.Length != parameters.Count) {
			report.Error (7001, GetLocation (yyVals[-2+yyTop]), "Property setter must have a single parameter");
			type = new TypeExpression (compiler.BuiltinTypes.Int, GetLocation (yyVals[-2+yyTop]));
		} else {
			type = ((Parameter)parameters.FixedParameters[0]).TypeExpression;	
		}
		
		if (current_property == null) {
			current_property = new Property (current_type, type, modifiers, name, (Attributes) yyVals[-8+yyTop]);
			if (is_config_enabled) {
				current_type.AddMember (current_property);
			}
			modifiers = (Modifiers) 0;			
		} else {
			if (current_property.Get != null && ModifiersExtensions.IsRestrictedModifier (current_property.ModFlags & Modifiers.AccessibilityMask, modifiers & Modifiers.AccessibilityMask)) {
				current_property.Get.ModFlags |= current_property.ModFlags & Modifiers.AccessibilityMask;
				current_property.ModFlags = (current_property.ModFlags & ~Modifiers.AccessibilityMask) | (modifiers & Modifiers.AccessibilityMask);
				modifiers = (Modifiers) 0;
			} else if ((modifiers & Modifiers.AccessibilityMask) == (current_property.ModFlags & Modifiers.AccessibilityMask)) {
				modifiers = (Modifiers) 0;
			}
		}
		
		if (current_property.Set != null) {
			report.Error (1007, GetLocation (yyVals[-6+yyTop]), "Property setter already defined");
		}
		
		current_property.Set = new Property.SetMethod (current_property, 
			modifiers & Modifiers.AccessibilityMask, (ParametersCompiled) yyVals[-2+yyTop], (Attributes) yyVals[-8+yyTop], GetLocation (yyVals[-6+yyTop]));
	  
		is_config_enabled = true;
				  
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[0+yyTop]));
		current_local_parameters = parameters;
		yyVal = current_property.Set;
	  }

void case_185()
#line 1848 "ps-parser.jay"
{
		lexer.parsing_generic_declaration = false;
	  	valid_param_mod = ParameterModifierType.All;
	  }

void case_187()
#line 1857 "ps-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;

		MemberName name = (MemberName) yyVals[-8+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-5+yyTop];

		var modifiers = (Modifiers) yyVals[-12+yyTop];
		modifiers |= Modifiers.PARTIAL;

		if (name.ExplicitInterface == null && (modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.PRIVATE | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)
			modifiers |= Modifiers.VIRTUAL;
			
		var method = AsMethod.Create (current_type, new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-2+yyTop])),
									  modifiers, name, current_local_parameters, (Attributes) yyVals[-13+yyTop]);

		if (yyVals[0+yyTop] != null)
			method.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		StoreModifierLocation (Modifiers.PARTIAL, GetLocation (yyVals[-11+yyTop]));
		lbag.AddMember (method, mod_locations, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]));
		yyVal = method;
	  }

void case_188()
#line 1887 "ps-parser.jay"
{
		MemberName name = (MemberName) yyVals[-5+yyTop];
		report.Error (1585, name.Location, 
			"Member modifier `{0}' must precede the member type and name", ModifiersExtensions.Name ((Modifiers) yyVals[-6+yyTop]));

		var method = AsMethod.Create (current_type, (FullNamedExpression) yyVals[-9+yyTop],
									  0, name, (ParametersCompiled) yyVals[-3+yyTop], (Attributes) yyVals[-9+yyTop]);

		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_189()
#line 1906 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.Undefined;

		MemberName name = (MemberName) yyVals[-1+yyTop];
		var method = AsMethod.Create (current_type, new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop])), (Modifiers) yyVals[-3+yyTop],
									  name, current_local_parameters, (Attributes) yyVals[-4+yyTop]);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_192()
#line 1931 "ps-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface) 
			Lexer.AutoSemiInsertion = true;	  
	  }

void case_194()
#line 1940 "ps-parser.jay"
{ 
	  	/* method body.*/
	   	yyVal = null; 
	  }

void case_197()
#line 1953 "ps-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
	  	yyVal = new ParametersCompiled (pars_list.ToArray ());
	  }

void case_198()
#line 1958 "ps-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = new ParametersCompiled (pars_list.ToArray ()); 
	  }

void case_199()
#line 1971 "ps-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[-2+yyTop] } );			
	  }

void case_200()
#line 1978 "ps-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_202()
#line 2011 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_203()
#line 2019 "ps-parser.jay"
{
		parameters_bucket.Clear ();
		Parameter p = (Parameter) yyVals[0+yyTop];
		parameters_bucket.Add (p);
		
		default_parameter_used = p.HasDefaultValue;
		yyVal = parameters_bucket;
	  }

void case_204()
#line 2028 "ps-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter) yyVals[0+yyTop];
		if (p != null) {
			if (p.HasExtensionMethodModifier)
				report.Error (1100, p.Location, "The parameter modifier `this' can only be used on the first parameter");
			else if (!p.HasDefaultValue && default_parameter_used)
				report.Error (1737, p.Location, "Optional parameter cannot precede required parameters");

			default_parameter_used |= p.HasDefaultValue;
			pars.Add (p);
			
			lbag.AddLocation (p, GetLocation (yyVals[-1+yyTop]));
		}
		
		yyVal = yyVals[-2+yyTop];
	  }

void case_205()
#line 2052 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		if (yyVals[0+yyTop] == null) {
			if (settings.PsStrictMode)
				report.Error (7012, lt.Location, "Parameter `{0}' has no type declaration.", lt.Value);
			else
				report.Warning (1009, 1, lt.Location, "Parameter `{0}' has no type declaration.", lt.Value);
			yyVals[0+yyTop] = new UntypedTypeExpression (lt.Location);
		}
		yyVal = new Parameter ((FullNamedExpression) yyVals[0+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], lt.Location);
	  }

void case_206()
#line 2064 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
	  	Location l = GetLocation (yyVals[0+yyTop]);
		yyVal = new Parameter (null, null, Parameter.Modifier.NONE, (Attributes) yyVals[-1+yyTop], l);
	  }

void case_207()
#line 2074 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
	  	Location l = GetLocation (yyVals[0+yyTop]);
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new Parameter (new TypeExpression (compiler.BuiltinTypes.Object, GetLocation (yyVals[0+yyTop])), lt.Value, (Parameter.Modifier) yyVals[-3+yyTop], (Attributes) yyVals[-4+yyTop], l);
	  }

void case_209()
#line 2089 "ps-parser.jay"
{
	  	--lexer.parsing_block;
		if (lang_version <= LanguageVersion.V_3) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "optional parameter");
		}
		
		Parameter.Modifier mod = (Parameter.Modifier) yyVals[-5+yyTop];
		if (mod != Parameter.Modifier.NONE) {
			switch (mod) {
			case Parameter.Modifier.REF:
			case Parameter.Modifier.OUT:
				report.Error (1741, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
				
			case Parameter.Modifier.This:
				report.Error (1743, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
			default:
				throw new NotImplementedException (mod.ToString ());
			}
				
			mod = Parameter.Modifier.NONE;
		}
		
		if ((valid_param_mod & ParameterModifierType.DefaultValue) == 0)
			report.Error (1065, GetLocation (yyVals[-2+yyTop]), "Optional parameter is not valid in this context");
		
		var lt = (LocatedToken) yyVals[-4+yyTop];
		if (yyVals[-3+yyTop] == null) {
			if (settings.PsStrictMode)
				report.Error (7012, lt.Location, "Parameter `{0}' has no type declaration.", lt.Value);
			else
				report.Warning (1009, 1, lt.Location, "Parameter `{0}' has no type declaration.", lt.Value);
			yyVals[-3+yyTop] = new UntypedTypeExpression (lt.Location);
		}
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, mod, (Attributes) yyVals[-6+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
		
		if (yyVals[0+yyTop] != null)
			((Parameter) yyVal).DefaultValue = new DefaultParameterValueExpression ((Expression) yyVals[0+yyTop]);
	  }

void case_213()
#line 2145 "ps-parser.jay"
{
		Parameter.Modifier p2 = (Parameter.Modifier)yyVals[0+yyTop];
  		Parameter.Modifier mod = (Parameter.Modifier)yyVals[-1+yyTop] | p2;
  		if (((Parameter.Modifier)yyVals[-1+yyTop] & p2) == p2) {
  			Error_DuplicateParameterModifier (lexer.Location, p2);
  		} else {
	  		switch (mod & ~Parameter.Modifier.This) {
  				case Parameter.Modifier.REF:
					report.Error (1101, lexer.Location, "The parameter modifiers `this' and `ref' cannot be used altogether");
  					break;
   				case Parameter.Modifier.OUT:
					report.Error (1102, lexer.Location, "The parameter modifiers `this' and `out' cannot be used altogether");
  					break;
  				default:
 					report.Error (1108, lexer.Location, "A parameter cannot have specified more than one modifier");
 					break;
 			}
  		}
  		yyVal = mod;
	  }

void case_214()
#line 2169 "ps-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Ref) == 0)
	  		Error_ParameterModifierNotValid ("ref", GetLocation (yyVals[0+yyTop]));
	  		
	  	yyVal = Parameter.Modifier.REF;
	  }

void case_215()
#line 2176 "ps-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Out) == 0)
	  		Error_ParameterModifierNotValid ("out", GetLocation (yyVals[0+yyTop]));
	  
	  	yyVal = Parameter.Modifier.OUT;
	  }

void case_216()
#line 2183 "ps-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.This) == 0)
	  		Error_ParameterModifierNotValid ("this", GetLocation (yyVals[0+yyTop]));

	  	if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "extension methods");
	  			
		yyVal = Parameter.Modifier.This;
	  }

void case_217()
#line 2196 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		var type = new ComposedCast (
			new TypeExpression(compiler.BuiltinTypes.Object, GetLocation(yyVals[-1+yyTop])),  
			ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[-1+yyTop])));
		/* NOTE: We add two underscores here to allow us to define the Array version later in ActionScript (not in PlayScript)*/
		yyVal = new ParamsParameter (type, "__" + lt.Value, (Attributes) yyVals[-3+yyTop], lt.Location);
	  }

void case_218()
#line 2205 "ps-parser.jay"
{
		report.Error (1751, GetLocation (yyVals[-3+yyTop]), "Cannot specify a default value for a variable argument array");
		
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var type = new ComposedCast (
			new TypeExpression(compiler.BuiltinTypes.Object, GetLocation(yyVals[-2+yyTop])),  
			ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[-2+yyTop])));
		/* NOTE: We add two underscores here to allow us to define the Array version later in ActionScript (not in PlayScript)*/
		yyVal = new ParamsParameter (type, "__" + lt.Value, (Attributes) yyVals[-4+yyTop], lt.Location);
	  }

void case_219()
#line 2216 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_221()
#line 2225 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
	    if (lt.Value != "Array")
			report.Error (7353, GetLocation (yyVals[0+yyTop]), "Argument type for variable argument must be Array");	    	
	  }

void case_222()
#line 2244 "ps-parser.jay"
{
		if (doc_support)
			tmpComment = Lexer.consume_doc_comment ();
	  }

void case_223()
#line 2249 "ps-parser.jay"
{
		var type = (FullNamedExpression) yyVals[-2+yyTop];
	
		var modifiers = (Modifiers) yyVals[-6+yyTop];
	
		var name = (MemberName) yyVals[-4+yyTop];
		
		if (current_container.Kind == MemberKind.Class && name.ExplicitInterface == null && 
			(modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.PRIVATE | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)
				modifiers |= Modifiers.VIRTUAL;
		
		current_property = new Property (current_type, type, modifiers,
			name, (Attributes) yyVals[-7+yyTop]);
			
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (547, GetLocation (yyVals[-5+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		if (is_config_enabled) {
			current_type.AddMember (current_property);
		}

		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[0+yyTop]));
		
		lexer.PropertyParsing = true;
	  }

void case_224()
#line 2275 "ps-parser.jay"
{
		lexer.PropertyParsing = false;
		
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();				
	  }

void case_225()
#line 2282 "ps-parser.jay"
{
  		CheckIsPlayScript("property", GetLocation(yyVals[-9+yyTop])); 	
  		  
		is_config_enabled = true;  		  
  		  
		lbag.AppendToMember (current_property, GetLocation (yyVals[0+yyTop]));
		current_property = null;
	  }

void case_227()
#line 2299 "ps-parser.jay"
{
		valid_param_mod = 0;
		var type = (FullNamedExpression) yyVals[-1+yyTop];

		var modifiers = (Modifiers) yyVals[-9+yyTop];
		
		var name = (MemberName) yyVals[-7+yyTop];

		if (current_container.Kind == MemberKind.Class && name.ExplicitInterface == null && 
			(modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.PRIVATE | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)
				modifiers |= Modifiers.VIRTUAL;
		
		Indexer indexer = new Indexer (current_type, type, name, modifiers, (ParametersCompiled) yyVals[-4+yyTop], (Attributes) yyVals[-10+yyTop]);
			
		current_property = indexer;

		if (is_config_enabled) {
	  		current_type.AddIndexer (indexer);
	  	}
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]));
  		
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (620, GetLocation (yyVals[-8+yyTop]), "`{0}': indexer return type cannot be `void'", indexer.GetSignatureForError ());  		

		if (indexer.ParameterInfo.IsEmpty) {
			report.Error (1551, GetLocation (yyVals[-6+yyTop]), "Indexers must have at least one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		lexer.PropertyParsing = true;
		Lexer.EatBlock = !is_config_enabled;
	  }

void case_229()
#line 2340 "ps-parser.jay"
{
  		CheckIsPlayScript("indexer", GetLocation(yyVals[-12+yyTop])); 	
	  
		if (current_property.AccessorFirst != null && current_property.AccessorFirst.Block == null)
			((Indexer) current_property).ParameterInfo.CheckParameters (current_property);
	  
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();

	  	is_config_enabled = true;
						
		lbag.AppendToMember (current_property, GetLocation (yyVals[-3+yyTop]));
		current_property = null;		
	  }

void case_234()
#line 2363 "ps-parser.jay"
{
	  	if (yyToken == Token.CLOSE_BRACE) {
	  		report.Error (548, lexer.Location, "`{0}': property or indexer must have at least one accessor", current_property.GetSignatureForError ());
		} else {
			if (yyToken == Token.SEMICOLON)
				report.Error (1597, lexer.Location, "Semicolon after method or accessor block is not valid");
			else
				report.Error (1014, GetLocation (yyVals[0+yyTop]), "A get or set accessor expected");
		}
	  }

void case_235()
#line 2377 "ps-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
	  
		if (current_property.Get != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property getter already defined");
		}
		
		if (current_property is Indexer) {
			current_property.Get = new Indexer.GetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop], ((Indexer)current_property).ParameterInfo.Clone (),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Get = new Property.GetMethod (current_property,
				(Modifiers) yyVals[-1+yyTop], (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}	
	  
		current_local_parameters = current_property.Get.ParameterInfo;	  
		lbag.AddMember (current_property.Get, mod_locations);
		lexer.PropertyParsing = false;
	  }

void case_236()
#line 2399 "ps-parser.jay"
{
	  	if (yyVals[0+yyTop] != null) {
	  		current_property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];			
	  	
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Get.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Get.GetSignatureForError ());
			}		
		}
	  
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support)
			if (Lexer.doc_state == XmlCommentState.Error)
				Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_237()
#line 2420 "ps-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
		
		if (current_property.Set != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property getter already defined");
		}
	  
		if (current_property is Indexer) {
			current_property.Set = new Indexer.SetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop],
				ParametersCompiled.MergeGenerated (compiler,
				((Indexer)current_property).ParameterInfo, true, new Parameter (
					current_property.TypeExpression, "value", Parameter.Modifier.NONE, null, GetLocation (yyVals[0+yyTop])),
					null),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Set = new Property.SetMethod (current_property, (Modifiers) yyVals[-1+yyTop], 
				ParametersCompiled.CreateImplicitParameter (current_property.TypeExpression, GetLocation (yyVals[0+yyTop])),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}
		
		current_local_parameters = current_property.Set.ParameterInfo;	
		lbag.AddMember (current_property.Set, mod_locations);
		lexer.PropertyParsing = false;
	  }

void case_238()
#line 2447 "ps-parser.jay"
{
		if (yyVals[0+yyTop] != null) {		
			current_property.Set.Block = (ToplevelBlock) yyVals[0+yyTop];
		
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Set.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Set.GetSignatureForError ());
			}
		}
		
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support
			&& Lexer.doc_state == XmlCommentState.Error)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_240()
#line 2469 "ps-parser.jay"
{
		/* TODO: lbag*/
	  	yyVal = null;
	  }

void case_241()
#line 2474 "ps-parser.jay"
{
	  	Error_SyntaxError (1043, yyToken, "Invalid accessor body");
	  	yyVal = null;
	  }

void case_242()
#line 2485 "ps-parser.jay"
{
		lexer.ConstraintsParsing = true;
	    Lexer.AutoSemiInsertion = false;
	  }

void case_243()
#line 2490 "ps-parser.jay"
{
	    bool is_partial = IsPartial(yyVals[-5+yyTop]) || yyVals[-3+yyTop] != null;
		push_current_container (new Interface (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), is_partial);
		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-2+yyTop]));		
	  }

void case_244()
#line 2498 "ps-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support) {
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }

void case_245()
#line 2512 "ps-parser.jay"
{
	    Lexer.AutoSemiInsertion = true;
	    Lexer.EatBlock = !is_config_enabled;
	  }

void case_246()
#line 2517 "ps-parser.jay"
{
		--lexer.parsing_declaration;	  
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_247()
#line 2523 "ps-parser.jay"
{
  	  	is_config_enabled = true;
	    lbag.AppendToMember (current_container, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_251()
#line 2541 "ps-parser.jay"
{
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }

void case_252()
#line 2546 "ps-parser.jay"
{
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }

void case_262()
#line 2584 "ps-parser.jay"
{
		OperatorDeclaration decl = (OperatorDeclaration) yyVals[-2+yyTop];
		if (decl != null) {
			var modifiers = (Modifiers) yyVals[-3+yyTop];
			
/*			if (current_container.Kind == MemberKind.Class && */
/*				(modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.PRIVATE | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)*/
/*					modifiers |= Modifiers.VIRTUAL;			*/
		
			if (current_local_parameters.Count < 1) {
			
				report.Error (7037, GetLocation (yyVals[-4+yyTop]), "Invalid number of parameters for operator.");			
			
			} else {
			
				Operator op = new Operator (
					current_type, decl.optype, decl.ret_type, modifiers, 
					current_local_parameters,
					(ToplevelBlock) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop], decl.location);
				
				if (op.Block == null)
					op.ParameterInfo.CheckParameters (op);

				if (doc_support) {
					op.DocComment = tmpComment;
					Lexer.doc_state = XmlCommentState.Allowed;
				}

				/* Note again, checking is done in semantic analysis*/
				if (is_config_enabled) {
					current_type.AddOperator (op);
				}
				is_config_enabled = true;

				lbag.AddMember (op, mod_locations, lbag.GetLocations (decl));
			}
		}
		
		current_local_parameters = null;
	  }

void case_266()
#line 2634 "ps-parser.jay"
{
		report.Error (590, GetLocation (yyVals[0+yyTop]), "User-defined operators cannot return void");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_268()
#line 2646 "ps-parser.jay"
{
		CheckIsPlayScript("operator", GetLocation(yyVals[-7+yyTop])); 	  
	  
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-7+yyTop]);
		Operator.OpType op = (Operator.OpType) yyVals[0+yyTop];
		current_local_parameters = (ParametersCompiled)yyVals[-3+yyTop];
		
		int p_count = current_local_parameters.Count;
		if (p_count == 1) {
			if (op == Operator.OpType.Addition)
				op = Operator.OpType.UnaryPlus;
			else if (op == Operator.OpType.Subtraction)
				op = Operator.OpType.UnaryNegation;
		}
		
		if (IsUnaryOperator (op)) {
			if (p_count == 2) {
				report.Error (1020, loc, "Overloadable binary operator expected");
			} else if (p_count != 1) {
				report.Error (1535, loc, "Overloaded unary operator `{0}' takes one parameter",
					Operator.GetName (op));
			}
		} else {
			if (p_count == 1) {
				report.Error (1019, loc, "Overloadable unary operator expected");
			} else if (p_count != 2) {
				report.Error (1534, loc, "Overloaded binary operator `{0}' takes two parameters",
					Operator.GetName (op));
			}
		}
		
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (op, (FullNamedExpression) yyVals[0+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_295()
#line 2726 "ps-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  
		  
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_297()
#line 2745 "ps-parser.jay"
{
		valid_param_mod = 0;
		
		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  
		  
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Explicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_298()
#line 2760 "ps-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_299()
#line 2766 "ps-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	yyVal = new OperatorDeclaration (Operator.OpType.Explicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_300()
#line 2905 "ps-parser.jay"
{
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
		
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_301()
#line 2914 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-3+yyTop];
		if (lt.Value != current_container.MemberName.Name){
			report.Error (574, lt.Location, "Name of destructor must match name of class");
		} else if (current_container.Kind != MemberKind.Class){
			report.Error (575, lt.Location, "Only class types can contain destructor");
		}
		
		Destructor d = new Destructor (current_type, (Modifiers) yyVals[-7+yyTop],
			ParametersCompiled.EmptyReadOnlyParameters, (Attributes) yyVals[-8+yyTop], lt.Location);
		if (doc_support)
			d.DocComment = ConsumeStoredComment ();
		  
		d.Block = (ToplevelBlock) yyVals[0+yyTop];
		if (is_config_enabled) {
			current_type.AddMember (d);
		}
		is_config_enabled = true;
		lbag.AddMember (d, mod_locations, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[-1+yyTop]));

		current_local_parameters = null;
	  }

void case_302()
#line 2942 "ps-parser.jay"
{
		current_event_field = new EventField (current_type, (FullNamedExpression) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (MemberName) yyVals[-2+yyTop], (Attributes) yyVals[-5+yyTop]);
		if (is_config_enabled) {
			current_type.AddMember (current_event_field);
		}
		is_config_enabled = true;
		
		if (current_event_field.MemberName.ExplicitInterface != null) {
			report.Error (71, current_event_field.Location, "`{0}': An explicit interface implementation of an event must use property syntax",
			current_event_field.GetSignatureForError ());
		}
		
		yyVal = current_event_field;
	  }

void case_303()
#line 2959 "ps-parser.jay"
{
		if (doc_support) {
			current_event_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AddMember (current_event_field, mod_locations, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_event_field = null;
	  }

void case_304()
#line 2972 "ps-parser.jay"
{
		current_event = new EventProperty (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-5+yyTop], (MemberName) yyVals[-3+yyTop], (Attributes) yyVals[-6+yyTop]);
		if (is_config_enabled) {
			current_type.AddMember (current_event);
		}
		is_config_enabled = true;
		lbag.AddMember (current_event, mod_locations, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));
		
		lexer.EventParsing = true;
	  }

void case_305()
#line 2983 "ps-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface)
			report.Error (69, GetLocation (yyVals[-2+yyTop]), "Event in interface cannot have add or remove accessors");
	  
		lexer.EventParsing = false;
	  }

void case_306()
#line 2990 "ps-parser.jay"
{
		if (doc_support) {
			current_event.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AppendToMember (current_event, GetLocation (yyVals[-1+yyTop]));
	  	current_event = null;	
		current_local_parameters = null;
	  }

void case_309()
#line 3009 "ps-parser.jay"
{
	  	--lexer.parsing_block;
		current_event_field.Initializer = (Expression) yyVals[0+yyTop];
	  }

void case_314()
#line 3033 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null, (FullNamedExpression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]));
	  }

void case_316()
#line 3043 "ps-parser.jay"
{
		--lexer.parsing_block;
		var lt = (LocatedToken) yyVals[-5+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop], (FullNamedExpression) yyVals[-3+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_317()
#line 3052 "ps-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (68, lexer.Location, "`{0}': event in interface cannot have an initializer",
				current_event_field.GetSignatureForError ());
		}
		
	  	if ((current_event_field.ModFlags & Modifiers.ABSTRACT) != 0) {
			report.Error (74, lexer.Location, "`{0}': abstract event cannot have an initializer",
				current_event_field.GetSignatureForError ());
	  	}		
	  }

void case_321()
#line 3073 "ps-parser.jay"
{
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_322()
#line 3078 "ps-parser.jay"
{
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_323()
#line 3083 "ps-parser.jay"
{ 
		report.Error (1055, GetLocation (yyVals[0+yyTop]), "An add or remove accessor expected");
		yyVal = null;
	  }

void case_324()
#line 3091 "ps-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Add = new EventProperty.AddDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Add.ParameterInfo;
		
		lbag.AddMember (current_event.Add, mod_locations);
		lexer.EventParsing = false;		
	  }

void case_325()
#line 3103 "ps-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Add.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Add.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Add.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_326()
#line 3119 "ps-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Remove = new EventProperty.RemoveDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Remove.ParameterInfo;

		lbag.AddMember (current_event.Remove, mod_locations);
		lexer.EventParsing = false;		
	  }

void case_327()
#line 3131 "ps-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Remove.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Remove.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Remove.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_328()
#line 3147 "ps-parser.jay"
{
		report.Error (73, lexer.Location, "An add or remove accessor must have a body");
		yyVal = null;
	  }

void case_330()
#line 3156 "ps-parser.jay"
{
		current_type.UnattachedAttributes = (Attributes) yyVals[-1+yyTop];
		report.Error (1519, GetLocation (yyVals[-1+yyTop]), "An attribute is missing member declaration");
		lexer.putback ('}');
	  }

void case_331()
#line 3168 "ps-parser.jay"
{
		if (doc_support)
			enumTypeComment = Lexer.consume_doc_comment ();
	  }

void case_332()
#line 3173 "ps-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;

		MemberName name = (MemberName) yyVals[-3+yyTop];
		if (name.IsGeneric) {
			report.Error (1675, name.Location, "Enums cannot have type parameters");
		}
		
		push_current_container (new Enum (current_container, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-5+yyTop], name, (Attributes) yyVals[-6+yyTop]), null);
		
		Lexer.EatBlock = !is_config_enabled;
	  }

void case_333()
#line 3187 "ps-parser.jay"
{
		lexer.parsing_modifiers = true;

	  	/* here will be evaluated after CLOSE_BLACE is consumed.*/
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_334()
#line 3195 "ps-parser.jay"
{
	  	CheckIsPlayScript("enum", GetLocation(yyVals[-9+yyTop]));
	  
		if (doc_support)
			current_container.DocComment = enumTypeComment;
			
		--lexer.parsing_declaration;

/*			if (doc_support)*/
/*				em.DocComment = ev.DocComment;*/

	  	is_config_enabled = true;

		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-1+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_336()
#line 3216 "ps-parser.jay"
{
/*	 	var te = $2 as TypeExpression;*/
/*		if (te == null || !EnumSpec.IsValidUnderlyingType (te.Type)) {*/
/*			Enum.Error_1008 (GetLocation ($2), report);*/
/*		}*/
		yyVal = yyVals[0+yyTop];
	 }

void case_337()
#line 3224 "ps-parser.jay"
{
	 	Error_TypeExpected (GetLocation (yyVals[-1+yyTop]));
		yyVal = null;
	 }

void case_342()
#line 3242 "ps-parser.jay"
{
	  	lbag.AddLocation (yyVals[-2+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	yyVal = yyVals[0+yyTop];
	  }

void case_343()
#line 3250 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-1+yyTop]);
	  	((Enum) current_type).AddEnumMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }

void case_344()
#line 3263 "ps-parser.jay"
{
	  	++lexer.parsing_block;
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
	  }

void case_345()
#line 3271 "ps-parser.jay"
{ 
		--lexer.parsing_block;
		
		var lt = (LocatedToken) yyVals[-3+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
	  	em.Initializer = new ConstInitializer (em, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	((Enum) current_type).AddEnumMember (em);
		
		if (doc_support)
			em.DocComment = ConsumeStoredComment ();

		yyVal = em;
	  }

void case_346()
#line 3285 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		var lt = (LocatedToken) yyVals[-1+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-2+yyTop]);
	  	((Enum) current_type).AddEnumMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }

void case_349()
#line 3312 "ps-parser.jay"
{
		valid_param_mod = 0;

		ParametersCompiled p = (ParametersCompiled) yyVals[-3+yyTop];

		Delegate del = new Delegate (current_container, (FullNamedExpression) yyVals[0+yyTop], (Modifiers) yyVals[-8+yyTop], (MemberName) yyVals[-6+yyTop], p, (Attributes) yyVals[-9+yyTop]);

		p.CheckParameters (del);

		current_container.AddTypeContainer (del);

		current_delegate = del;
		lexer.ConstraintsParsing = true;
	  }

void case_351()
#line 3331 "ps-parser.jay"
{
	  	CheckIsPlayScript("delegate", GetLocation(yyVals[-11+yyTop]));
	  	
		if (doc_support) {
			current_delegate.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  
		if (yyVals[-2+yyTop] != null)
			current_delegate.SetConstraints ((List<Constraints>) yyVals[-2+yyTop]);
		lbag.AddMember (current_delegate, mod_locations, GetLocation (yyVals[-11+yyTop]), GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));

		yyVal = current_delegate;

		current_delegate = null;
	  }

void case_352()
#line 3354 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];	  
		MemberName className = new MemberName(lt.Value + "_ns", GetLocation(yyVals[-2+yyTop]));
		push_current_container(new Class (current_container, className, (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), GetLocation(yyVals[-3+yyTop]));	  
		pop_current_class();
			  
	  	if (doc_support) {
			current_delegate.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  }

void case_355()
#line 3374 "ps-parser.jay"
{
	  	if (!(yyVals[0+yyTop] is StringLiteral))
	  		syntax_error (GetLocation(yyVals[0+yyTop]), "string literal expected");
	  	yyVal = yyVals[0+yyTop];
	  }

void case_357()
#line 3384 "ps-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "nullable types");
	  
	  	yyVal = ComposedTypeSpecifier.CreateNullable (GetLocation (yyVals[0+yyTop]));
	  }

void case_360()
#line 3415 "ps-parser.jay"
{
	    /* member_name*/
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_361()
#line 3422 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_362()
#line 3431 "ps-parser.jay"
{
	    /* simple_name_expr*/
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);
	  }

void case_363()
#line 3437 "ps-parser.jay"
{  
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }

void case_365()
#line 3450 "ps-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");	  
	  
		yyVal = yyVals[-1+yyTop];
	  }

void case_366()
#line 3457 "ps-parser.jay"
{
		Error_TypeExpected (lexer.Location);
		yyVal = new TypeArguments ();
	  }

void case_367()
#line 3465 "ps-parser.jay"
{
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_368()
#line 3471 "ps-parser.jay"
{
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_370()
#line 3487 "ps-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters)yyVals[0+yyTop], lt.Location);
	  }

void case_371()
#line 3496 "ps-parser.jay"
{
	  	MemberName mn = (MemberName)yyVals[0+yyTop];
	  	if (mn.TypeParameters != null)
	  		syntax_error (mn.Location, string.Format ("Member `{0}' cannot declare type arguments",
	  			mn.GetSignatureForError ()));
	  }

void case_373()
#line 3507 "ps-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters) yyVals[0+yyTop], (ATypeNameExpression) yyVals[-2+yyTop], lt.Location);
	  }

void case_374()
#line 3516 "ps-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		yyVal = new MemberName (TypeDefinition.DefaultIndexerName, GetLocation (yyVals[0+yyTop]));
	  }

void case_375()
#line 3521 "ps-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		yyVal = new MemberName (TypeDefinition.DefaultIndexerName, null, (ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_376()
#line 3529 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_377()
#line 3543 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberAccess ((ATypeNameExpression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_379()
#line 3553 "ps-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");
	  
		yyVal = yyVals[-1+yyTop];
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_380()
#line 3564 "ps-parser.jay"
{
		var tparams = new TypeParameters ();
		tparams.Add ((TypeParameter)yyVals[0+yyTop]);
		yyVal = tparams;
	  }

void case_381()
#line 3570 "ps-parser.jay"
{
		var tparams = (TypeParameters) yyVals[-2+yyTop];
		tparams.Add ((TypeParameter)yyVals[0+yyTop]);
		yyVal = tparams;
		lbag.AddLocation (yyVals[0+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_382()
#line 3580 "ps-parser.jay"
{
		var lt = (LocatedToken)yyVals[0+yyTop];
		yyVal = new TypeParameter (new MemberName (lt.Value, lt.Location), (Attributes)yyVals[-2+yyTop], (VarianceDecl) yyVals[-1+yyTop]);
  	  }

void case_383()
#line 3585 "ps-parser.jay"
{
  	  	if (GetTokenName (yyToken) == "type")
			report.Error (81, GetLocation (yyVals[0+yyTop]), "Type parameter declaration must be an identifier not a type");
		else
			Error_SyntaxError (yyToken);
			
  	  	yyVal = new TypeParameter (MemberName.Null, null, null);
  	  }

void case_388()
#line 3619 "ps-parser.jay"
{
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_390()
#line 3628 "ps-parser.jay"
{
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_394()
#line 3648 "ps-parser.jay"
{
	  	report.Error (1536, GetLocation (yyVals[0+yyTop]), "Invalid parameter type `void'");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_396()
#line 3657 "ps-parser.jay"
{
	  	CheckIsPlayScript("arrays", GetLocation(yyVals[0+yyTop]));
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_397()
#line 3665 "ps-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			yyVal = new ComposedCast ((ATypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			var sn = yyVals[-1+yyTop] as SimpleName;
			if (sn != null)
				yyVal = ConvertAsType(sn, yyVals[-1+yyTop]);
			else
				yyVal = yyVals[-1+yyTop];
		}
	  }

void case_399()
#line 3685 "ps-parser.jay"
{
		if (yyVals[0+yyTop] != null)
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_400()
#line 3701 "ps-parser.jay"
{
		var types = new List<FullNamedExpression> (2);
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_401()
#line 3707 "ps-parser.jay"
{
		var types = (List<FullNamedExpression>) yyVals[-2+yyTop];
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_402()
#line 3716 "ps-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast) {
			report.Error (1521, GetLocation (yyVals[0+yyTop]), "Invalid base type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
		}
		yyVal = yyVals[0+yyTop];
	  }

void case_434()
#line 3796 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
	       yyVal = new CompletionSimpleName (MemberName.MakeName (lt.Value, null), lt.Location);
	  }

void case_446()
#line 3834 "ps-parser.jay"
{
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_448()
#line 3846 "ps-parser.jay"
{
	    /* member_access*/
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_449()
#line 3853 "ps-parser.jay"
{
		if (lang_version < LanguageVersion.V_6)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "null propagating operator");

		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new ConditionalMemberAccess ((Expression) yyVals[-4+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_450()
#line 3862 "ps-parser.jay"
{
		if (lang_version < LanguageVersion.V_6)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "null propagating operator");

		var lt = (LocatedToken) yyVals[-1+yyTop];
		/*$$ = new NullMemberAccess ((Expression) $1, lt.Value, (TypeArguments) $5, lt.Location);*/
		yyVal = new ConditionalMemberAccess ((Expression) yyVals[-4+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_451()
#line 3872 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		var ma = new MemberAccess ((Expression) yyVals[-2+yyTop], lt.Value, null, lt.Location);
		ma.AccessorType = MemberAccess.Accessor.AsE4xChildAttribute;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
		yyVal = ma;
	  }

void case_452()
#line 3881 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new SimpleName ("await", ((LocatedToken) yyVals[-3+yyTop]).Location), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_453()
#line 3888 "ps-parser.jay"
{
		var ma = new MemberAccess ((Expression) yyVals[-1+yyTop], "any", null, GetLocation(yyVals[0+yyTop]));
		ma.AccessorType = MemberAccess.Accessor.AsE4xChildAll;
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		yyVal = ma;
	  }

void case_454()
#line 3895 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		var ma = new MemberAccess ((Expression) yyVals[-2+yyTop], lt.Value, null, lt.Location);
		ma.AccessorType = MemberAccess.Accessor.AsE4xDescendant;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
		yyVal = ma;
	  }

void case_455()
#line 3903 "ps-parser.jay"
{
		var ma = new MemberAccess ((Expression) yyVals[-1+yyTop], "any", null, GetLocation(yyVals[0+yyTop]));
		ma.AccessorType = MemberAccess.Accessor.AsE4xDescendantAll;
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		yyVal = ma;
	  }

void case_456()
#line 3910 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		var ma = new MemberAccess ((Expression) yyVals[-2+yyTop], lt.Value, null, lt.Location);
		ma.AccessorType = MemberAccess.Accessor.AsE4xNamespace;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
		yyVal = ma;
	  }

void case_457()
#line 3918 "ps-parser.jay"
{
		var ea = new ElementAccess ((Expression) yyVals[-4+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		ea.AccessorType = ElementAccess.Accessor.AsE4xNamespaceAccess;
		lbag.AddLocation (GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = ea;
	  }

void case_458()
#line 3925 "ps-parser.jay"
{
		var ea = new ElementAccess ((Expression) yyVals[-4+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		ea.AccessorType = ElementAccess.Accessor.AsE4xAttributeAccess;
		lbag.AddLocation (GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = ea;
	  }

void case_459()
#line 3932 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var ma = new AsXmlQueryExpression ((Expression) yyVals[-4+yyTop], (Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]));
		yyVal = ma;
	  }

void case_460()
#line 3945 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_461()
#line 3959 "ps-parser.jay"
{
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_463()
#line 3969 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
	  }

void case_464()
#line 3985 "ps-parser.jay"
{
		if (current_constructor == null)
 			report.Error (7014, GetLocation (yyVals[-3+yyTop]), "Base constructor initializer may only be called in constructor");
 		var initializer = new ConstructorBaseInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
 		initializer.IsAsExplicitSuperCall = true;
 		current_constructor.Initializer = initializer;
 		yyVal = initializer;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_465()
#line 3995 "ps-parser.jay"
{
	    var newExpr = yyVals[-3+yyTop] as AsNew;
	    if (newExpr != null) {
		    /* Convert Invocation(AsNew()) into AsNew(Invocation())*/
			var invExpr = new Invocation(newExpr.Expr, (Arguments) yyVals[-1+yyTop]);
			newExpr.Expr = invExpr;
			yyVal = newExpr;
	    } else {
	    	/* Just a normal invocation*/
			yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
	    }
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_466()
#line 4009 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_467()
#line 4019 "ps-parser.jay"
{
	    var expList = yyVals[-1+yyTop] as List<Expression>;
	    if (expList == null) {
	    	expList = new List<Expression>();
	    }
  		var oi = new AsObjectInitializer (expList, GetLocation (yyVals[-2+yyTop]));
		if (current_variable != null) {
			oi.VariableDeclaration = current_variable;
		}
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
  		yyVal = oi;
	  }

void case_468()
#line 4032 "ps-parser.jay"
{
	  	var oi = new AsObjectInitializer ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
		if (current_variable != null) {
			oi.VariableDeclaration = current_variable;
		}
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  	yyVal = oi;
	  }

void case_469()
#line 4044 "ps-parser.jay"
{
      	oob_stack.Push (Lexer.AutoSemiInsertion);
        Lexer.AutoSemiInsertion = false;
	  }

void case_470()
#line 4052 "ps-parser.jay"
{
      	Lexer.AutoSemiInsertion = (bool) oob_stack.Pop ();
      	if (Lexer.AutoSemiInsertion)
	 	  	Lexer.AllowAutoSemiAfterToken(Token.CLOSE_BRACE, true);
 	  }

void case_471()
#line 4061 "ps-parser.jay"
{
      	Lexer.AutoSemiInsertion = (bool) oob_stack.Pop ();
      	if (Lexer.AutoSemiInsertion)
	 	  	Lexer.AllowAutoSemiAfterToken(Token.CLOSE_BRACE, true);
 	  }

void case_475()
#line 4079 "ps-parser.jay"
{
	  	var a = new List<Expression> ();
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_476()
#line 4085 "ps-parser.jay"
{
	  	var a = (List<Expression>)yyVals[-2+yyTop];
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_477()
#line 4090 "ps-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_478()
#line 4098 "ps-parser.jay"
{
	  	var lt = (LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_479()
#line 4104 "ps-parser.jay"
{
	  	var lt = (LocatedToken) Error_AwaitAsIdentifier (yyVals[-2+yyTop]);
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_480()
#line 4110 "ps-parser.jay"
{
	  	ILiteralConstant lit = yyVals[-2+yyTop] as ILiteralConstant;
		string nm;	  	
	  	if (lit is StringLiteral) {
			nm = ((StringLiteral)lit).Value;
		} else {
	  		if (parsing_playscript || !(lit is IntLiteral || lit is DoubleLiteral || lit is BoolLiteral)) {
			  	report.Error (7019, GetLocation (yyVals[-2+yyTop]), "Must be identifier or string literal");
			  	nm = "err";
			 } else {
				nm = ((Constant)yyVals[-2+yyTop]).GetValueAsLiteral();			 
			 }
		}
	  
	  	yyVal = new ElementInitializer (nm, (Expression)yyVals[0+yyTop], GetLocation(yyVals[-2+yyTop]));
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_485()
#line 4163 "ps-parser.jay"
{ 
		Arguments list = new Arguments (4);
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_486()
#line 4169 "ps-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_487()
#line 4175 "ps-parser.jay"
{
	  	lexer.putback (')'); /* TODO: Wrong but what can I do*/
		Error_SyntaxError (yyToken);
		yyVal = yyVals[-2+yyTop];
	  }

void case_488()
#line 4181 "ps-parser.jay"
{
	  	report.Error (839, GetLocation (yyVals[-1+yyTop]), "An argument is missing");
	  	yyVal = null;
	  }

void case_491()
#line 4197 "ps-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_493()
#line 4206 "ps-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_495()
#line 4218 "ps-parser.jay"
{
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_496()
#line 4235 "ps-parser.jay"
{
		if (lang_version < LanguageVersion.V_6)
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "declaration expression");

		var lt = (LocatedToken) yyVals[0+yyTop];
		var lv = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (lv);
		yyVal = new DeclarationExpression ((FullNamedExpression) yyVals[-1+yyTop], lv);
	  }

void case_497()
#line 4245 "ps-parser.jay"
{
		if (lang_version < LanguageVersion.V_6)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "declaration expression");

		var lt = (LocatedToken) yyVals[-2+yyTop];
		var lv = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (lv);
		yyVal = new DeclarationExpression ((FullNamedExpression) yyVals[-3+yyTop], lv) {
			Initializer = (Expression) yyVals[0+yyTop]
		};
	  }

void case_499()
#line 4264 "ps-parser.jay"
{
	    var newExpr = yyVals[-3+yyTop] as AsNew;
	    if (newExpr != null) {
		    /* Convert ElementAccess(AsNew()) into AsNew(ElementAccess())*/
			var elemAccessExpr = new ElementAccess(newExpr.Expr, (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
			newExpr.Expr = elemAccessExpr;
			yyVal = newExpr;
	    } else {
			yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		}
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_500()
#line 4277 "ps-parser.jay"
{
		if (lang_version < LanguageVersion.V_6)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "null propagating operator");

		yyVal = new ElementAccess ((Expression) yyVals[-4+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop])) {
			ConditionalAccess = true
		};

		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_501()
#line 4289 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_502()
#line 4294 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_503()
#line 4317 "ps-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_504()
#line 4323 "ps-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_505()
#line 4328 "ps-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_506()
#line 4336 "ps-parser.jay"
{
		Arguments args = new Arguments (4);
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }

void case_507()
#line 4342 "ps-parser.jay"
{
		Arguments args = (Arguments) yyVals[-2+yyTop];
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;	  
	  }

void case_510()
#line 4365 "ps-parser.jay"
{
	  	yyVal = new ElementAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_511()
#line 4370 "ps-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = new ElementAccess (null, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_517()
#line 4461 "ps-parser.jay"
{
	    var arrayInit = (AsArrayInitializer) yyVals[0+yyTop];
	    arrayInit.VectorType = (FullNamedExpression) yyVals[-2+yyTop];
	    yyVal = arrayInit;
	  }

void case_520()
#line 4475 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_521()
#line 4481 "ps-parser.jay"
{
	    /* member_name*/
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_523()
#line 4562 "ps-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_524()
#line 4570 "ps-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_525()
#line 4575 "ps-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension ((int)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_528()
#line 4605 "ps-parser.jay"
{
		var ai = new AsArrayInitializer (0, GetLocation (yyVals[-1+yyTop]));
		if (current_variable != null) {
			ai.VariableDeclaration = current_variable;
		}
		lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		yyVal = ai;
	  }

void case_529()
#line 4614 "ps-parser.jay"
{
		var ai = new AsArrayInitializer ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
		if (current_variable != null) {
			ai.VariableDeclaration = current_variable;
		}
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (ai, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		}
		yyVal = ai;
	  }

void case_530()
#line 4630 "ps-parser.jay"
{
      	oob_stack.Push (Lexer.AutoSemiInsertion);
        Lexer.AutoSemiInsertion = false;
	  }

void case_531()
#line 4638 "ps-parser.jay"
{
      	oob_stack.Push (Lexer.AutoSemiInsertion);
        Lexer.AutoSemiInsertion = false;
	  }

void case_533()
#line 4653 "ps-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_534()
#line 4659 "ps-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_535()
#line 4681 "ps-parser.jay"
{
		yyVal = new TypeOf ((FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_537()
#line 4691 "ps-parser.jay"
{
	 	Error_TypeExpected (lexer.Location);
	 	yyVal = null;
	 }

void case_538()
#line 4737 "ps-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "generics");

		yyVal = yyVals[0+yyTop];
	  }

void case_539()
#line 4758 "ps-parser.jay"
{ 
		CheckIsPlayScript("sizeof", GetLocation(yyVals[-3+yyTop])); 	  
		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_540()
#line 4764 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_541()
#line 4774 "ps-parser.jay"
{
		CheckIsPlayScript("checked", GetLocation(yyVals[-3+yyTop])); 	  
		yyVal = new CheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_542()
#line 4780 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new CheckedExpr (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_543()
#line 4789 "ps-parser.jay"
{
		CheckIsPlayScript("unchecked", GetLocation(yyVals[-3+yyTop])); 	  
		yyVal = new UnCheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_544()
#line 4795 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new UnCheckedExpr (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_546()
#line 4816 "ps-parser.jay"
{
		valid_param_mod = 0;
		start_anonymous ((ParametersCompiled) yyVals[-3+yyTop], (FullNamedExpression) yyVals[0+yyTop], false, GetLocation (yyVals[-6+yyTop]));
	  }

void case_549()
#line 4829 "ps-parser.jay"
{
		valid_param_mod = 0;
		start_anonymous ((ParametersCompiled) yyVals[-3+yyTop], (FullNamedExpression) yyVals[0+yyTop], true, GetLocation (yyVals[-7+yyTop]));
	  }

void case_552()
#line 4845 "ps-parser.jay"
{
		valid_param_mod = 0;
		start_anonymous ((ParametersCompiled) yyVals[-3+yyTop], (FullNamedExpression) yyVals[0+yyTop], false, GetLocation (yyVals[-7+yyTop]));
	  }

void case_553()
#line 4850 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-8+yyTop];
		var anonMethod = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		var li = new LocalVariable (current_block.ParametersBlock, lt.Value, lt.Location);
		var type = Delegate.CreateDelegateTypeExpression(compiler.BuiltinTypes, anonMethod.AsParameters, anonMethod.AsReturnType, GetLocation(yyVals[-9+yyTop]));
		var decl = new BlockVariable(type, li);
		decl.Initializer = anonMethod;
		current_block.AddLocalName (li);
		current_block.ParametersBlock.AddScopeStatement (decl);	
		yyVal = new AsLocalFunction(GetLocation(yyVals[-9+yyTop]), lt.Value, anonMethod, decl);
	  }

void case_555()
#line 4866 "ps-parser.jay"
{
		valid_param_mod = 0;
		start_anonymous ((ParametersCompiled) yyVals[-3+yyTop], (FullNamedExpression) yyVals[0+yyTop], true, GetLocation (yyVals[-8+yyTop]));
	  }

void case_556()
#line 4871 "ps-parser.jay"
{
	    var lt = (LocatedToken) yyVals[-8+yyTop];
		var anonMethod = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		var li = new LocalVariable (current_block.ParametersBlock, lt.Value, lt.Location);
		var type = Delegate.CreateDelegateTypeExpression(compiler.BuiltinTypes, anonMethod.AsParameters, anonMethod.AsReturnType, GetLocation(yyVals[-10+yyTop]));
		var decl = new BlockVariable(type, li);
		decl.Initializer = anonMethod;
		current_block.AddLocalName (li);
		current_block.ParametersBlock.AddScopeStatement (decl);	
		yyVal = new AsLocalFunction(GetLocation(yyVals[-10+yyTop]), lt.Value, anonMethod, decl);
	  }

void case_557()
#line 4898 "ps-parser.jay"
{
	  	CheckIsPlayScript("default values", GetLocation(yyVals[-3+yyTop]));
	  
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "default value expression");

		yyVal = new DefaultValueExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_561()
#line 4920 "ps-parser.jay"
{
	  	CheckIsPlayScript("await", GetLocation(yyVals[-1+yyTop]));
	  	
		if (!async_block) {
			 if (current_anonymous_method is LambdaExpression) {
				report.Error (4034, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing lambda expression is marked with the `async' modifier");
			} else if (current_anonymous_method != null) {
				report.Error (4035, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing anonymous method is marked with the `async' modifier");
			} else if (interactive_async != null) {
				current_block.Explicit.RegisterAsyncAwait ();
				interactive_async = true;
			} else {
				report.Error (4033, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing method is marked with the `async' modifier");
			}
		} else {
			current_block.Explicit.RegisterAsyncAwait ();
		}
		
		yyVal = new Await ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_564()
#line 4952 "ps-parser.jay"
{
	  	var expr = yyVals[0+yyTop] as Expression;
	  	if (!(expr is ElementAccess || expr is MemberAccess)) {
			report.Error (7022, GetLocation (yyVals[-1+yyTop]),
				"delete operator may only be used with element access or member access expressions");
	  	}
		yyVal = new AsDelete ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_565()
#line 4961 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.LogicalNot, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_566()
#line 4967 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.OnesComplement, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_567()
#line 4973 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Await (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_568()
#line 4979 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.AsE4xAttribute, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_569()
#line 4985 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new AsTypeOf (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_570()
#line 4991 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new AsDelete (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_577()
#line 5029 "ps-parser.jay"
{ 
		Error_SyntaxError (yyToken);

	  	yyVal = new Unary (Unary.Operator.UnaryPlus, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_578()
#line 5035 "ps-parser.jay"
{ 
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.UnaryNegation, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_579()
#line 5041 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_580()
#line 5047 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_581()
#line 5059 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.AddressOf, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_583()
#line 5069 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_584()
#line 5074 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_585()
#line 5079 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_586()
#line 5084 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_587()
#line 5091 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Division, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_588()
#line 5098 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_590()
#line 5109 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_591()
#line 5114 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
  	  }

void case_594()
#line 5127 "ps-parser.jay"
{
		yyVal = new Is ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
/*		var is_expr = new Is ((Expression) $1, (Expression) $3, GetLocation ($2));*/
/*		if ($4 != null) {*/
/*			if (lang_version != LanguageVersion.Experimental)*/
/*				FeatureIsNotAvailable (GetLocation ($4), "type pattern matching");*/
/**/
/*			var lt = (LocatedToken) $4;*/
/*			is_expr.Variable = new LocalVariable (current_block, lt.Value, lt.Location);*/
/*			current_block.AddLocalName (is_expr.Variable);*/
/*		}*/
/**/
/*		$$ = is_expr;*/
	  }

void case_595()
#line 5142 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_596()
#line 5149 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_597()
#line 5156 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new AsIn ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_598()
#line 5162 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new As ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_599()
#line 5168 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Is ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_601()
#line 5178 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_602()
#line 5183 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_603()
#line 5188 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.AsURightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_604()
#line 5193 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_605()
#line 5200 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_606()
#line 5207 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.AsURightShift, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_608()
#line 5218 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThan, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_609()
#line 5223 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThan, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_610()
#line 5228 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThanOrEqual, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_611()
#line 5233 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_612()
#line 5238 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LessThan, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_613()
#line 5245 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.GreaterThan, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_614()
#line 5252 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LessThanOrEqual, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_615()
#line 5259 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_617()
#line 5270 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Equality, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_618()
#line 5275 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Inequality, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_619()
#line 5280 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.AsStrictEquality, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_620()
#line 5285 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.AsStrictInequality, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_622()
#line 5294 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_623()
#line 5299 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_625()
#line 5310 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_626()
#line 5315 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_628()
#line 5326 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_629()
#line 5331 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_631()
#line 5342 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_632()
#line 5347 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LogicalAnd, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_634()
#line 5358 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_635()
#line 5363 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LogicalOr, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_637()
#line 5374 "ps-parser.jay"
{
	  	CheckIsPlayScript("?? operator", GetLocation(yyVals[-1+yyTop]));
	  
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "null coalescing operator");
			
		yyVal = new Nullable.NullCoalescingOperator ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_639()
#line 5388 "ps-parser.jay"
{
		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_640()
#line 5393 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-3+yyTop]), (Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_641()
#line 5399 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_642()
#line 5409 "ps-parser.jay"
{
	  	Expression target = (Expression) yyVals[-2+yyTop];
	  	Expression source = (Expression) yyVals[0+yyTop];

		var assign = new SimpleAssign (target, source);
		lbag.AddLocation (assign, GetLocation (yyVals[-1+yyTop]));
	  	
	  	if (source is AsArrayInitializer) {
	  		(source as AsArrayInitializer).Assign = assign;
	  	} else if (source is AsObjectInitializer) {
	  		(source as AsObjectInitializer).Assign = assign;
	  	}
	  	
	  	yyVal = assign;
	  }

void case_643()
#line 5425 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_644()
#line 5430 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_645()
#line 5435 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_646()
#line 5440 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_647()
#line 5445 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_648()
#line 5450 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_649()
#line 5455 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_650()
#line 5460 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.AsURightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_651()
#line 5465 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_652()
#line 5470 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.LogicalAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_653()
#line 5475 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_654()
#line 5480 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.LogicalOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_655()
#line 5485 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_657()
#line 5494 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_664()
#line 5551 "ps-parser.jay"
{
		lexer.ConstraintsParsing = true;
		lexer.AutoSemiInsertion = false;
	  }

void case_665()
#line 5556 "ps-parser.jay"
{
	  	/* To workaround access level restrictions, we make internal classes*/
	  	/* public for ActionScript.*/
	    var modifiers = (Modifiers) yyVals[-4+yyTop];
	    if (!parsing_playscript) {
	    	if ((modifiers & Modifiers.INTERNAL) != 0) { /* specified as internal*/
	    		modifiers &= ~Modifiers.INTERNAL;
	    		modifiers |= Modifiers.PUBLIC;
	    	}
	    	if ((modifiers & Modifiers.AccessibilityMask) == 0) { /* defaults to internal*/
	    		modifiers |= Modifiers.PUBLIC;
	    	}
	    }

		Class c = new Class (current_container, (MemberName) yyVals[0+yyTop], modifiers, (Attributes) yyVals[-5+yyTop]);
		if (((c.ModFlags & Modifiers.STATIC) != 0) && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (c.Location, "static classes");
		}
			
	    bool is_partial = IsPartial(yyVals[-5+yyTop]) || yyVals[-3+yyTop] != null;
		push_current_container (c, is_partial);
	  }

void case_666()
#line 5581 "ps-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);
		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-6+yyTop]));

		if (doc_support) {
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
		lexer.DynamicParsing = false;
	  }

void case_667()
#line 5597 "ps-parser.jay"
{
		lexer.AutoSemiInsertion = true;
		Lexer.EatBlock = !is_config_enabled;
	  }

void case_668()
#line 5602 "ps-parser.jay"
{
		lexer.DynamicParsing = true;	  
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_669()
#line 5609 "ps-parser.jay"
{
	  	is_config_enabled = true;
		lbag.AppendToMember (current_container, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_672()
#line 5625 "ps-parser.jay"
{
	    mod_locations = null;
		yyVal = ModifierNone;
		lexer.parsing_modifiers = false;
	  }

void case_675()
#line 5639 "ps-parser.jay"
{ 
		var m1 = (Modifiers) yyVals[-1+yyTop];
		var m2 = (Modifiers) yyVals[0+yyTop];

		if ((m1 & m2) != 0) {
			report.Error (1004, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"Duplicate `{0}' modifier", ModifiersExtensions.Name (m2));
		} else if ((m2 & Modifiers.AccessibilityMask) != 0 && (m1 & Modifiers.AccessibilityMask) != 0 &&
			((m2 | m1 & Modifiers.AccessibilityMask) != (Modifiers.PROTECTED | Modifiers.INTERNAL))) {
			report.Error (107, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"More than one protection modifier specified");
		}
		
		yyVal = m1 | m2;
	  }

void case_676()
#line 5658 "ps-parser.jay"
{
		yyVal = Modifiers.NEW;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		
		if (current_container.Kind == MemberKind.Namespace)
			report.Error (1530, GetLocation (yyVals[0+yyTop]), "Keyword `new' is not allowed on namespace elements");
	  }

void case_677()
#line 5666 "ps-parser.jay"
{
		yyVal = Modifiers.PUBLIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_678()
#line 5671 "ps-parser.jay"
{
		yyVal = Modifiers.PROTECTED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_679()
#line 5676 "ps-parser.jay"
{
		yyVal = Modifiers.INTERNAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_680()
#line 5681 "ps-parser.jay"
{
		yyVal = Modifiers.PRIVATE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_681()
#line 5686 "ps-parser.jay"
{
		yyVal = Modifiers.ABSTRACT;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_682()
#line 5691 "ps-parser.jay"
{
		yyVal = (Modifiers)0; /* Modifiers.SEALED;  // The semantics for SEALED and FINAL don't quite match.  Ignore FINAL for right now. (BEN)*/
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_683()
#line 5696 "ps-parser.jay"
{
		yyVal = Modifiers.STATIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_684()
#line 5701 "ps-parser.jay"
{
		yyVal = Modifiers.READONLY;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_685()
#line 5706 "ps-parser.jay"
{
		yyVal = Modifiers.VIRTUAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_686()
#line 5711 "ps-parser.jay"
{
		yyVal = Modifiers.OVERRIDE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_687()
#line 5716 "ps-parser.jay"
{
		yyVal = Modifiers.EXTERN;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_688()
#line 5721 "ps-parser.jay"
{
		yyVal = Modifiers.VOLATILE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_689()
#line 5726 "ps-parser.jay"
{
		yyVal = Modifiers.UNSAFE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_690()
#line 5733 "ps-parser.jay"
{
		yyVal = Modifiers.ASYNC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_691()
#line 5738 "ps-parser.jay"
{
	    yyVal = Modifiers.AS_DYNAMIC;
	    StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_692()
#line 5743 "ps-parser.jay"
{
	    yyVal = Modifiers.INTERNAL;
	    StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_695()
#line 5756 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		current_type.AddBaseForPart ((FullNamedExpression) yyVals[-1+yyTop]);
	  }

void case_698()
#line 5770 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		current_type.SetBaseTypes ((List<FullNamedExpression>) yyVals[-1+yyTop]);
	  }

void case_701()
#line 5784 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		current_type.AddBasesForPart ((List<FullNamedExpression>) yyVals[-1+yyTop]);
	  }

void case_704()
#line 5801 "ps-parser.jay"
{
		var constraints = new List<Constraints> (1);
		constraints.Add ((Constraints) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_705()
#line 5807 "ps-parser.jay"
{
		var constraints = (List<Constraints>) yyVals[-1+yyTop];
		Constraints new_constraint = (Constraints)yyVals[0+yyTop];

		foreach (Constraints c in constraints) {
			if (new_constraint.TypeParameter.Value == c.TypeParameter.Value) {
				report.Error (409, new_constraint.Location,
					"A constraint clause has already been specified for type parameter `{0}'",
					new_constraint.TypeParameter.Value);
			}
		}

		constraints.Add (new_constraint);
		yyVal = constraints;
	  }

void case_706()
#line 5826 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), (List<FullNamedExpression>) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_707()
#line 5832 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_708()
#line 5842 "ps-parser.jay"
{
		var constraints = new List<FullNamedExpression> (1);
		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_709()
#line 5848 "ps-parser.jay"
{
		var constraints = (List<FullNamedExpression>) yyVals[-2+yyTop];
		var prev = constraints [constraints.Count - 1] as SpecialContraintExpr;
		if (prev != null && (prev.Constraint & SpecialConstraint.Constructor) != 0) {			
			report.Error (401, GetLocation (yyVals[-1+yyTop]), "The `new()' constraint must be the last constraint specified");
		}
		
		prev = yyVals[0+yyTop] as SpecialContraintExpr;
		if (prev != null) {
			if ((prev.Constraint & (SpecialConstraint.Class | SpecialConstraint.Struct)) != 0) {
				report.Error (449, prev.Location, "The `class' or `struct' constraint must be the first constraint specified");			
			} else {
			 	prev = constraints [0] as SpecialContraintExpr;
			 	if (prev != null && (prev.Constraint & SpecialConstraint.Struct) != 0) {			
					report.Error (451, GetLocation (yyVals[0+yyTop]), "The `new()' constraint cannot be used with the `struct' constraint");
				}
			}
		}

		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_710()
#line 5874 "ps-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast)
			report.Error (706, GetLocation (yyVals[0+yyTop]), "Invalid constraint type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
	  
	  	yyVal = yyVals[0+yyTop];
	  }

void case_711()
#line 5881 "ps-parser.jay"
{
		yyVal = new SpecialContraintExpr (SpecialConstraint.Constructor, GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_715()
#line 5901 "ps-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (lexer.Location, "generic type variance");
		
		yyVal = yyVals[0+yyTop];
	  }

void case_718()
#line 5935 "ps-parser.jay"
{
		++lexer.parsing_block;
		lexer.AutoSemiInsertion = true;
		start_block (GetLocation (yyVals[0+yyTop]));
		Lexer.EatBlock = !is_config_enabled;		
	  }

void case_720()
#line 5952 "ps-parser.jay"
{
		++lexer.parsing_block;
		lexer.AutoSemiInsertion = true;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_722()
#line 5969 "ps-parser.jay"
{
		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
		Lexer.EatBlock = !is_config_enabled;
	  }

void case_723()
#line 5975 "ps-parser.jay"
{
	    if (is_config_enabled) {
	      /* This block should be included*/
  		  yyVal = yyVals[0+yyTop];
  		} else {
  		  yyVal = new EmptyStatement (GetLocation (yyVals[-3+yyTop]));
  		}
  		is_config_enabled = true;
	  }

void case_725()
#line 5989 "ps-parser.jay"
{
	    var lt1 = (LocatedToken) yyVals[-2+yyTop];
	    var lt2 = (LocatedToken) yyVals[0+yyTop];
        is_config_enabled = IsConfigVarDefined (lt1.Value + "::" + lt2.Value);
	  }

void case_726()
#line 5998 "ps-parser.jay"
{
	  	Lexer.AutoSemiInsertionAfter = 1;
	  	yyVal = yyVals[0+yyTop];	  
	  }

void case_727()
#line 6006 "ps-parser.jay"
{
	  	Lexer.AutoSemiInsertion = true;
	 	--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_728()
#line 6012 "ps-parser.jay"
{
	  	Lexer.AutoSemiInsertion = true;
	 	--lexer.parsing_block;
		yyVal = end_block (lexer.Location);
	  }

void case_729()
#line 6021 "ps-parser.jay"
{
	  	Lexer.AutoSemiInsertion = true;
 	  	Lexer.AllowAutoSemiAfterToken(Token.CLOSE_BRACE, true);
	 	--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_730()
#line 6028 "ps-parser.jay"
{
	  	Lexer.AutoSemiInsertion = true;
	 	--lexer.parsing_block;
		yyVal = end_block (lexer.Location);
	  }

void case_731()
#line 6037 "ps-parser.jay"
{
		++lexer.parsing_block;
		current_block.StartLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_732()
#line 6042 "ps-parser.jay"
{
	  	Lexer.AutoSemiInsertion = true;
		--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_740()
#line 6070 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_775()
#line 6138 "ps-parser.jay"
{
	  	  if (parsing_playscript) {
			  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
			  yyVal = null;
		  } else {
		  	  /* NOTE: This is actually allowed in PlayScript.  We'll turn it off in ASX though as it's error prone.*/
		  	  yyVal = yyVals[0+yyTop];
		  }
	  }

void case_776()
#line 6148 "ps-parser.jay"
{
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_777()
#line 6153 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_778()
#line 6161 "ps-parser.jay"
{
	    Lexer.AutoSemiInsertion = true;
		/* Uses lexer.Location because semicolon location is not kept in quick mode*/
		yyVal = new EmptyStatement (lexer.Location);
	  }

void case_779()
#line 6170 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		LabeledStatement labeled = new LabeledStatement (lt.Value, current_block, lt.Location);
		lbag.AddLocation (labeled, GetLocation (yyVals[0+yyTop]));
		current_block.AddLabel (labeled);
		current_block.AddStatement (labeled);
	  }

void case_781()
#line 6182 "ps-parser.jay"
{
		Lexer.NamespaceParsing = false;
		var lt = (LocatedToken) yyVals[-2+yyTop];		
		yyVal = new AsUseNamespaceStatement (lt.Value, GetLocation (yyVals[-3+yyTop]));		
	  }

void case_783()
#line 6192 "ps-parser.jay"
{
		if (yyVals[-1+yyTop] is VarExpr)
			yyVals[-1+yyTop] = new SimpleName ("var", ((VarExpr) yyVals[-1+yyTop]).Location);
	  
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_784()
#line 6208 "ps-parser.jay"
{ 
		/* Ok, the above "primary_expression" is there to get rid of*/
		/* both reduce/reduce and shift/reduces in the grammar, it should*/
		/* really just be "type_name".  If you use type_name, a reduce/reduce*/
		/* creeps up.  If you use namespace_or_type_name (which is all we need*/
		/* really) two shift/reduces appear.*/
		/* */

		/* So the super-trick is that primary_expression*/
		/* can only be either a SimpleName or a MemberAccess. */
		/* The MemberAccess case arises when you have a fully qualified type-name like :*/
		/* Foo.Bar.Blah i;*/
		/* SimpleName is when you have*/
		/* Blah i;*/
		
		Expression expr = (Expression) yyVals[-1+yyTop];
		if (yyVals[0+yyTop] == null) {
			SimpleName sn = expr as SimpleName;
			if (sn != null)
				yyVal = ConvertAsType(sn, yyVals[-1+yyTop]);
			else
				yyVal = yyVals[-1+yyTop];
		} else if (expr is ATypeNameExpression) {
			yyVal = new ComposedCast ((ATypeNameExpression)expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName (expr);
			yyVal = null;
		}
	  }

void case_785()
#line 6264 "ps-parser.jay"
{
		Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_787()
#line 6289 "ps-parser.jay"
{
		if (async_block) {
			report.Error (4003, GetLocation (yyVals[0+yyTop]), "`await' cannot be used as an identifier within an async method");
			yyVal = new LocatedToken ("await", GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_789()
#line 6306 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var li = GetOrCreateLocalVariable (current_block, lt.Value, 0, (FullNamedExpression) yyVals[0+yyTop], lt.Location);
		current_variable = new BlockVariable ((FullNamedExpression) yyVals[0+yyTop], li);
	  }

void case_790()
#line 6312 "ps-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_791()
#line 6318 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = GetOrCreateLocalVariable (current_block, lt.Value, 0, null, lt.Location);
		current_variable = new BlockVariable (new VarExpr (GetLocation(yyVals[-1+yyTop])), li);
	  }

void case_792()
#line 6324 "ps-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_793()
#line 6330 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var li = GetOrCreateLocalVariable (current_block, lt.Value, /*LocalVariable.Flags.Constant*/ 0, null, lt.Location);
		current_variable =  new BlockVariable (new VarExpr (GetLocation(yyVals[-3+yyTop])), li); /* new BlockConstant ((FullNamedExpression) $4, li);*/
	  }

void case_794()
#line 6337 "ps-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_796()
#line 6347 "ps-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		PushLocation (GetLocation (yyVals[-1+yyTop]));
		yyVal = current_variable;
	  }

void case_797()
#line 6353 "ps-parser.jay"
{
	  	if (yyToken == Token.OPEN_BRACKET_EXPR) {
			report.Error (650, lexer.Location,
				"Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type");
		} else {
			Error_SyntaxError (yyToken);
		}
	  }

void case_801()
#line 6371 "ps-parser.jay"
{
		foreach (var d in current_variable.Declarators) {
			if (d.Initializer == null)
				Error_MissingInitializer (d.Variable.Location);
		}
	  }

void case_804()
#line 6386 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];	  
		var li = GetOrCreateLocalVariable (current_variable.Variable.Block, lt.Value, 
			current_variable.Variable.DeclFlags, current_variable.TypeExpression, lt.Location);
		var d = new BlockVariableDeclarator (li, null);
		current_variable.AddDeclarator (d);
	  	lbag.AddLocation (d, GetLocation (yyVals[-1+yyTop]));
	  }

void case_805()
#line 6395 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];	  
		var li = GetOrCreateLocalVariable (current_variable.Variable.Block, lt.Value, 
			current_variable.Variable.DeclFlags, current_variable.TypeExpression, lt.Location);
		var d = new BlockVariableDeclarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_806()
#line 6404 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];	  
		var li = GetOrCreateLocalVariable (current_variable.Variable.Block, lt.Value, 
			current_variable.Variable.DeclFlags, (FullNamedExpression) yyVals[0+yyTop], lt.Location);
		var d = new BlockVariableDeclarator (li, null, (FullNamedExpression) yyVals[0+yyTop]);
		d.Location = GetLocation(yyVals[-2+yyTop]);
		current_variable.AddDeclarator (d);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]));
	  }

void case_807()
#line 6414 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-4+yyTop];	  
		var li = GetOrCreateLocalVariable (current_variable.Variable.Block, lt.Value, 
			current_variable.Variable.DeclFlags, (FullNamedExpression) yyVals[-2+yyTop], lt.Location);
		var d = new BlockVariableDeclarator (li, (Expression) yyVals[0+yyTop], (FullNamedExpression) yyVals[-2+yyTop]);
		d.Location = GetLocation(yyVals[-4+yyTop]);
		current_variable.AddDeclarator (d);
	  	lbag.AddLocation (d, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_809()
#line 6474 "ps-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_811()
#line 6480 "ps-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		report.Error (1002, GetLocation (yyVals[0+yyTop]), "; expected");
		lexer.putback ('}');
	  }

void case_815()
#line 6505 "ps-parser.jay"
{
		Expression expr = (Expression) yyVals[0+yyTop];
		yyVal = new StatementExpression (new OptionalAssign (expr, lexer.Location));
	  }

void case_816()
#line 6510 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_821()
#line 6538 "ps-parser.jay"
{ 
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		yyVal = new If ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_822()
#line 6547 "ps-parser.jay"
{
		yyVal = new If ((BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
		
		if (yyVals[-2+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[-2+yyTop]));
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_823()
#line 6557 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new If ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_824()
#line 6567 "ps-parser.jay"
{
	    Lexer.AutoSemiInsertion = true;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_825()
#line 6572 "ps-parser.jay"
{
		yyVal = new Switch ((Expression) yyVals[-5+yyTop], (ExplicitBlock) current_block.Explicit, GetLocation (yyVals[-7+yyTop]));	
		end_block (GetLocation (yyVals[0+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]));
	  }

void case_826()
#line 6578 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		yyVal = new Switch ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));	
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_836()
#line 6618 "ps-parser.jay"
{
	  	var label = (SwitchLabel) yyVals[0+yyTop];
	  	label.SectionStart = true;
		current_block.AddStatement (label);
	  }

void case_838()
#line 6631 "ps-parser.jay"
{
	 	yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	 	lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  	Lexer.AutoSemiInsertionAfter = 1;	 	
	 }

void case_839()
#line 6637 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_840()
#line 6642 "ps-parser.jay"
{
		yyVal = new SwitchLabel (null, GetLocation (yyVals[0+yyTop]));
	  	Lexer.AutoSemiInsertionAfter = 1;		
	  }

void case_845()
#line 6657 "ps-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new While ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_846()
#line 6665 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new While ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_849()
#line 6689 "ps-parser.jay"
{
	    Lexer.AutoSemiInsertion = true;
	    
		yyVal = new Do ((Statement) yyVals[-5+yyTop], (BooleanExpression) yyVals[-2+yyTop], GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_850()
#line 6696 "ps-parser.jay"
{
	    Lexer.AutoSemiInsertion = true;
	    
		Error_SyntaxError (yyToken);
		yyVal = new Do ((Statement) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]), Location.Null);
	  }

void case_851()
#line 6703 "ps-parser.jay"
{
	    Lexer.AutoSemiInsertion = true;

		Error_SyntaxError (yyToken);
	  
		yyVal = new Do ((Statement) yyVals[-4+yyTop], (BooleanExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_852()
#line 6715 "ps-parser.jay"
{
		start_block (GetLocation (yyVals[0+yyTop]));
		current_block.IsCompilerGenerated = true;
		lexer.ForInParsing = true;
		yyVal = new Tuple<Location,Location>(GetLocation(yyVals[-2+yyTop]), GetLocation(yyVals[-1+yyTop]));
	  }

void case_853()
#line 6722 "ps-parser.jay"
{
		lexer.ForInParsing = false;	  
		yyVal = yyVals[0+yyTop];
	  }

void case_855()
#line 6735 "ps-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));

		var blockVar = yyVals[-5+yyTop] as BlockVariable;
		if (blockVar != null) {
			if (blockVar == null || blockVar.Initializer != null || blockVar.Declarators != null) {
				report.Error (7036, GetLocation (yyVals[-2+yyTop]), "Invalid for each initializer");	
				yyVal = end_block (current_block.StartLocation);
			} else {
				var locations = (Tuple<Location,Location>) yyVals[-6+yyTop];
				
				Foreach f = new Foreach (blockVar.TypeExpression, blockVar.Variable, (Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], current_block, AsForEachType.ForEachKey, locations.Item1);
				lbag.AddStatement (f, locations.Item2, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-1+yyTop]));
				
				end_block (GetLocation (yyVals[-1+yyTop]));
				yyVal = f;
			}
		} else {
			var expList = yyVals[-5+yyTop] as List<Expression>;
			var varRef = (yyVals[-5+yyTop] as FullNamedExpression) ?? ((expList != null && expList.Count == 1) ? (expList[0] as FullNamedExpression) : null);
			if (varRef == null) {
				report.Error (7041, GetLocation (yyVals[-5+yyTop]), "Invalid iterator initializer");		
				yyVal = end_block (current_block.StartLocation);
			} else {
				var locations = (Tuple<Location,Location>) yyVals[-6+yyTop];
				
				Foreach f = new Foreach (varRef, (Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], current_block, AsForEachType.ForEachKey, locations.Item1);
				lbag.AddStatement (f, locations.Item2, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-1+yyTop]));
				
				end_block (GetLocation (yyVals[-1+yyTop]));
				yyVal = f;
			}
		}
	  }

void case_856()
#line 6771 "ps-parser.jay"
{
	    lexer.ForInParsing = false;
	  
		var locations = (Tuple<Location,Location>) yyVals[-2+yyTop];

		For f = new For (locations.Item1);
		current_block.AddStatement (f);
		
		var expList = yyVals[-1+yyTop] as List<Expression>;
		if (expList != null) 
			f.Initializer = ExpressionListToStatementList (expList);
		else
			f.Initializer = (Statement) yyVals[-1+yyTop];

		/* Pass the "For" object to the iterator_part4*/
		oob_stack.Push (f);
		
		yyVal = f;
	  }

void case_857()
#line 6792 "ps-parser.jay"
{
		var locations = (Tuple<Location,Location>) yyVals[-1+yyTop];
		oob_stack.Pop ();
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		For f = ((For) yyVals[-2+yyTop]);
		f.Statement = (Statement) yyVals[0+yyTop];
		lbag.AddStatement (f, current_block.StartLocation, GetLocation (yyVals[-3+yyTop]), GetLocation (locations.Item1), GetLocation (locations.Item2));

		yyVal = end_block (GetLocation (yyVals[-3+yyTop]));
	  }

void case_858()
#line 6805 "ps-parser.jay"
{
		Lexer.AutoSemiInsertion = true;
		Error_SyntaxError (yyToken);
		yyVal = end_block (current_block.StartLocation);
	  }

void case_859()
#line 6814 "ps-parser.jay"
{
		For f = (For) oob_stack.Peek ();
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
	  }

void case_861()
#line 6824 "ps-parser.jay"
{
		Lexer.AutoSemiInsertion = true;
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol `}'");
		For f = (For) oob_stack.Peek ();
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
		yyVal = new Tuple<Location,Location> (GetLocation (yyVals[0+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_862()
#line 6834 "ps-parser.jay"
{
	  	For f = (For) oob_stack.Peek ();
		f.Iterator = (Statement) yyVals[-1+yyTop];
		yyVal = GetLocation (yyVals[0+yyTop]);
	  }

void case_863()
#line 6839 "ps-parser.jay"
{
		Lexer.AutoSemiInsertion = true;
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol expected ')'");
		For f = (For) oob_stack.Peek ();
		f.Iterator = (Statement) yyVals[-1+yyTop];
		yyVal = GetLocation (yyVals[0+yyTop]);
	  }

void case_868()
#line 6860 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		var type = (FullNamedExpression) yyVals[0+yyTop];
		if (type == null) {
			if (settings.PsStrictMode)
				report.Error (7012, lt.Location, "Variable `{0}' has no type declaration.", lt.Value);
			else
				report.Warning (1009, 1, lt.Location, "Variable `{0}' has no type declaration.", lt.Value);
			type = new UntypedTypeExpression (GetLocation (yyVals[-1+yyTop]));
		}
		var li = GetOrCreateLocalVariable (current_block, lt.Value, 0, type, lt.Location);
		current_variable = new BlockVariable (type, li);
	  }

void case_869()
#line 6874 "ps-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_879()
#line 6912 "ps-parser.jay"
{
	  	var sl = yyVals[-2+yyTop] as StatementList;
	  	if (sl == null) {
	  		sl = new StatementList ((Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop]);
			lbag.AddStatement (sl, GetLocation (yyVals[-1+yyTop]));
	  	} else {
	  		sl.Add ((Statement) yyVals[0+yyTop]);
	  		lbag.AppendTo (sl, GetLocation (yyVals[-1+yyTop]));
	  	}
	  		
		yyVal = sl;
	  }

void case_882()
#line 6936 "ps-parser.jay"
{
		start_block (GetLocation (yyVals[-5+yyTop]));
		current_block.IsCompilerGenerated = true;
	  }

void case_883()
#line 6941 "ps-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));

		var blockVar = yyVals[-6+yyTop] as BlockVariable;
		if (blockVar != null) {
			if (blockVar == null || blockVar.Initializer != null || blockVar.Declarators != null) {
				report.Error (7036, GetLocation (yyVals[-6+yyTop]), "Invalid for each initializer");	
				yyVal = end_block (current_block.StartLocation);
			} else {
				Foreach f = new Foreach (blockVar.TypeExpression, blockVar.Variable, (Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], current_block, AsForEachType.ForEachValue, GetLocation (yyVals[-9+yyTop]));
				lbag.AddStatement (f, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
				
				end_block (GetLocation (yyVals[-5+yyTop]));
				yyVal = f;
			}
		} else {
			var expList = yyVals[-6+yyTop] as List<Expression>;
			var varRef = (yyVals[-6+yyTop] as FullNamedExpression) ?? ((expList != null && expList.Count == 1) ? (expList[0] as FullNamedExpression) : null);
			if (varRef == null) {
				report.Error (7041, GetLocation (yyVals[-6+yyTop]), "Invalid iterator initializer");		
				yyVal = end_block (current_block.StartLocation);
			} else {
				Foreach f = new Foreach (varRef, (Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], current_block, AsForEachType.ForEachValue, GetLocation (yyVals[-9+yyTop]));
				lbag.AddStatement (f, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
				
				end_block (GetLocation (yyVals[-5+yyTop]));
				yyVal = f;
			}
		}
	  }

void case_891()
#line 6986 "ps-parser.jay"
{
		yyVal = new Break (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_892()
#line 6994 "ps-parser.jay"
{
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_893()
#line 6999 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
	  }

void case_894()
#line 7007 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new Goto (lt.Value, GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_895()
#line 7013 "ps-parser.jay"
{
		yyVal = new GotoCase ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_896()
#line 7018 "ps-parser.jay"
{
		yyVal = new GotoDefault (GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_897()
#line 7026 "ps-parser.jay"
{
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_898()
#line 7031 "ps-parser.jay"
{
	    Lexer.AutoSemiInsertion = true;
		Error_SyntaxError (yyToken);
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_899()
#line 7037 "ps-parser.jay"
{
	    Lexer.AutoSemiInsertion = true;
		Error_SyntaxError (yyToken);
		yyVal = new Return (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_900()
#line 7046 "ps-parser.jay"
{
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_901()
#line 7051 "ps-parser.jay"
{
	    Lexer.AutoSemiInsertion = true;	  
		Error_SyntaxError (yyToken);
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_902()
#line 7057 "ps-parser.jay"
{
	    Lexer.AutoSemiInsertion = true;
		Error_SyntaxError (yyToken);
		yyVal = new Throw (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_903()
#line 7066 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_904()
#line 7082 "ps-parser.jay"
{
	    Lexer.AutoSemiInsertion = true;
	  
		Error_SyntaxError (yyToken);

		var lt = (LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_905()
#line 7102 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new YieldBreak (lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_909()
#line 7128 "ps-parser.jay"
{
	    /*$$ = new TryFinally ((Statement) $2, (Block) $4, GetLocation ($1));*/
		yyVal = new TryFinally ((Statement) yyVals[-2+yyTop], (ExplicitBlock) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_910()
#line 7134 "ps-parser.jay"
{
		/*$$ = new TryFinally (new TryCatch ((Block) $2, (List<Catch>) $3, Location.Null, true), (Block) $5, GetLocation ($1));*/
        /*lbag.AddStatement ($$, GetLocation ($4));*/
		yyVal = new TryFinally (new TryCatch ((Block) yyVals[-3+yyTop], (List<Catch>) yyVals[-2+yyTop], Location.Null, true), (ExplicitBlock) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));		
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_911()
#line 7141 "ps-parser.jay"
{
		Error_SyntaxError (1524, yyToken);
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]), false);
	  }

void case_912()
#line 7149 "ps-parser.jay"
{
		var l = new List<Catch> (2);

		l.Add ((Catch) yyVals[0+yyTop]);
		yyVal = l;
	  }

void case_913()
#line 7156 "ps-parser.jay"
{
		var l = (List<Catch>) yyVals[-1+yyTop];
		
		Catch c = (Catch) yyVals[0+yyTop];
		var prev_catch = l [l.Count - 1];
		if (prev_catch.IsGeneral && prev_catch.Filter == null) {
			report.Error (1017, c.loc, "Try statement already has an empty catch block");
		}
		
		l.Add (c);
		yyVal = l;
	  }

void case_914()
#line 7172 "ps-parser.jay"
{
	  	/*$$ = new Catch ((Block) $2, GetLocation ($1));*/
		/*$$ = new Catch ((ExplicitBlock) $2, GetLocation ($1));*/
		var c = new Catch ((ExplicitBlock) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
		c.Filter = (CatchFilterExpression) yyVals[-1+yyTop];
		yyVal = c;
	  }

void case_915()
#line 7180 "ps-parser.jay"
{
		start_block (GetLocation (yyVals[-3+yyTop]));
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var type = (FullNamedExpression) yyVals[-1+yyTop];
		if (type == null) {
			if (settings.PsStrictMode)
				report.Error (7012, lt.Location, "Variable `{0}' has no type declaration.", lt.Value);
			else
				report.Warning (1009, 1, lt.Location, "Variable `{0}' has no type declaration.", lt.Value);
			type = new UntypedExceptionExpression (lt.Location);
		}

		if (type.Type != null && type.Type.IsDynamic)
			type = new UntypedExceptionExpression (lt.Location);

		/*var c = new Catch (current_block, GetLocation ($1));*/
		var c = new Catch ((ExplicitBlock) current_block, GetLocation (yyVals[-4+yyTop]));
		c.TypeExpression = type;
		c.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
		c.Variable.TypeExpr = c.TypeExpression;
		current_block.AddLocalName (c.Variable);
		
		lbag.AddLocation (c, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = c;
	  }

void case_916()
#line 7206 "ps-parser.jay"
{
	 	((Catch) yyVals[-2+yyTop]).Filter = (CatchFilterExpression) yyVals[-1+yyTop];
		yyVal = yyVals[-2+yyTop];
	  }

void case_917()
#line 7211 "ps-parser.jay"
{
	  	if (yyToken == Token.CLOSE_PARENS) {
			report.Error (1015, lexer.Location,
				"A type that derives from `System.Exception', `object', or `string' expected");
		} else {
			Error_SyntaxError (yyToken);
		}
		
		yyVal = new Catch (null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_919()
#line 7226 "ps-parser.jay"
{
		if (lang_version <= LanguageVersion.V_5)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "exception filter");

	  	yyVal = new CatchFilterExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_922()
#line 7251 "ps-parser.jay"
{
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_924()
#line 7261 "ps-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Lock ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_925()
#line 7269 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Lock ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_926()
#line 7279 "ps-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.FixedVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Fixed.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_927()
#line 7289 "ps-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_928()
#line 7294 "ps-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Fixed f = new Fixed ((Fixed.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		current_block.AddStatement (f);
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_929()
#line 7306 "ps-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.UsingVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Using.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_930()
#line 7316 "ps-parser.jay"
{
		yyVal = current_variable;	  
		current_variable = null;
	  }

void case_931()
#line 7321 "ps-parser.jay"
{
	  	CheckIsPlayScript("using", GetLocation(yyVals[-7+yyTop]));
	  	
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Using u = new Using ((Using.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-8+yyTop]));
		current_block.AddStatement (u);
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_932()
#line 7332 "ps-parser.jay"
{
	  	CheckIsPlayScript("using", GetLocation(yyVals[-3+yyTop]));

		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Using ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_933()
#line 7342 "ps-parser.jay"
{
	  	CheckIsPlayScript("using", GetLocation(yyVals[-2+yyTop]));
	  
		Error_SyntaxError (yyToken);
		
		yyVal = new Using ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_935()
#line 7355 "ps-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  }

void case_937()
#line 7367 "ps-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		yyVal = current_variable;
	  }

void case_938()
#line 7390 "ps-parser.jay"
{
		lexer.query_parsing = false;
			
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_939()
#line 7402 "ps-parser.jay"
{
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_940()
#line 7413 "ps-parser.jay"
{
	        lexer.query_parsing = false;
		yyVal = yyVals[-1+yyTop];

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_941()
#line 7420 "ps-parser.jay"
{
	        yyVal = yyVals[-1+yyTop];
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_942()
#line 7429 "ps-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop])));
	  }

void case_943()
#line 7437 "ps-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (
			new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
			}
		);
	  }

void case_944()
#line 7452 "ps-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop])));
	  }

void case_945()
#line 7460 "ps-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (
			new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
			}
		);
	  }

void case_947()
#line 7479 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_949()
#line 7494 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);

		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop])) {
			IdentifierType = (FullNamedExpression)yyVals[-4+yyTop]
		};
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_950()
#line 7511 "ps-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[-1+yyTop];
		
		if (yyVals[0+yyTop] != null)
			head.Next = (Linq.AQueryClause)yyVals[0+yyTop];
				
		if (yyVals[-2+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-2+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_951()
#line 7526 "ps-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[0+yyTop];

		if (yyVals[-1+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-1+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_953()
#line 7539 "ps-parser.jay"
{
		report.Error (742, GetLocation (yyVals[0+yyTop]), "Unexpected symbol `{0}'. A query body must end with select or group clause", GetSymbolName (yyToken));
		yyVal = yyVals[-1+yyTop];
	  }

void case_954()
#line 7544 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_956()
#line 7556 "ps-parser.jay"
{
		yyVal = new Linq.Select ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_957()
#line 7563 "ps-parser.jay"
{
	  	if (linq_clause_blocks == null)
	  		linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  	linq_clause_blocks.Push ((Linq.QueryBlock)current_block);
	  }

void case_958()
#line 7571 "ps-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_959()
#line 7578 "ps-parser.jay"
{
		yyVal = new Linq.GroupBy ((Linq.QueryBlock)current_block, (Expression)yyVals[-3+yyTop], linq_clause_blocks.Pop (), (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_961()
#line 7590 "ps-parser.jay"
{
		((Linq.AQueryClause)yyVals[-1+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }

void case_968()
#line 7610 "ps-parser.jay"
{
		var lt = (LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
	  	yyVal = new Linq.Let ((Linq.QueryBlock) current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  	
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_970()
#line 7629 "ps-parser.jay"
{
		yyVal = new Linq.Where ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_971()
#line 7639 "ps-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_972()
#line 7647 "ps-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_973()
#line 7655 "ps-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_974()
#line 7663 "ps-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();

		var lt = (LocatedToken) yyVals[-10+yyTop];	
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-11+yyTop]));
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]));
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
			
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location);

			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-11+yyTop]));	
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		}

		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);
	  }

void case_975()
#line 7701 "ps-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_976()
#line 7709 "ps-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_977()
#line 7717 "ps-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_978()
#line 7725 "ps-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();
		
		var lt = (LocatedToken) yyVals[-10+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;		
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
		
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location); /* TODO:*/
			
			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};			
		}
		
		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);		
	  }

void case_982()
#line 7780 "ps-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		yyVal = yyVals[0+yyTop];
	  }

void case_984()
#line 7791 "ps-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_985()
#line 7798 "ps-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	  }

void case_987()
#line 7807 "ps-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock ((Linq.QueryBlock) current_block, lexer.Location);	 
	 }

void case_988()
#line 7814 "ps-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	 }

void case_990()
#line 7826 "ps-parser.jay"
{
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_991()
#line 7831 "ps-parser.jay"
{
		yyVal = new Linq.OrderByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_993()
#line 7843 "ps-parser.jay"
{
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_994()
#line 7848 "ps-parser.jay"
{
		yyVal = new Linq.ThenByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_996()
#line 7858 "ps-parser.jay"
{
		/* query continuation block is not linked with query block but with block*/
		/* before. This means each query can use same range variable names for*/
		/* different identifiers.*/

		current_block.SetEndLocation (GetLocation (yyVals[-1+yyTop]));
		current_block = current_block.Parent;
	
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);		
	  }

void case_997()
#line 7874 "ps-parser.jay"
{
		var current_block = linq_clause_blocks.Pop ();	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
  		yyVal = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, null, rv, GetLocation (yyVals[-3+yyTop])) {
  			next = (Linq.AQueryClause)yyVals[0+yyTop]
  		};
	  }

void case_1000()
#line 7901 "ps-parser.jay"
{ 
		current_container = current_type = new Class (current_container, new MemberName ("<InteractiveExpressionClass>"), Modifiers.PUBLIC, null);

		/* (ref object retval)*/
		Parameter [] mpar = new Parameter [1];
		mpar [0] = new Parameter (new TypeExpression (compiler.BuiltinTypes.Object, Location.Null), "$retval", Parameter.Modifier.REF, null, Location.Null);

		ParametersCompiled pars = new ParametersCompiled (mpar);
		var mods = Modifiers.PUBLIC | Modifiers.STATIC;
		if (settings.Unsafe)
			mods |= Modifiers.UNSAFE;

		current_local_parameters = pars;
		var method = new InteractiveMethod (
			current_type,
			new TypeExpression (compiler.BuiltinTypes.Void, Location.Null),
			mods,
			pars);
			
		current_type.AddMember (method);			
		oob_stack.Push (method);

		interactive_async = false;
		
		++lexer.parsing_block;
		start_block (lexer.Location);
	  }

void case_1001()
#line 7929 "ps-parser.jay"
{
		--lexer.parsing_block;
		var method = (InteractiveMethod) oob_stack.Pop ();
		method.Block = (ToplevelBlock) end_block(lexer.Location);

		if (interactive_async == true) {
			method.ChangeToAsync ();
		}

		InteractiveResult = (Class) pop_current_class ();
		current_local_parameters = null;
	  }

void case_1011()
#line 7996 "ps-parser.jay"
{
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-6+yyTop], MemberCache.IndexerNameAlias, Location.Null);
	  }

void case_1012()
#line 8001 "ps-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Explicit;
		yyVal = null;
	  }

void case_1013()
#line 8009 "ps-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Implicit;
		yyVal = null;
	  }

void case_1014()
#line 8017 "ps-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = (Operator.OpType) yyVals[-1+yyTop];
		yyVal = null;
	  }

void case_1022()
#line 8055 "ps-parser.jay"
{
		var parameters = new List<DocumentationParameter> ();
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }

void case_1023()
#line 8061 "ps-parser.jay"
{
		var parameters = yyVals[-2+yyTop] as List<DocumentationParameter>;
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }

void case_1024()
#line 8070 "ps-parser.jay"
{
		if (yyVals[-1+yyTop] != null)
			yyVal = new DocumentationParameter ((Parameter.Modifier) yyVals[-1+yyTop], (FullNamedExpression) yyVals[0+yyTop]);
		else
			yyVal = new DocumentationParameter ((FullNamedExpression) yyVals[0+yyTop]);
	  }

#line default
   static readonly short [] yyLhs  = {              -1,
    0,    4,    0,    0,    1,    1,    1,    1,    2,    2,
   11,   11,   12,   12,   13,   13,   16,   16,   18,   17,
   19,   17,   20,   20,   15,   21,   14,   24,   22,   22,
   22,   22,   27,   28,   30,   31,    8,   26,   26,   32,
   32,   32,   33,   33,   34,   34,   29,   29,    7,    7,
    6,    6,   35,   35,   36,   36,   37,   37,   37,   38,
   38,   38,   42,   39,   43,   39,   40,   40,   40,   40,
   40,   40,    9,    9,   10,   10,   52,   50,   55,   51,
   51,   51,   51,   53,   53,   53,   54,   54,   59,   56,
   57,   58,   58,   60,   60,   60,   60,   60,   64,   62,
   61,   61,   65,   65,   66,   66,   67,   67,   67,   67,
   67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
   67,   78,   79,   81,   76,   82,   75,   85,   87,   90,
   91,   92,   45,   45,   93,   93,   96,   68,   97,   97,
   98,   98,   99,   95,   95,  102,  100,  100,  101,  105,
   69,  109,   69,   69,  104,  112,  104,  106,  106,  113,
  113,  114,  115,  114,  110,  110,  116,  116,  117,  118,
  108,  108,  111,  111,  121,   41,  124,  126,  119,  127,
  119,  128,  119,  129,  130,  131,  119,  119,  119,  125,
  125,  133,  120,  120,  123,  123,  135,  135,  135,  135,
  135,  135,  136,  136,  138,  138,  138,  141,  138,  139,
  139,  142,  142,  143,  143,  143,  137,  137,  137,  144,
  144,  146,  148,  149,   70,  151,  152,  153,   72,  147,
  147,  147,  147,  147,  157,  154,  158,  155,  156,  156,
  156,  159,  161,  162,  164,  165,   46,   46,  163,  163,
  166,  166,  167,  167,  167,  167,  167,  167,  167,  167,
  170,   73,  169,  169,  171,  171,  174,  168,  168,  173,
  173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
  173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
  173,  173,  173,  177,  175,  178,  175,  175,  175,  179,
   74,  181,   71,  184,  185,   71,  180,  187,  180,  182,
  182,  188,  188,  189,  190,  189,  191,  186,  183,  183,
  183,  183,  183,  195,  192,  196,  193,  194,  194,   77,
  198,  200,  201,   47,  197,  197,  197,  199,  199,  199,
  202,  202,  203,  204,  203,  203,  203,  205,  206,  207,
   48,   49,  208,  208,  209,  210,  210,   23,  211,  211,
  211,  212,  212,  213,  213,  213,  215,  215,  217,   84,
  145,  122,  122,  150,  150,  218,  218,  216,  216,  219,
  219,  220,  220,  222,  222,   94,  176,  176,  107,  107,
  140,  140,  224,  224,  172,  172,  223,  223,  223,  227,
  227,  228,  226,  226,  226,  226,  229,  229,  229,  229,
  229,  229,  229,  229,  229,  230,  230,  230,  230,  230,
  230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
  230,  230,  231,  231,  231,  231,  232,  232,  232,  232,
  249,  249,  250,  251,  251,  233,  233,  248,  248,  248,
  248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
  248,  248,  248,  235,  235,  235,  247,  247,  256,  260,
  258,  258,  257,  257,  259,  259,  259,  261,  261,  261,
  261,  262,  254,  254,  255,  255,  255,  255,  263,  263,
  264,  264,  264,  264,  266,  266,  266,  265,  236,  236,
  236,  236,  268,  268,  268,  253,  253,  269,  237,  238,
  238,  239,  240,  244,  244,  244,  244,  270,  270,  270,
  270,  225,  225,  271,  271,  272,  272,  246,  246,  273,
  275,  274,  276,  276,  277,   25,   25,  214,  241,  241,
  242,  242,  243,  243,  278,  280,  245,  281,  282,  245,
  284,  285,  283,  286,  287,  283,  234,  288,  288,  288,
  288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
  289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
  289,  290,  290,  290,  290,  290,  290,  290,  291,  291,
  291,  291,  291,  291,  291,  291,  291,  291,  291,  292,
  292,  292,  292,  292,  292,  292,  293,  293,  293,  293,
  293,  293,  293,  293,  293,  294,  294,  294,  294,  294,
  295,  295,  295,  296,  296,  296,  297,  297,  297,  298,
  298,  298,  299,  299,  299,  300,  300,  301,  301,  301,
  301,  302,  302,  302,  302,  302,  302,  302,  302,  302,
  302,  302,  302,  302,  302,  303,  303,   63,   63,  304,
  304,  103,  306,  307,  308,  309,  310,  311,   44,   83,
   83,   80,   80,  132,  132,  312,  312,  312,  312,  312,
  312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
  312,  312,   86,   86,   86,  160,  160,  160,   88,   88,
   88,   89,   89,  313,  313,  314,  314,  315,  315,  316,
  316,  316,  316,  221,  221,  317,  317,  319,  134,  321,
  279,  325,  323,  324,  324,  326,  320,  320,  322,  322,
  328,  327,  318,  318,  329,  329,  330,  330,  330,  330,
  334,  334,  335,  335,  335,  332,  332,  332,  332,  332,
  332,  332,  332,  332,  332,  332,  332,  332,  332,  336,
  336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
  336,  336,  336,  350,  350,  350,  350,  337,  351,  333,
  352,  267,  267,  354,  354,  252,  252,  353,  356,  331,
  358,  331,  359,  331,  355,  355,  355,  357,  357,  362,
  362,  361,  361,  363,  363,  363,  363,  360,  338,  338,
  338,  349,  349,  364,  365,  365,  339,  339,  368,  369,
  366,  366,  366,  371,  367,  367,  370,  370,  370,  373,
  373,  373,  375,  374,  374,  372,  372,  376,  376,  376,
  340,  340,  340,  340,  377,  377,  381,  382,  378,  378,
  378,  384,  379,  386,  383,  389,  383,  383,  392,  388,
  388,  391,  391,  393,  393,  387,  387,  396,  385,  385,
  395,  395,  390,  390,  394,  394,  397,  398,  398,  399,
  400,  401,  380,  341,  341,  341,  341,  341,  341,  341,
  402,  403,  403,  404,  404,  404,  405,  405,  405,  406,
  406,  406,  407,  407,  407,  408,  408,  342,  342,  342,
  342,  409,  409,  410,  412,  410,  410,  411,  411,  343,
  344,  413,  347,  345,  345,  415,  416,  348,  418,  419,
  346,  346,  346,  417,  417,  414,  414,  305,  305,  305,
  305,  420,  420,  422,  422,  424,  423,  425,  423,  421,
  421,  421,  421,  421,  429,  427,  430,  431,  427,  426,
  426,  432,  432,  432,  432,  432,  437,  433,  438,  434,
  439,  440,  441,  435,  443,  444,  445,  435,  442,  442,
  447,  436,  446,  450,  446,  449,  452,  449,  448,  448,
  448,  451,  451,  451,  428,  453,  428,    3,    3,  455,
    3,    3,  456,  456,  454,  454,    5,  457,  457,  461,
  457,  457,  457,  457,  458,  458,  459,  462,  459,  460,
  460,  463,  463,  464,
  };
   static readonly short [] yyLen = {           2,
    2,    0,    3,    1,    2,    4,    3,    1,    0,    1,
    1,    2,    4,    2,    1,    1,    1,    1,    0,    3,
    0,    5,    1,    2,    1,    4,    1,    0,    5,    3,
    5,    2,    0,    0,    0,    0,   11,    0,    1,    1,
    3,    1,    0,    1,    0,    1,    2,    3,    0,    1,
    0,    1,    0,    1,    1,    2,    1,    1,    2,    1,
    1,    1,    0,    3,    0,    5,    1,    1,    1,    1,
    1,    1,    0,    1,    1,    2,    0,    3,    0,    6,
    3,    2,    1,    1,    1,    1,    1,    3,    0,    3,
    1,    0,    3,    0,    1,    1,    3,    3,    0,    4,
    1,    1,    0,    1,    1,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    3,    3,    0,    3,    0,    5,    0,    0,    0,
    0,    0,   17,    5,    0,    2,    0,    9,    0,    1,
    1,    2,    4,    0,    1,    0,    3,    1,    1,    0,
    9,    0,   10,    8,    0,    0,    3,    0,    1,    1,
    2,    3,    0,    6,    0,    1,    1,    2,    5,    0,
    4,    2,    1,    1,    0,    3,    0,    0,   11,    0,
    9,    0,    9,    0,    0,    0,   14,   10,    5,    0,
    2,    1,    1,    1,    0,    1,    1,    3,    3,    5,
    1,    1,    1,    3,    4,    2,    5,    0,    7,    0,
    1,    1,    2,    1,    1,    1,    4,    5,    3,    0,
    2,    0,    0,    0,   12,    0,    0,    0,   15,    1,
    2,    1,    2,    1,    0,    5,    0,    5,    1,    1,
    1,    0,    0,    0,    0,    0,   17,    5,    0,    1,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    0,    5,    1,    1,    1,    1,    0,    8,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    0,    7,    0,    7,    2,    2,    0,
    9,    0,   10,    0,    0,   11,    0,    0,    3,    0,
    1,    1,    2,    4,    0,    7,    0,    2,    2,    2,
    1,    1,    1,    0,    5,    0,    5,    1,    1,    2,
    0,    0,    0,   12,    0,    2,    2,    0,    1,    2,
    1,    3,    2,    0,    5,    3,    1,    0,    0,    0,
   14,    6,    0,    1,    2,    0,    1,    1,    1,    4,
    4,    2,    2,    0,    3,    2,    1,    3,    0,    3,
    1,    1,    3,    1,    2,    3,    4,    0,    3,    1,
    3,    3,    1,    1,    1,    1,    1,    1,    1,    1,
    0,    2,    1,    1,    1,    2,    2,    1,    2,    1,
    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    3,    3,    4,    5,    5,
    3,    4,    2,    3,    2,    3,    5,    5,    5,    4,
    3,    3,    4,    4,    4,    4,    3,    4,    1,    1,
    1,    1,    0,    1,    1,    3,    2,    3,    3,    3,
    1,    1,    0,    1,    1,    3,    3,    2,    1,    1,
    2,    2,    2,    2,    3,    2,    4,    1,    4,    5,
    4,    3,    1,    3,    2,    1,    3,    1,    1,    4,
    3,    2,    2,    2,    2,    4,    5,    1,    1,    4,
    4,    1,    2,    2,    3,    1,    2,    2,    4,    1,
    1,    1,    1,    3,    4,    1,    1,    1,    4,    4,
    4,    2,    4,    2,    0,    0,    9,    0,    0,   10,
    0,    0,   10,    0,    0,   11,    4,    1,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    1,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    1,    3,    3,    3,    3,    3,    3,    1,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    1,
    3,    3,    3,    3,    3,    3,    1,    3,    3,    3,
    3,    3,    3,    3,    3,    1,    3,    3,    3,    3,
    1,    3,    3,    1,    3,    3,    1,    3,    3,    1,
    3,    3,    1,    3,    3,    1,    3,    1,    5,    4,
    5,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
    1,    1,    1,    0,    0,    0,    0,    0,   17,    0,
    1,    0,    1,    1,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    0,    2,    3,    0,    2,    3,    0,    2,
    3,    0,    1,    1,    2,    4,    3,    1,    3,    1,
    3,    1,    1,    0,    1,    1,    1,    0,    4,    0,
    4,    0,    5,    0,    3,    1,    1,    1,    1,    1,
    0,    4,    0,    1,    1,    2,    1,    1,    1,    1,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    0,    4,
    4,    1,    2,    2,    1,    1,    1,    1,    0,    8,
    0,    6,    0,    8,    0,    2,    1,    0,    1,    0,
    1,    1,    2,    2,    4,    4,    6,    1,    2,    2,
    2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
    5,    7,    4,    0,    8,    4,    0,    1,    2,    1,
    2,    1,    2,    0,    1,    1,    2,    3,    3,    1,
    1,    1,    1,    1,    5,    4,    1,    1,    7,    3,
    6,    0,    4,    0,    6,    0,    5,    1,    0,    4,
    2,    2,    2,    1,    1,    0,    1,    0,    6,    1,
    0,    2,    0,    1,    0,    1,    1,    1,    3,    0,
    0,    0,   10,    1,    1,    1,    1,    1,    1,    1,
    2,    2,    2,    3,    4,    3,    3,    3,    2,    3,
    3,    2,    4,    4,    3,    0,    1,    3,    4,    5,
    3,    1,    2,    3,    0,    8,    3,    0,    4,    2,
    2,    0,    3,    5,    4,    0,    0,   10,    0,    0,
    9,    5,    4,    2,    1,    0,    2,    2,    2,    2,
    2,    4,    5,    4,    5,    0,    5,    0,    6,    3,
    2,    2,    2,    1,    0,    3,    0,    0,    6,    1,
    2,    1,    1,    1,    1,    1,    0,    5,    0,    3,
    0,    0,    0,   12,    0,    0,    0,   13,    0,    2,
    0,    3,    1,    0,    4,    1,    0,    4,    1,    2,
    2,    1,    2,    2,    0,    0,    4,    2,    3,    0,
    4,    2,    2,    3,    0,    1,    2,    2,    3,    0,
    7,    4,    4,    3,    1,    3,    0,    0,    4,    0,
    1,    1,    3,    2,
  };
   static readonly short [] yyDefRed = {            0,
    8,    0,    0,    0,    0,    0,    0,    0,    2,    4,
    0,    0,   11,   14,    0,  998,    0,    0, 1002,    0,
    0,    0,   17,   15,   16,   23,   18,    0,   25,   27,
    0,    0,    0,  369, 1015, 1007,    0,   10,    1,    0,
    0,    0,   12,    0,  816,    0,    0,  408,  415,    0,
    0,    0,  403,    0,    0,  847,  405,  442,    0,  404,
    0,  880,    0,    0,    0,  411,    0,  413,    0,  440,
    0,  407,  409,    0,    0,  509,    0,  441,    0,    0,
  412,  414,    0,  439,  922,    0,  410,    0,    0,    0,
    0,    0,    0,    0,  530,    0,  778,    0,    0,    0,
    0,    0,    0,    0,    0,  438,    0,  531,  469,    0,
  815,  433,  435,  406,    0,  416,  417,  418,  419,  420,
  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
  431,  432,  436,  437,    0,    0,    0,    0,  773,  571,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  660,  658,  659,  661,  760,    0,  743,  745,
    0,  741,  744,  761,  763,  764,  765,  766,  767,  768,
  769,  770,  771,  772,  762,  890,    0,  817,  818,  841,
  842,  843,  844,    0,  884,  885,  886,  887,  888,  889,
    0,    0,    0,    0,  385,  398,    0,    0,    0,  384,
  358,  359,  536,    0,    0,    0,   21,    0, 1006,   24,
  999,    0,    0,  275,  274,  271,  276,  277,  270,  290,
  289,  281,  282,  278,  280,  279,  283,  272,  273,  284,
  285,  286,  292,  291,  287,  288,  293,    0,    0, 1018,
    0, 1008,    3,   77,    0,    0,    0,   75,   13,    0,
  443,    0,    0,    0,  788,  891,  542,  718,  920,    0,
  787,  786,    0,  893,  892,    0,  570,    0,    0,    0,
    0,    0,    0,  564,    0,  852,    0,  545,    0,    0,
    0,    0,    0,    0,    0,  519,    0,    0,    0,  518,
  515,    0,  899,    0,    0,    0,    0,  902,    0,    0,
    0,  569,  563,  544,  921,    0,    0,    0,    0,    0,
    0,  388,    0,    0,  387,    0,    0,    0,    0,    0,
  567,    0,  561,    0,  566,  560,  577,  572,  578,  573,
  565,  559,  581,  576,  579,  574,  580,  575,  568,  562,
    0,    0,  538,  434,  362,  363,    0,    0,    0,    0,
  453,    0,  455,    0,  512,  513,    0,    0,    0,    0,
  779,    0,    0,    0,  481,    0,    0,  475,  532,  528,
  174,  173,  533,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  722,  742, 1001,  812,  813,  777,
  814,  759,  746,  775,  774,  776,  747,  748,  749,  750,
  751,  752,  753,  754,  755,  756,  757,  758,    0,    0,
  954,  969,    0,    0,  955,  957,    0,  981,  940,  938,
  962,    0,    0,  960,  963,  964,  965,  966,  941,  939,
 1004,    0,    0,  357,    0,    0,  397,   30,    0,  396,
    0,  399,    0,    0,   20,    0,    0, 1014,    0,  370,
    0,    0, 1016,    0,    6,   33,   76,  511,    0,  508,
    0,  506,    0,    0,    0,  489,    0,    0,  485,  490,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  551,
  662,    0,  896,  894,  663,    0,    0,    0,    0,    0,
    0,  898,  897,    0,    0,  901,  900,  911,    0,    0,
    0,  912,    0,  923,    0,  785,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  548,    0,    0,
  446,  447,  726,  725,  366,  367,    0,  461,    0,    0,
    0,    0,  462,  451,    0,  454,  456,    0,  502,    0,
    0,    0,  905,    0,    0,    0,    0,    0,    0,  471,
  472,  467,  477,    0,    0,    0,  642,  652,  654,  643,
  644,  645,  646,  647,  648,  649,  650,  651,  655,  653,
  586,  583,  588,  585,  587,  584,  598,    0,    0,    0,
  599,    0,  595,  582,    0,  596,    0,  597,    0,  604,
    0,  605,    0,  606,    0,  612,    0,  613,    0,  614,
    0,  615,    0,    0,    0,    0,    0,  623,    0,  626,
    0,  629,    0,  632,    0,  635,    0,  637,    0,    0,
  850,    0,  811,  810,  809,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  953,  952,    0,  961,    0,  951,
    0,    0,    0,  524,  526,    0,  523,   26,    0, 1012,
 1013,  383,    0,    0,  380,  215,  214,  216,    0,    0,
  212,    0,    0, 1022, 1010,   83,   85,   86,    0,    0,
   78,    0,    0,   87,   89,    0,  460,  510,    0,    0,
  498,  493,  494,    0,  491,  492,  488,  444,  445,  464,
    0,  740,    0,    0,  735,  737,  738,  739,  541,  793,
  557,  926,  858,    0,  503,    0,  853,    0,    0,    0,
  202,    0,    0,    0,  196,    0,    0,  203,    0,  895,
  823,  819,    0,  925,    0,    0,  516,    0,    0,  540,
  539,  826,    0,    0,    0,    0,  909,    0,  913,  543,
  781,  933,    0,  784,  929,  783,  789,  797,    0,    0,
  846,    0,    0,  944,    0,  942,    0,  554,  452,    0,
  365,    0,    0,    0,  463,  448,    0,    0,  501,  499,
  465,  466,  904,  903,  780,  482,  479,  480,  478,  470,
  468,  476,  534,  529,  640,    0,    0,    0,  657,  656,
  970,    0,  946,    0,  971,  956,  958,  967,    0,  982,
    0,  950,  996,   31,  360,  361,   29,  525,  527,   22,
  717,  716,    0,  715,    0,  379,  394,  393, 1024,  213,
 1019,    0,    0,   82,   79,    0,    0,    0,   42,   40,
   34,    0,  507,    0,    0,  487,  486,  727,  728,  719,
  736,    0,    0,    0,  505,    0,  854,  856,  881,    0,
    0,  206,    0,    0,    0,    0,    0,  924,  520,  517,
  521,  824,    0,  917,    0,  914,  910,  932,    0,    0,
  808,  796,    0,    0,    0,  802,  845,  945,  943,    0,
    0,  368,  449,  500,  459,  458,  457,  641,  639,  723,
    0,  948,    0,  975,    0,    0,    0,  990,  991,  984,
    0,  382,  381, 1023,    0,    0,   88,   81,    0,   90,
    0,    0,  495,    0,    0,    0,    0,    0,  868,  504,
    0,    0,    0,  219,    0,    0,    0,    0,  204,  199,
    0,  820,    0,    0,    0,    0,  935,    0,    0,    0,
    0,  792,  803,    0,    0,  851,  848,    0,    0,  947,
    0,    0,    0,  968,    0,  997, 1011,    0,  102,    0,
    0,   95,   96,  101,   35,   41,  497,    0,  937,    0,
    0,  872,    0,    0,  874,    0,    0,    0,    0,    0,
  217,    0,    0,  546,  386,    0,    0,  822,  832,    0,
  840,    0,    0,    0,  830,  836,  919,  915,  934,  930,
    0,    0,    0,    0,    0,  849,  949,    0,  972,  959,
    0,    0,  986,    0,   99,   93,    0,    0,  794,  927,
    0,    0,  857,  865,  864,  859,  861,  882,  221,  218,
  207,  392,  208,    0,  200,  552,    0,  825,    0,  837,
    0,  829,  831,    0,    0,  790,    0,  805,  549,    0,
  976,    0,  993,  994,  987,   80,    0,   97,   98,    0,
    0,    0,    0,  869,  855,    0,    0,    0,  720,  547,
    0,  839,  838,    0,  931,    0,    0,  555,    0,    0,
    0,  100,    0,    0,    0,    0,   62,   47,    0,   55,
   57,   58,   60,   61,   67,   68,   69,   70,   71,   72,
  175,   36,  928,  878,  860,    0,  876,    0,  883,  209,
    0,  553,  731,  916,  807,  550,    0,    0,  973,  988,
   48,   65,    0,  681,  691,  682,  679,  687,  676,  686,
  680,  678,  677,  684,  683,  689,  685,  688,  690,  692,
    0,    0,  674,   59,   56,    0,    0,  863,  862,    0,
    0,    0,  556,  977,    0,    0,   64,    0,    0,    0,
    0,    0,    0,    0,    0,  675,  194,  176,  193,   37,
  879,  729,  730,  721,    0,    0,    0,    0,    0,    0,
    0,  372,    0,    0,    0,    0,    0,    0,  184,  664,
    0,    0,  732,    0,    0,  974,   66,  348,    0,  331,
    0,  189,  177,    0,    0,  180,  182,    0,    0,  354,
    0,    0,  248,    0,  134,    0,  978,  980,    0,  337,
  336,    0,  376,    0,    0,    0,    0,  373,    0,    0,
  355,  352,    0,  665,  243,  129,    0,  332,    0,    0,
    0,  377,    0,    0,  185,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  347,  333,    0,  341,  192,  178,    0,
    0,  181,  183,    0,  402,    0,    0,    0,    0,  400,
    0,    0,  349,    0,  330,    0,    0,    0,  191,  188,
    0,  695,    0,    0,  666,    0,  704,  698,    0,  244,
  130,    0,  346,    0,    0,  342,  179,    0,  701,    0,
    0,  705,  401,    0,    0,  350,    0,   44,  334,  186,
  707,    0,  667,  245,  131,    0,  345,    0,  712,    0,
  713,  710,    0,  708,    0,    0,    0,  351,  187,    0,
    0,  121,    0,    0,  115,  109,    0,    0,  105,  107,
  108,  110,  111,  112,  113,  114,  116,  117,  118,  119,
  120,    0,  260,  255,  253,  254,  256,  257,  258,  259,
    0,    0,  251,    0,  711,  709,  126,    0,    0,  668,
  106,    0,  246,  252,  132,    0,  125,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  123,  122,  261,
  269,    0,    0,    0,    0,    0,  371,    0,  299,    0,
    0,  300,  298,    0,  374,    0,    0,    0,    0,    0,
    0,    0,  669,  247,  133,  127,    0,  137,    0,    0,
    0,    0,    0,  226,  375,    0,  267,    0,  150,  264,
  263,  262,  136,    0,    0,  296,  390,    0,  389,    0,
  294,    0,    0,  222,    0,  148,  146,    0,  145,  304,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  156,
    0,    0,    0,    0,    0,  141,    0,  308,    0,    0,
  154,    0,    0,    0,    0,    0,    0,  223,    0,    0,
    0,    0,  160,  147,  149,    0,  138,  142,  323,    0,
  305,    0,    0,  317,    0,    0,    0,  312,  297,  172,
    0,    0,    0,    0,  167,  301,  295,    0,    0,    0,
  157,    0,  151,  161,    0,    0,    0,    0,  319,    0,
  320,  309,    0,    0,  303,  313,    0,    0,  153,  168,
    0,  266,  268,  265,  234,    0,  224,    0,    0,    0,
  143,  324,  326,  306,    0,    0,  318,    0,  171,    0,
  227,    0,    0,  231,  233,  163,    0,    0,    0,    0,
    0,  235,  237,  225,    0,  328,  329,  325,  327,  315,
  169,  228,    0,    0,  164,  317,    0,  241,  240,  239,
  236,  238,  316,  229,
  };
  protected static readonly short [] yyDgoto  = {             7,
    8,   39,    9,   40,   10, 1091,   41,  245,  742,  462,
   12,   13,   23,   24,   25,   26,   27,  208,  474,   42,
   29,   30,  314,  466,  199,  861,  706,  941, 1092, 1048,
 1177,  862, 1606,  586, 1118, 1119, 1120, 1121, 1122, 1375,
 1376, 1153, 1186, 1125, 1126, 1127, 1128, 1129, 1130,  248,
  701,  484,  702,  703,  936,  704,  705,  940,  858,  991,
  992,  993,  421, 1087, 1377, 1378, 1379, 1380, 1381, 1382,
 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1171,
 1408, 1416, 1195, 1212, 1246, 1287, 1278, 1308, 1325, 1345,
 1367, 1434, 1458, 1014, 1488, 1474, 1504, 1505, 1506, 1489,
 1524, 1502,  512, 1501, 1485, 1521, 1478, 1513, 1494, 1543,
  901, 1519, 1522, 1523, 1605, 1544, 1545, 1541, 1131, 1198,
 1176, 1213,  744, 1254, 1299, 1318, 1259, 1260, 1241, 1285,
 1358, 1172, 1300, 1199,  745,  746,  747,  748,  689, 1013,
 1098,  690,  691, 1011, 1438, 1499, 1577, 1550, 1593, 1447,
 1482, 1601, 1617, 1578, 1579, 1621, 1613, 1614, 1244, 1289,
 1277, 1344, 1401, 1366, 1433, 1402, 1403, 1430, 1472, 1452,
 1573,  315,  238, 1483, 1431, 1305, 1496, 1492, 1462, 1509,
 1491, 1536, 1531, 1507, 1557, 1562, 1534, 1537, 1538, 1616,
 1563, 1532, 1533, 1608, 1597, 1598, 1230, 1252, 1295, 1280,
 1316, 1296, 1297, 1334, 1249, 1332, 1356, 1239, 1240,  467,
  201,  112,  345,  346,  557,  480,  239, 1215,  684,  685,
  843, 1015,  204,  849,  470,  113, 1309, 1310,  114,  115,
  116,  117,  118,  119,  120,  121,  122,  123,  124,  125,
  126,  127,  128,  129,  130,  131,  132,  133,  134,  260,
  720,  135,  491,  497,  498,  136,  366,  582,  367,  811,
  368,  807,  499,  500,  712,  713,  714,  736,  492,  292,
  471,  676,  137,  370,  138,  374,    0,  509, 1100, 1064,
  787, 1107,  422,  749, 1101,  911, 1147,  140,  141,  142,
  143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
  153,  154,  821,  155,  156,  516, 1242, 1276, 1341, 1365,
 1432, 1173, 1326, 1327, 1363, 1364,  844,  723,  501,  870,
 1141, 1204,  423,  158,  650,  554, 1144, 1182,  724,  725,
  424,  425,  426,  161,  162,  163,  427,  428,  429,  430,
  431,  432,  433,  434,  435,  436,  437,  438,  175,  439,
  576,  176,  256,  540,  780,  900,  904,  542,  872,  902,
  905, 1001,  906,  440,  177,  178,  179,  753,  963, 1022,
  964, 1023, 1024, 1072, 1025, 1026,  180,  181,  182,  183,
  184,  978,  737,  507,  738,  951,  739, 1006,  952, 1007,
 1135, 1096, 1057, 1136,  949, 1003, 1137, 1138,  277,  953,
 1097,  185,  186,  187,  188,  189,  190,  295,  531,  532,
  766, 1074,  307,  947,  873, 1093,  969,  899, 1075,  191,
  450,  192,  451,  923,  979,  452,  453,  670,  661,  662,
  926,  454,  455,  456,  457,  458,  927,  656,  925, 1082,
 1185, 1226,  981, 1109, 1206,  830,  664,  831, 1042,  985,
 1043, 1111,  931,  211,   17,   19,   36,   37,  242,  692,
  853,  481,  693,  694,
  };
  protected static readonly short [] yySindex = {         -134,
    0, -214,  369,   33, -207, -133,    0,  378,    0,    0,
 -207,   33,    0,    0,  334,    0, 3246, -207,    0, 9917,
  545,  427,    0,    0,    0,    0,    0,  -69,    0,    0,
  523,  594, 9983,    0,    0,    0,  798,    0,    0,  378,
  506, -207,    0,  521,    0,  513,  548,    0,    0,  203,
 -263, -188,    0,  591, 5361,    0,    0,    0,  591,    0,
  591,    0, -256,  -64,  591,    0,  591,    0, 3885,    0,
 4073,    0,    0,  591,  591,    0, 4234,    0,  598, 5522,
    0,    0,  205,    0,    0,  716,    0,  591, -263,  591,
16057,16057,  769, 5200,    0,13982,    0, 5683, 5844, 6005,
 6166, 6327, 6488, 6649, 6810,    0,  580,    0,    0, -263,
    0,    0,    0,    0,  964,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  163,  188,  695, 4395,    0,    0,
  663, -265,  131,  837,  685,  788,  707,  715,  734,  731,
  618,  752,    0,    0,    0,    0,    0,  767,    0,    0,
 2868,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  206,    0,    0,    0,
    0,    0,    0, 3418,    0,    0,    0,    0,    0,    0,
  313,  574,  506,    0,    0,    0,  439,  214,  789,    0,
    0,    0,    0,  812,  829,  782,    0,  462,    0,    0,
    0,16166,16166,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  832,  793,    0,
  119,    0,    0,    0,  506,  932,  506,    0,    0, 1014,
    0,  826,13982,13382,    0,    0,    0,    0,    0,13982,
    0,    0,  885,    0,    0,16166,    0, -180,  915,  144,
 1012, 5200,  659,    0,16166,    0,  591,    0,  925,13982,
  548,  548,13982,13982,  928,    0,13982, 4121,  309,    0,
    0,  948,    0, 1070,  548,16166,13982,    0, 1089,  548,
  610,    0,    0,    0,    0,13982,  598,  897,13532,  951,
13982,    0,  309,  214,    0, -263, 1037, -263, 1052,  351,
    0, -263,    0,  238,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  909,14342,    0,    0,    0,    0,  921,  337,  306,  627,
    0,  911,    0,  706,    0,    0, 4556,13382,  548,13982,
    0,  963,  981,  987,    0,  157, -173,    0,    0,    0,
    0,    0,    0,  986,13982,13982,13982,13982,13982,13982,
13982,13982,13982,13982,13982,13982,13982,13982, 6971, 7132,
 7293, 9869, 9968, 7454, 7615, 7776, 7937, 8098, 8259, 8420,
 8581, 8742, 8903,14282,14282,14282,14282, 9064, 9225, 9386,
 9547, 9708,14282,13982,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -178,  285,
    0,    0,16057,16057,    0,    0, -263,    0,    0,    0,
    0,  609, 1015,    0,    0,    0,    0,    0,    0,    0,
    0,  506,  938,    0,  941,  999,    0,    0,  624,    0,
  812,    0,  993, -207,    0,  832,  832,    0, -197,    0,
 -184, 1010,    0, -149,    0,    0,    0,    0,  953,    0,
  681,    0,13682,13682, 1145,    0,  241, 1002,    0,    0,
 3590, 1013,16166, 1016, 1021, -263, 3912,13832, -169,    0,
    0,  548,    0,    0,    0,   82,  179,  952, 1022,  996,
  959,    0,    0,  183,  186,    0,    0,    0,  236,  598,
 -122,    0, 1023,    0,  548,    0,  192,  829, -263,  812,
16166, -192,  195, 1107,13982, 1109,13982,    0, 1028,  953,
    0,    0,    0,    0,    0,    0,   10,    0, -263,13982,
13982,  432,    0,    0,13982,    0,    0,13982,    0,  162,
  241,   79,    0, 1165,  548, 3590,13982,13982,13982,    0,
    0,    0,    0,  268, 4395,  695,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1029,  964,    0,
    0,    0,    0,    0, -265,    0, -265,    0, -265,    0,
  131,    0,  131,    0,  131,    0,  837,    0,  837,    0,
  837,    0,  837,  685,  685,  685,  685,    0,  788,    0,
  707,    0,  715,    0,  734,    0,  731,    0,  -71, 3590,
    0,  591,    0,    0,    0, 4717, -263, 1112, -263, 1115,
 4717, 4717, 1018,13982,    0,    0, 1015,    0, -263,    0,
  656,  309, 1024,    0,    0,  721,    0,    0, 1041,    0,
    0,    0,  638,  367,    0,    0,    0,    0,16197, -184,
    0, 1033, 1030,    0,    0,    0,    0,    0, -137, 1038,
    0, 1027, 1034,    0,    0, -151,    0,    0,13982,13682,
    0,    0,    0, -263,    0,    0,    0,    0,    0,    0,
 3751,    0,  211, 3590,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -263,    0,   95,    0, 1125, 1031, 1129,
    0,  335,  125, 1048,    0, 1039, 1040,    0, -169,    0,
    0,    0, 3418,    0, 3418,  953,    0,  258,  953,    0,
    0,    0, 1057,  591, -144,  598,    0,  598,    0,    0,
    0,    0, 3418,    0,    0,    0,    0,    0, 4395, 1043,
    0, 3418,13982,    0,13982,    0, -169,    0,    0,16166,
    0,  953,  724, 1054,    0,    0,  727,  730,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 4878,  211,13982,    0,    0,
    0, 1138,    0, 1139,    0,    0,    0,    0,  855,    0,
 1047,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  997,    0, -197,    0,    0,    0,    0,    0,
    0, -184, -184,    0,    0,  938, 1063, 1064,    0,    0,
    0, 1066,    0, 1068, 1056,    0,    0,    0,    0,    0,
    0, -192, 1060, 1053,    0,13982,    0,    0,    0, -142,
 1009,    0, 1067,  506, 1211, 1081, 1188,    0,    0,    0,
    0,    0,13982,    0, 1053,    0,    0,    0, -191, -192,
    0,    0, -263,  548, 1043,    0,    0,    0,    0, 1084,
 -169,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  199,    0, 4717,    0, 4717, 1104, 4717,    0,    0,    0,
  450,    0,    0,    0, 1088,  938,    0,    0, 5039,    0,
 1092, 1026,    0,13982, 1043, 4395, 1043,16166,    0,    0,
13982,13982,13982,    0,  766, 1079,16243, 1083,    0,    0,
 1080,    0, 3418, -194, 1094, 1095,    0, 1043, 1096, 1043,
  801,    0,    0, 1086, 1098,    0,    0,  548, 4717,    0,
 4717, 1122, 4717,    0,13982,    0,    0, 1034,    0,  501,
 -243,    0,    0,    0,    0,    0,    0,  548,    0, 1043,
 1100,    0, -192, 1101,    0, 3418,  616, 1101, 1045,13982,
    0,14553, 1085,    0,    0, 1240,16243,    0,    0,13982,
    0, 1126, 2622, -211,    0,    0,    0,    0,    0,    0,
  548,16166, 4395,16243, 1110,    0,    0, 1147,    0,    0,
  870, 1116,    0, 1127,    0,    0, 5039,  741,    0,    0,
 1043, 3418,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1132,    0,    0,  -62,    0, 3590,    0,
 2622,    0,    0, 1215, 3418,    0, 1118,    0,    0,16243,
    0, 4717,    0,    0,    0,    0,13982,    0,    0,  741,
 -201, 1133, 3418,    0,    0,13982, 3418,13982,    0,    0,
  598,    0,    0, 1141,    0, 4395, 1132,    0, 4717, 1155,
13982,    0, 1142, 1144,15969,  863,    0,    0, -201,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  625,    0, 1130,    0,    0,
 3590,    0,    0,    0,    0,    0,  598, 1159,    0,    0,
    0,    0, -209,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  636,15969,    0,    0,    0,  350,  741,    0,    0,13982,
  240, 3590,    0,    0, 4717, -201,    0, 1097, 1097,15938,
 1099, 1099, 1103, 1232,  477,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1146, 4717, 1157, 1151, 1149, 1143,
  953,    0,  194,15938, 1105, 1158, 1161, 1153,    0,    0,
 1303, 1313,    0, 1157, -263,    0,    0,    0,14583,    0,
 1177,    0,    0, 1181, 1123,    0,    0, 1131, 1175,    0,
 1099, 1097,    0, 1097,    0, 1097,    0,    0, -169,    0,
    0, 1193,    0, -169, -169,14542, 1190,    0, -169, -169,
    0,    0, 1194,    0,    0,    0, 1196,    0, 1200, 1204,
    0,    0, 1205, 1207,    0, 1296, 1312, 1296, 1201,  506,
 1202, 1202, 1202, 1202, -169,16166, 1301,16166, 1301, 1301,
16243, 1156,  907,    0,    0, 1210,    0,    0,    0,16243,
16243,    0,    0, 1217,    0, 1348,16166, 1251,   97,    0,
 1251, 1251,    0, 1359,    0, 1227,  506, 1251,    0,    0,
 1213,    0,  129, 1163,    0, 1251,    0,    0,16166,    0,
    0, 1251,    0, 1212, 1216,    0,    0, 1259,    0,  -60,
 1235,    0,    0, 1236, 1239,    0,13982,    0,    0,    0,
    0,16046,    0,    0,    0, 1223,    0, 1251,    0, 1237,
    0,    0, 1228,    0, -189,  506, -189,    0,    0, 1241,
16046,    0, 1242,15969,    0,    0, 1246, -189,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,15969,    0,    0,    0,    0,    0,    0,    0,    0,
 1250,  506,    0, 1253,    0,    0,    0, -189, 3008,    0,
    0, 2407,    0,    0,    0, -189,    0, 1197, 1099, -140,
 1199,15725,  147,  150, 9983, 1099, 1203,    0,    0,    0,
    0, 1216, 1216, 1216, 1262, 1258,    0, 1263,    0,16166,
 1264,    0,    0,16166,    0,  953, 1265,  155, 1271, 1268,
 1258,  381,    0,    0,    0,    0,16243,    0,16166, 1274,
16274, 1218, 1284,    0,    0,  953,    0,16243,    0,    0,
    0,    0,    0, -190, 1267,    0,    0, 1421,    0, 1286,
    0, -169, -169,    0, 1269,    0,    0, 1277,    0,    0,
 1273, -169, 1276, 1295, 1299, -169, 1300, 1302, 1306,    0,
 1285,13982, 1234, 1291, 1277,    0,  166,    0, 1294, 1305,
    0, 1444, 1298,  350, 1309, 1308, 1325,    0, 4395, 1248,
 1326, 1285,    0,    0,    0, 1258,    0,    0,    0,15969,
    0,  506,  506,    0, 1249, 1327, 1294,    0,    0,    0,
13982, 1255, 1329, 1298,    0,    0,    0,16243,16320,  187,
    0, 1258,    0,    0, -190,  451, 1317,15969,    0,15969,
    0,    0, 4395, 1331,    0,    0, 1322, 1295,    0,    0,
 1342,    0,    0,    0,    0,15969,    0,  187,  187, 1328,
    0,    0,    0,    0, 1402, 1477,    0,16243,    0, 1337,
    0,  935, 1353,    0,    0,    0,  570,  570, 1333,16243,
  187,    0,    0,    0, 4395,    0,    0,    0,    0,    0,
    0,    0, -161, -161,    0,    0, 1355,    0,    0,    0,
    0,    0,    0,    0,
  };
  protected static readonly short [] yyRindex = {          118,
    0,    0, 3074,  118,    0,    0,    0, 1745,    0,    0,
   21, 2090,    0,    0,    0,    0, 1358,   21,    0,    0,
    0,  518,    0,    0,    0,    0,    0,   38,    0,    0,
    0,    0,    0,    0,    0,    0, 1747,    0,    0, 1745,
   26,   20,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1343,    0,    0,    0,    0,    0, 1343,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  169,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,13195,    0,    0,    0,
    0,    0,    0,    0,10644,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  244,    0,    0,    0,    0,
11078,11162,11528,11850,12250,  465,12730,12890,13050, 5195,
 5517, 1134,    0,    0,    0,    0,    0,    0,    0,    0,
   24,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1358,    0,    0,    0,    0,    0,    0,
    0,    0,   48, 1879,    0,    0,  643,  644,    0,    0,
    0,    0,    0,  748,  607,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1747,   29,    0,
    0,    0,    0,    0,   55,    0,   52,    0,    0,    0,
    0,    0,    0,  349,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,10071,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1684,    0,
    0,10453,    0, 1344,    0,    0,    0,    0, 1344,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, -195,
    0,    0,  247,  607,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  349,    0, 1343,
    0,    0,    0,    0,    0,    0,  266,    0,    0,    0,
    0,    0,    0, 1362,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 5678,    0,    0,    0,    0,    0,    0,    0,
    0, 2298,    0,    0,    0,    0,    0,    0,    0,    0,
  824,    0,    0, 1361,    0, 1747, 1747,    0,   69,    0,
13405, 1754,    0,    0,    0,    0,    0,    0,10071,    0,
    0,    0,    0,    0,    0,    0,    0,  364,    0,    0,
  273,    0,    0,    0,    0,    0, 1350,    0,  271,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1368,    0,
 1369,    0,    0,    0,    0,    0,    0,10711,    0,  296,
    0,  823,    0,    0,    0,    0,    0,    0,    0,10071,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,10071,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  364,    0, 1344,    0, 1358,    0,    0,    0,    0,
    0,    0,    0,    0, 1371,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,10853,
    0,10952,    0,    0,11261,    0,11345,    0,11444,    0,
11610,    0,11690,    0,11770,    0,11930,    0,12010,    0,
12090,    0,12170,12330,12410,12490,12570,    0,12650,    0,
12810,    0,12970,    0,13130,    0, 5356,    0,    0,  273,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 5678,    0,    0,    0,
    0,  402,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1310,    0,    0,    0,    0,    0,    0,16351,
    0,    0,  849,    0,    0,    0,    0,    0,  933,  652,
    0,    0, 1362,    0,    0, 1372,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  280,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -236,    0, 1363,    0,    0,
    0, 1311,  277,    0,    0, 1370, 1374,    0,  271,    0,
    0,    0, 1358,    0, 1358,10262,    0,    0,10262,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1358,    0,    0,    0,    0,    0,    0, 1364,
    0, 1358,    0,    0,    0,    0,  271,    0,    0,    0,
    0,10071,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -141,    0,
  808,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   69,    0,    0,    0,    0,    0,
    0,16397,16092,    0,    0, 1371,    0,  746,    0,    0,
    0, 1376,    0,    0, -203,    0,    0,    0,    0,    0,
    0,  823,  723,  -58,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  374,    0,    0, 1575,    0,    0,    0,
    0,    0,    0,    0, 1377,    0,    0,    0,  723,  823,
    0,    0,    0,    0,  109,    0,    0,    0,    0,    0,
  271,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  751,    0,
    0,    0,    0,    0, 1364,    0, 1378,    0,    0,    0,
    0,  658,    0,    0,  753, -247,    0, 1379,    0,    0,
    0,    0, 1358, 1384,    0,    0,    0, 1378,    0, 1364,
  291,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1362,    0,14633,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1386,
    0,    0,  260,    0,    0, 1358,    0,    0,    0,    0,
    0,    0,  757,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  940, 1391,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  246,  882,    0,    0,    0,    0,    0,14819,    0,    0,
  173, 1358,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -213,    0,
  946,    0,    0, 1368, 1358,    0,  336,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,14819,
 2413,    0, 1358,    0,    0,  785, 1358,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,15447,  894,10452,    0,    0, 2503,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  821,    0,    0,
  273,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,15532,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  575,16488,    0,    0,    0,    0, 2208,    0,    0,    0,
    0,  950,    0,    0,    0,10261,    0,    0,    0,    0,
    0,    0,    0,  579,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  943,    0,    0, 1393,
   40,    0,    0,    0,    0,    0,    0, 1380,    0,    0,
 1332, 1334,    0,  943,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  133,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  271,    0,
    0,    0,    0,  271,  271,  669,    0,    0,  271,  271,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  459,    0,    0,    0,    0,  328,  393,  328,    0,  347,
  528,    0,  572,  572,  271,    0, -224,    0, -224, -224,
    0,    0,14909,    0,    0, 1394,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  416,    0, 1396,  420,    0,
 1396, 1396,    0,  680,    0,    0,  348,  586,    0,    0,
    0,    0, -218,    0,    0,  619,    0,    0,    0,    0,
    0, 1381,    0,    0, 1997,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  586,    0,    0,
    0,    0,  608,    0,15011,15281,15011,    0,    0,    0,
    0,    0,14460,16527,    0,    0,    0,15101,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1288,    0,    0,    0,    0,    0,    0,    0,    0,
    0,15371,    0,    0,    0,    0,    0,15191,  575,    0,
    0,  575,    0,    0,    0,15011,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1997, 1997, 1997,    0,  -78,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1397,    0,    0,    0,    0,
  754,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1397,    0,    0,    0,    0,
    0,    0,    0,  873,  790,    0,    0, 1398,    0,    0,
    0,  271,  271,    0,  895,    0,    0, 1385,    0,    0,
  899,  271,    0,    0,    0,  271,    0,    0,    0,    0,
 1389,    0,    0,    0, 1390,    0,14652,    0, 1392,    0,
    0,14132, 1395,    0,    0,    0,    0,    0,    0,    0,
    0, 1399,    0,    0,    0,  -78,    0,    0,    0,  496,
    0,15778,15831,    0,    0,    0, 1400,    0,    0,    0,
    0,    0,    0, 1401,    0,    0,    0,    0,    0,15862,
    0,  754,    0,    0,  873,    0,    0, 1459,    0, 1535,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  965,    0,15578,15616,  900,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,10642,15694,  908,    0,
15862,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,
  };
  protected static readonly short [] yyGindex = {            0,
    0, 1759,    0,    0,    0, 1032,   -2, 1608,  -34,  -24,
    0, 1790, -199,  394,  399,  736,    0,    0,    0, 1802,
    0,    0,   -5,    0,    0,    0,    0,    0, -664,    0,
    0,    0, -939, -678,  623,    0,  691,  660,    0,-1020,
 -982,    0,    0,    0,    0,    0,    0,    0,    0, -239,
    0,    0,    0,  875,    0,  956,    0,    0,    0,    0,
  768,  770,  -17,    0, -640,    0, -533, -593, -493, -445,
 -441, -422, -410,    0,    0,    0, -851,    0,    0,-1090,
    0,    0,    0,   -3,    0,  536,    0,   81, -430,    0,
    0,    0,-1394, -984,  261,    0,    0,    0,  315,    0,
    0,    0, -969,    0,    0,    0,    0,  250,    0,    0,
 -136,    0,    0,  299,    0,    0,  278,    0,    0,  311,
    0,-1111, -738,    0,   92,    0,    0,    0,    0,    0,
    0,-1146,  544,  -49,    0,    0,  949,  957, 1093,    0,
    0,    0, 1137,    0,  408,    0, -707,    0,    0,    0,
    0,    0,    0,    0,    0,  223,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  438,    0,    0,    0,
    0,    8,  423,    0,    0,  -87,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  229,    0,    0,  316,    0,
    0,  324,  326,  262,    0,    0,    0,    0,    0,    0,
    0,    0,  542,    0,    0,    0,    0,    0,    0, -183,
    0,   -6, -458, -300,    0,  626,    0,  440,    0, 1017,
    0, 1843, -282,  853, -343,  111,  559, -819,    0,  985,
 -269,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1111,    0,    0,    0,   23,
 1297,  -19, -311, 1514, 1515,    0,    0,    0,    0,    0,
 1290,  802, 1162,    0, 1388, -457, 1569,    0, 1176,    0,
    0,    0,    0, 1304,    0,    0,    0,    0,  777,    0,
    0,    0,   72,    0,    0,    0,    0,    0, 2710,  892,
  893,  866,  867, 1478, 1480, 1481, 1476, 1482,    0, 1485,
    0,    0, -519,    0,    0, -299,    0,    0,    0,    0,
    0, -547,    0,  569,    0,  529,    0, -632,    0, 1082,
    0,    0,   84,    0,    0,    0,    0,    0, -906, -563,
    6, -482,   22,    0, 1740,    0,  110,    0,  178,  212,
  222,  234,  357,  370,  373,  384,  388,  398,    0, -494,
    0,    0,   -9,    0, -420,    0, -835,    0,    0, -577,
 -101,  934, -416,-1003,    0,    0,    0, -516,    0,    0,
    0,  879,    0,    0,  880, -889,    0,    0,    0,    0,
    0,    0,    0,    0, 1404,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1011,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  -42,    0, 1387,
  831,    0,    0, 1008,    0,    0,    0,    0,    0,    0,
 -182,    0,    0,    0,    0,    0, 1456, 1243,    0,    0,
    0, 1457,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  692,    0,    0,    0,    0,    0,    0,    0,    0,
  806,    0,    0, 1758,    0,    0,    0,    0, -202, 1091,
    0,    0,    0, 1102,
  };
  protected static readonly short [] yyTable = {           111,
  259,  373,   35,  316,  318,  520,  246,  487,  475,  460,
  886,  543,  805,  202,  198,  193,  247,  817,  727,   50,
   49,  472,  159, 1005,  857,    5,  782,  200,  378,  301,
  707,  263, 1066,  305,  300,  478,  716, 1005,  160,  538,
 1060,   14,  265, 1214,  282,  570,  558, 1003,  910, 1079,
 1067,    7,  496,  294,   73,  833, 1469, 1020,  682,  299,
  791, 1019,  290,  778,  967, 1486, 1372,  264,  254,  310,
 1123,  317,  319,  870, 1020,  257,  266,  651,  324, 1216,
 1217,  275,  583,  276,  202,  202,  741,  283,  139,  284,
  347,  789, 1134,  727, 1618, 1108,  296,  297, 1123,   20,
  157,   20, 1234,  796,  859,  306,  696,   20, 1124,  998,
  309,  894,  311,  954,  989, 1439, 1069,   51,  854,  261,
  372,    1,  610,  612,  476,  477,  164,  677, 1140, 1263,
  205, 1555, 1123, 1070, 1031,  278, 1124,  358,  699,  697,
  686,  826,  827,  111,  700,  391,   21,  529,   21, 1046,
  687,  389,  390,  391,   21,  391,   31, 1580,  246, 1047,
  871,  688,  391,  699, 1069, 1123,  159,  727,  870,  700,
 1124,  768,  975,   32,  724,  833, 1201,  135,  504,  291,
  244, 1070,  160, 1440,  815,  652,  698,  506,  244,  496,
   33,  262,  244, 1102,  165, 1351,  776,  871,  279,  496,
  244,  205,  205, 1124,  280,  202,  202,  791,  524,  791,
  485,  251,  281,  835,  791, 1094,  255,  779,  946, 1487,
  244,  989,  487,  538,  538,  989,  258,  989,  166,  584,
  989,  989,  139,  989,  989,  490,  496,  483,  167,   20,
   15,  727,  502, 1619,  157,  833,    2, 1021,  793,   22,
  168,  871,  864,  797,  556, 1114,  798,  534,  887,  202,
  888,  989,  511,  496, 1021,  515,  517, 1373,  202,  519,
  164,  513,  514,  680,  681, 1214,   50,   49,  898,  525,
 1005,  202,    5, 1409,  378,  523,   21,  907,  533,  202,
  527,  537,  306,  515, 1005,  369,  544,  889,  546,  508,
  891, 1412,  550,  860, 1003,  699, 1313, 1437,    7, 1044,
  895,   73,  955,  342, 1437, 1319, 1320,  575,  261,  378,
  343,   34,  205,  205,  135,  989,  135,    3,    4,    5,
    6,  135,  816,  913,  802,  202,  378,  751,  165,  490,
  496, 1103,  574, 1352,  871, 1393,  871,   50,   49,  573,
  875,  871, 1328,   73,  774,  657,  659,  587,  588,  589,
  590,  591,  592,  593,  594,  595,  596,  597,  598,  599,
  600,  836,  166,  169,   51,   73,  205, 1357,   73,   74,
  882, 1393,  167, 1394, 1339,  205,  170,   22,  378,  171,
  262,  378,  392,   73,  168, 1349,  649,  209,  205,  304,
  172,  364, 1443,  980,  173,  982,  205,  984,   50,   50,
   49,  724,  790,    2,  174,  730,  378,  799,  799, 1394,
  378, 1529,  378,  658,  660, 1113,   51,  663, 1294,  359,
  655,  369,  378,  364,  754,  787,  202,  202,  760, 1556,
  538,  762, 1575,  369,  683,   51,  393,  772,  813, 1232,
  781,  945,  205,  777,  976, 1078,  202,  671,  257, 1037,
  304, 1038,  791, 1040,  482, 1294, 1306, 1585, 1018, 1586,
 1444,  679, 1473,   51,  752,  711,  711,  202,  700,  970,
  767,  721,  798, 1484,  743, 1592,  732, 1052,  973,  735,
  735, 1058, 1453, 1454, 1455, 1445,  202,  876,  360, 1329,
 1465,  992,  750,  487,  787,  871,  726,   51, 1181, 1343,
 1267, 1053, 1200,  799,  244, 1269, 1270,  169,  921,  775,
 1273, 1274,  728,   73,  378,  771,  364,  784, 1145,  786,
  170, 1329, 1525,  171,  202,  251,  378,  394,  395,  792,
  727,  764,  490,  794,  172,  580, 1304,  490,  173, 1205,
  490,  765,  800,  205,  205,  244,  786, 1095,  174,  806,
  806,  806, 1110, 1571,  709,  804,  361,  372,  441,  795,
  362,  755,  787,   34,   51,  761,  244,  798,  763,  396,
 1105,  726, 1051,  973,  773, 1233,  727,  752,  727, 1148,
  258,  977,  258,  464,  251,   73,  251,  728, 1133,  868,
  804,   74, 1139, 1599, 1446,   73,  356,  465,  992, 1466,
  418,   74,  992,  205,  992, 1611,   73,  992,  992, 1179,
  992,  992,   74,  581, 1196,   16,  364,  251, 1202,  364,
  551,  358,  473,  718,   38,  693,  364,  822,  820,  824,
  364,  363,  364,  820,  820,  806,  829,   95,  992,  833,
  362,  205, 1005,  365,  474,  726,  810,  364,  727,  686,
  724,  733,  795,  195,  795, 1207, 1196,  724,  734,  687,
   73,  728,  419,  653,  818,  442,   74,  869,  782,  443,
  688,  444,  202,  804,  445,  446, 1224,  447,  448,  255,
  693,  490,  324,  804,  865,  804,  848,  561,   73,  727,
  696,  364,  912,  496,  552,  441, 1203,  719,   73,  364,
  473,  364,  992, 1582,  874,  693,  896,  108,  897,   73,
  621,  363,  364,  694,  743,   73, 1404,  697,  806,  726,
  559,   74,  474,  365,  880,  338,  340,  258,  806,  733,
  806,  483,  548, 1497, 1498,  728,  734,  395,  986, 1220,
  782,  654, 1231, 1510, 1197,  696,  484, 1515,  672,  342,
  562,  372,  743,  210,  364,  908,  343,  909,  258,  845,
   20,  563, 1395,   73,  621, 1435, 1257,  210,  694,  449,
  696,  364,  697,  202,  364, 1470,  893, 1583,   44,  364,
 1221,  364,  364,  364,  364,  364,  560,  364,  919,  205,
  515,   73,   73,  694,  364,  549,  364,  697, 1395,  999,
  683,  364,  442,  364,  207,  483,  443,   21,  444,  846,
 1222,  445,  446,  522,  447,  448,   19,  621,   73,  441,
  484,  621,  672,  621,  621,  621,  621,  621,  621,  621,
  621,  621,  621,  621, 1411, 1000,  212,  670,  463,  202,
  700,  671,  366,  621,  364,  621,  364,  621,  950,  743,
 1002,  383,  356,  206,  665,  528, 1000,  621,  621,  621,
 1594, 1595, 1396,   19, 1417,  965,  487,  621,  621,  529,
 1330, 1331,  342,  971,  621,  621,  743, 1337,  670,  342,
  190, 1117,  671, 1612,  972,  244,  343,  795,  621,  621,
  205, 1346,  250,  530,  251,  820,  252,  820, 1396,  820,
 1045,  383,  621, 1188,  356,  190,  356,  213,  670, 1117,
 1397,  994,  671, 1189, 1398,  249,  997, 1369,  372,  202,
  700,  621,  190, 1004,  515, 1008,  442, 1190, 1191, 1192,
  443,  202,  444, 1399, 1077,  445,  446,  841,  447,  448,
  202,  342,  255, 1117, 1193, 1400, 1397,  258,  343,  190,
 1398,  820,  842,  820,  200,  820,  344, 1041, 1036,  356,
  706,  442,  253,  702, 1348,  443,  190,  444,   73, 1399,
  445,  446,  251,  447,  448,  258, 1117, 1231, 1049,  356,
  702, 1400,  511,   73,  356,  706,  356,  356,  356,  356,
 1194,  341,  511,  395, 1054,  202,  703, 1257, 1055,  356,
  202,  356,  706, 1178,  674,  372,  356,  752,  356,  848,
 1056, 1076,  364,  703,  200,  202,  675,  202,  726,  994,
  342,   11,  364,  356,  308,   18,  364,  343,  364,   28,
  459,  200,   91,   91,  728,  344,  873,  364,  356,  465,
  873, 1142,  412,  487,   91,  395, 1115,  395,  205,  356,
  834,  356,  873,  983,  820,  413, 1116,  205,  343, 1112,
  320,  708,  375,  202,  726,  666,  726,  376,  377,  522,
  511,  564,  343,  709, 1115,  369,  565,  200,  372,  344,
  728,  820,  728, 1041, 1116,  400,  401, 1183,  378,  379,
  380,  381,  382,  383,  384,  385,  386,  387,  388,  342,
  395,  838,  402,  403,  914,  936,  343,  916, 1115,  408,
  917,    2,  205,  839,  344,  936,  709,  205, 1090,  709,
  395,  522,  709,  522,  409,  395,   92,  985,  395,  395,
  395, 1251,  205,   94,  205,  220,  726,  410,   92,  205,
  395, 1115,  395,   94,  415,  220,  135,  395,  135,  205,
  567, 1116,  728,  135,  411,  568,  672,  820,  556, 1009,
  983,  672,  414,  875,  983, 1010,  983,  875, 1479,  983,
  983,  672,  983,  983, 1209, 1210,  522,  726,  820,  240,
  205,  241,  302,  468,  302,  672,  672,  672,  979,  302,
  395,  469,  395,  728, 1032, 1248,  522,  672,  464,  877,
 1033,  522,  672,  877,  522,  522,  522,  404,  405,  406,
  407,  683,  202,  240,  743,  795,  522,  795,  522,  743,
  743,  928,  929,  522,  743,  743,  473,  672, 1264, 1021,
 1265, 1021, 1266,  479,  985, 1292, 1083, 1084,  985,  202,
  985, 1174,  244,  985,  985, 1293,  985,  985,  672,  486,
  743,  397,  398,  399, 1362,  627,  629,  631,  633,  488,
  634,  635,  636,  637,  983,  144,  522,  144,  522,  202,
  489,  202, 1292, 1362,  202,  615,  617,  619,  503,  621,
  623,  625, 1293,  202,  202, 1315,  244,  155,  200,  155,
  202,  307,  162,  307,  162,  979,  278,  200,  200,  979,
  314,  979,  314,  505,  979,  979,  510,  979,  979, 1602,
 1603,  518,  202,  364,  364,  522,  364,  724,  828,  511,
 1374, 1392, 1374,  724,  835,  364,   84,  724,  733,  205,
 1293,  521, 1293, 1374,  526,  202,  545,  348,  985,  672,
  672,  535, 1460, 1293,  541,  251, 1463,  349,  350,  351,
  352,  547,  353,  553,  202,  566,  205, 1392,  908, 1311,
 1312, 1475,  577, 1374, 1302, 1303,  609,  609,  343,  808,
  809, 1374, 1551, 1293,  578,  354,  355,  356,  585,  638,
  579, 1293,  289,  669,  673,  672,  205,  678,  205,  695,
  717,  205, 1471,  342,  721,  729,  756,  758,  731,  979,
  205,  205,  548,  759,  757,  770,  783,  205,  785,  788,
  803,  823,  322,  357,  825,  851, 1587,  828,  837,  840,
  855,  465,  852,  202,  877,  878,  856,  202,  879,  205,
  883,  884,  885,  638,  892,  903,  915,  922,  924,  930,
  202,  932,  202,  938,  202,  939,  948,  743,  743,  942,
  943,  202,  205,  956,  200,  944,  960,  743, 1615,  946,
  957,  743, 1530,  961,  962,  200,  974,  983,  987,  995,
  996,  205, 1012, 1017,  511, 1016, 1027, 1028, 1030, 1034,
 1035, 1039, 1050,  752, 1063, 1065,  638, 1558, 1560, 1059,
  638,  372,  638,  638,  638,  638,  638,  638,  638,  638,
  638,  638,  638, 1080, 1068, 1576, 1081, 1086, 1085, 1099,
  764, 1132,  638, 1567,  638, 1149,  638, 1106, 1143, 1184,
 1151, 1152, 1180, 1219, 1223, 1225,  638,  638,  638, 1227,
 1228,  202,  202, 1576, 1576,  372, 1229, 1607, 1607, 1236,
  205,   34, 1237, 1211,  205,  200, 1574, 1218, 1243, 1235,
  672,  672, 1238, 1620, 1620,  672, 1576,  205, 1245,  205,
 1253,  205, 1255, 1256,  821,  672,  672,  672,  205, 1262,
 1268,  202,  672, 1272, 1261, 1275, 1286,  372, 1279,  672,
  672,  672, 1281,  202,  672,  200, 1282, 1283,  672, 1284,
  638,  672, 1288, 1322, 1291, 1298,  672,  200, 1307, 1321,
 1314,  672, 1317, 1324, 1333, 1335, 1338, 1340,  672, 1350,
 1348, 1347, 1353, 1354,  908,  908, 1355, 1368, 1370, 1407,
 1371,  672,  908, 1405, 1410,  908,  908,  908, 1413,  908,
  908, 1415,  908,  908,  908,  908,  672,  908,  908,  908,
 1456, 1436,  672, 1441, 1490,  908, 1464, 1451,  205,  205,
  908, 1457, 1467,  908,  908, 1476, 1459, 1461,  908,  908,
  908, 1468, 1480,  908,  908, 1481, 1493, 1495, 1500, 1503,
 1511,  908, 1508,  364, 1512,  908,  908, 1520, 1526,  908,
  908, 1514, 1516, 1518, 1517, 1527, 1535, 1539,  205, 1540,
 1542, 1547, 1552, 1564,  908, 1584,  908,  908,  908, 1568,
  205, 1548, 1589,  908,  908,  908,  908,  908,  908,  908,
  908,  908,  908,  908,  908,  908,  908,  908, 1549, 1591,
 1553, 1565,  908, 1569, 1588,  908,  908, 1596, 1583, 1582,
 1600, 1604, 1610, 1624,    9,  724, 1017,  906,  907,   49,
  908,  908,   45, 1009,  866,  918,  908,  908,  908,   38,
  908,   46,  197,   39,  714,  210,  201,  867,  798,  871,
  800,  198,  827,  908,  908,  908,  908,  908,  801,  834,
  335,  908,  339,  702,  353,  702,  242,  152,  128,  139,
  364,  908,  908,  158,  140,  672,  310,  672,  243,  165,
  461,   43, 1428,  159,  311,  166,   28, 1429, 1208, 1175,
  988,  937, 1187, 1290, 1088, 1581, 1089, 1590,  908, 1528,
 1554, 1570,  908,  908, 1546, 1301,  850,  908,  908,  908,
  821,  821,  958, 1450,  881,  908, 1622,  908,  821, 1414,
  959,  821,  821,  821, 1623,  821,  821, 1449,  821,  821,
  821,  821, 1566,  821,  821,  821, 1561, 1559, 1336, 1609,
 1258,  933,  203, 1448, 1062, 1323,  821,  801,  890,  821,
  821,  571,  572,  812,  821,  821,  821,  539,   32,  821,
  821,  715,  867, 1146,  863,  639,  645,  821,  641,  814,
  643,  821,  821,  647, 1342,  821,  821,  648,  920, 1406,
  416, 1029, 1071, 1073, 1104,  966,  968,  667,  668,  832,
  821,  740,  821,  821,  821, 1247, 1150,  769,  417,  821,
  821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
  821,  821,  821,  821,    0,    0,    0,    0,  821,  364,
    0,  821,  821,  935,    0,  364,    0,    0,    0,    0,
    0,    0,    0,  934,    0,    0,  821,  821,    0,    0,
    0,    0,  821,  821,  821,    0,  821,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  821,
  821,  821,  821,  821,    0,    0,    0,  821,    0,    0,
    0,  364,    0,  364,    0,    0,   43,  821,  821,  364,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  821,    0,    0,    0,  821,  821,
    0,    0,    0,  821,  821,  821,    0,    0,    0,    0,
    0,  821,    0,  821,    0,    0,  364,    0,    0,    0,
  364,    0,  364,  364,  364,  364,  364,  364,  364,  364,
  364,  364,  364,  364,    0,    0,  364,  364,    0,    0,
    0,  364,  364,  364,  364,  364,  364,  364,  364,  364,
  364,    0,  364,    0,    0,    0,  364,  364,  364,   52,
  364,  364,    0,  364,  364,  364,  364,  364,  364,  364,
  364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
  364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
  364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
    0,  364,  364,    0,   32,   32,  364,    0,  364,   32,
    0,    0,    0,  364,    0,    0,    0,    0,    0,    0,
  364,   32,   32,    0,    0,    0,   32,    0,    0,    0,
    0,    0,    0,   32,    0,    0,   32,   32,   32,    0,
    0,   32,    0,   32,    0,    0,    0,    0,    0,    0,
   32,   32,   32,    0,    0,   32,    0,   32,    0,   32,
    0,    0,   32,   32,    0,    0,    0,   32,   32,   32,
    0,    0,   32,    0,   32,    0,   32,   51,   32,   32,
   32,   32,   32,    0,    0,    0,    0,    0,    0,    0,
   32,    0,   32,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   32,   32,    0,    0,   32,   32,    0,
   32,    0,    0,   32,    0,    0,    0,    0,    0,    0,
    0,    0,   43,   43,    0,    0,    0,   43,    0,    0,
   32,    0,    0,    0,    0,    0,    0,   32,   32,   43,
   43,    0,    0,    0,   43,    0,    0,    0,    0,    0,
    0,   43,    0,  537,   43,   43,   43,    0,    0,   43,
    0,   43,    0,    0,    0,    0,    0,   74,   43,   43,
   43,    0,    0,   43,    0,   43,    0,   43,    0,    0,
   43,   43,    0,    0,    0,   43,   43,   43,    0,    0,
   43,    0,   43,    0,    0,    0,   43,   43,   43,   43,
   43,    0,    0,    0,   32,   32,    0,    0,   43,    0,
   43,    0,    0,    0,    0,   32,   52,    0,    0,    0,
   52,   43,   43,    0,    0,   43,   43,    0,   43,    0,
    0,   43,   52,    0,    0,    0,    0,   52,    0,    0,
    0,    0,    0,    0,   52,    0,    0,   52,   43,    0,
    0,    0,   52,    0,    0,   43,   43,    0,    0,    0,
    0,   52,   52,   52,    0,    0,    0,    0,   52,    0,
    0,    0,    0,   52,   52,    0,    0,    0,   52,   52,
   52,    0,   53,    0,    0,   52,    0,   52,    0,   52,
    0,   52,   52,   52,    0,    0,    0,    0,    0,    0,
    0,   52,    0,   52,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   52,   52,    0,    0,    0,   52,
    0,   52,   43,   43,   52,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   51,    0,    0,    0,   51,    0,
    0,   52,    0,    0,    0,    0,    0,    0,   52,   52,
   51,    0,    0,    0,    0,   51,    0,    0,    0,    0,
    0,    0,   51,    0,    0,   51,    0,    0,    0,    0,
   51,    0,   54,    0,    0,    0,    0,    0,    0,   51,
   51,   51,    0,    0,    0,    0,   51,    0,    0,    0,
    0,   51,   51,    0,    0,    0,   51,   51,   51,    0,
    0,    0,    0,   51,    0,    0,    0,   51,    0,   51,
   51,   51,    0,    0,    0,   52,   52,    0,    0,   51,
    0,   51,    0,    0,   74,    0,    0,    0,   74,    0,
   74,    0,   51,   51,    0,    0,    0,   51,    0,   51,
   74,   74,   51,    0,    0,   74,    0,    0,    0,    0,
    0,    0,   74,    0,    0,   74,   74,   74,    0,   51,
   74,    0,   74,    0,    0,    0,    0,   51,    0,   74,
   74,   74,    0,    0,   74,    0,    0,   74,   74,    0,
    0,   74,   74,    0,    0,    0,   74,   74,   74,    0,
    0,   74,   74,   74,    0,   74,    0,   74,   74,   74,
   74,   74,    0,    0,   74,    0,    0,    0,    0,   74,
    0,   74,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   74,    0,    0,    0,   74,   74,    0,   74,
    0,    0,   74,   51,   51,    0,    0,    0,    0,   53,
    0,    0,    0,   73,    0,    0,    0,    0,    0,   74,
 1418,    0,   74,   74, 1188,   73,    0,    0,    0,    0,
   73,    0,    0,    0, 1189, 1419, 1420,   73,    0,    0,
   73, 1421,    0,    0,    0,   73,    0,    0, 1190, 1191,
 1192,    0,    0, 1423,   73,   73,   73, 1424,    0,    0,
    0,    0,    0,    0,    0, 1193,   73,   73,    0,    0,
 1425,   73,   73,   73,    0,    0,    0, 1426,   73,    0,
    0,    0,   73,    0,   73,   73,   73,    0,    0,    0,
    0,    0,   74,   74,   73,    0,   73,    0,    0,   54,
    0,    0,    0,   73,  274, 1427,    0,   73,    0,    0,
    0, 1194,   73,    0,   73,   73,    0,   73,    0,    0,
   73,    0,    0,    0,    0,    0,    0,   73,    0,  303,
   73,    0,    0,    0,   73,   73,    0,    0,    0,    0,
    0,   53,    0,  323,   73,   73,   73,  326,  328,  330,
  332,  334,  336,  338,  340,    0,   73,   73,    0,    0,
    0,   73,   73,   73,    0,    0,    0,    0,   73,    0,
    0,    0,   73,    0,   73,   73,   73,    0,    0,    0,
    0,    0,    0,    0,   73,    0,   73,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   73,    0,    0,
    0,    0,   73,    0,   73,    0,    0,   73,   73,    0,
    0,    0,    0,    0,    0,    0,    0,  722,    0,    0,
    0,    0,    0,    0,   73,   46,    0,    0,   47,   48,
 1020,   54,   49,   50,    0,   51,   52,   53,   54,    0,
   55,   56,   57,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   58,    0,    0,   59,   60,    0,    0,
    0,   61,   62,   63,    0,    0,   64,   65,    0,    0,
    0,    0,    0,    0,   66,    0,    0,    0,   67,   68,
    0,    0,   69,   70,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   71,   73,   72,
   73,   74,    0,    0,    0,    0,   75,   76,   77,   78,
   79,   80,   81,   82,   83,   84,   85,   86,   87,   88,
   89,  323,    0,    0,    0,   90,    0,    0,   91,   92,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   93,   94,    0,    0,    0,    0,    0,
    0,   95,    0,   96,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   97,   98,   99,  100,
  101,    0,    0,    0,  102,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  103,  104,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  105,    0,    0,    0,  106,  107,    0,    0,    0,
 1021,  108,  109,    0,    0,    0,    0,    0,    0,    0,
  110,    0,    0,    0,    0,    0,    0,    0,  602,  604,
  606,    0,    0,  614,  614,  614,  614,  614,  614,  614,
  614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
  614,  614,  614,   45,    0,    0,    0,    0,    0,    0,
    0,   46,    0,    0,   47,   48,    0,    0,   49,   50,
    0,   51,   52,   53,   54,    0,   55,   56,   57,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   58,
    0,    0,   59,   60,    0,    0,    0,   61,   62,   63,
    0,    0,   64,   65,    0,    0,    0,    0,    0,    0,
   66,    0,    0,    0,   67,   68,    0,    0,   69,   70,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   71,    0,   72,   73,   74,    0,    0,
    0,    0,   75,   76,   77,   78,   79,   80,   81,   82,
   83,   84,   85,   86,   87,   88,   89,    0,    0,    0,
    0,   90,    0,    0,   91,   92,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   93,
   94,    0,    0,    0,    0,    0,    0,   95,    0,   96,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   97,   98,   99,  100,  101,    0,    0,    0,
  102, 1418,    0,    0,    0, 1188,    0,    0,    0,    0,
  103,  104,    0,    0,    0, 1189, 1419, 1420,    0,    0,
    0,    0, 1421,    0,    0,    0,    0,    0,    0, 1422,
 1191, 1192,    0,    0, 1423,    0,   20,  105, 1424,    0,
    0,  106,  107,    0,    0,    0, 1193,  108,  109, 1000,
    0, 1425,    0,    0,  209,    0,  110, 1000, 1426,    0,
 1000, 1000,    0,    0, 1000, 1000,    0, 1000, 1000, 1000,
 1000,    0, 1000, 1000, 1000,    0,    0,    0,    0,    0,
    0,    0,    0,   21,    0, 1000, 1427,    0, 1000, 1000,
    0,    0, 1194, 1000, 1000, 1000,    0,    0, 1000, 1000,
    0,    0,    0,    0,    0,    0, 1000,    0,    0,    0,
 1000, 1000,    0,    0, 1000, 1000,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1000,
    0, 1000, 1000, 1000,    0,    0,    0,    0, 1000, 1000,
 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
 1000, 1000, 1000,    0,    0,    0,    0, 1000,    0,    0,
 1000, 1000,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1000, 1000,    0,    0,    0,
    0, 1000,    0, 1000,    0, 1000,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1000, 1000,
 1000, 1000, 1000,    0,    0,    0, 1000,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1000, 1000,    0,    0,
    0,   45,    0,    0,    0,    0,    0,    0,    0,   46,
    0,    0,   47,   48,    0,    0,   49,   50,    0,   51,
   52,   53,   54, 1000,   55,   56,   57, 1000, 1000,    0,
    0,    0,    0, 1000, 1000,    0,    0,   58,    0,    0,
   59,   60, 1000,    0,    0,   61,   62,   63,    0,    0,
   64,   65,    0,    0,    0,    0,    0,    0,   66,    0,
    0,    0,   67,   68,    0,    0,   69,   70,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   71,    0,   72,   73,   74,    0,    0,    0,    0,
   75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
   85,   86,   87,   88,   89,    0,    0,    0,    0,   90,
    0,    0,   91,   92,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   93,   94,    0,
    0,    0,    0,    0,    0,   95,    0,   96,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   97,   98,   99,  100,  101,    0,    0,    0,  102,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  103,  104,
    0,    0,    0,  420,    0,    0,    0,    0,    0,    0,
    0,   46,    0,    0,   47,   48,    0,    0,   49,   50,
    0,   51,   52,   53,   54,  105,   55,   56,   57,  106,
  107,    0,    0,    0,    0,  108,  109,    0,    0,   58,
    0,    0,   59,   60,  110,    0,    0,   61,   62,   63,
    0,    0,   64,   65,    0,    0,    0,    0,    0,    0,
   66,    0,    0,    0,   67,   68,    0,    0,   69,   70,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   71,    0,   72,   73,   74,    0,    0,
    0,    0,   75,   76,   77,   78,   79,   80,   81,   82,
   83,   84,   85,   86,   87,   88,   89,    0,    0,    0,
    0,   90,    0,    0,   91,   92,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   93,
   94,    0,    0,    0,    0,    0,    0,   95,    0,   96,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   97,   98,   99,  100,  101,    0,    0,    0,
  102,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  103,  104,    0,    0,    0,  722,    0,    0,    0,    0,
    0,    0,    0,   46,    0,    0,   47,   48,    0,    0,
   49,   50,    0,   51,   52,   53,   54,  105,   55,   56,
   57,  106,  107,    0,    0,    0,    0,  108,  109,    0,
    0,   58,    0,    0,   59,   60,  110,    0,    0,   61,
   62,   63,    0,    0,   64,   65,    0,    0,    0,    0,
    0,    0,   66,    0,    0,    0,   67,   68,    0,    0,
   69,   70,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   71,    0,   72,   73,   74,
    0,    0,    0,    0,   75,   76,   77,   78,   79,   80,
   81,   82,   83,   84,   85,   86,   87,   88,   89,    0,
    0,    0,    0,   90,    0,    0,   91,   92,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   93,   94,    0,    0,    0,    0,    0,    0,   95,
    0,   96,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   97,   98,   99,  100,  101,    0,
    0,    0,  102,    0,    0,    0,  866,    0,    0,    0,
    0,    0,  103,  104,   46,    0,    0,    0,   48,    0,
    0,   49,  268,    0,    0,    0,   53,   54,    0,   55,
    0,   57,    0,    0,    0,    0,    0,    0,    0,  105,
    0,    0,   58,  106,  107,    0,   60,    0,    0,  108,
  109,    0,  269,    0,    0,    0,    0,    0,  110,    0,
    0,    0,    0,   66,    0,    0,    0,    0,   68,    0,
    0,   69,   70,    0,    0,  493,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  494,    0,    0,   72,   73,
   74,    0,    0,    0,    0,    0,   76,    0,   78,    0,
   80,   81,   82,  270,   84,    0,    0,   87,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   91,   92,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  271,  272,    0,    0,    0,    0,    0,    0,
   95,    0,   96,    0,    0,    0,    0,    0,  285,    0,
    0,    0,   48,    0,    0,   49,   98,   99,  100,  101,
   53,    0,    0,  102,    0,   57,    0,  733,    0,    0,
    0,    0,    0,  103,  104,   46,    0,    0,    0,   48,
   60,    0,   49,  268,    0,    0,    0,   53,   54,    0,
   55,    0,   57,    0,    0,    0,    0,   66,    0,    0,
  105,    0,   68,   58,  106,  273,    0,   60,    0,    0,
  108,  109,    0,  269,    0,    0,    0,    0,    0,  110,
    0,    0,   72,   73,   66,    0,    0,    0,    0,   68,
  286,    0,   69,   70,    0,   81,   82,    0,    0,    0,
    0,   87,    0,    0,    0,    0,    0,    0,    0,   72,
   73,   74,    0,    0,    0,    0,    0,   76,    0,   78,
    0,   80,   81,   82,  270,   84,    0,    0,   87,    0,
  734,    0,    0,    0,    0,    0,  287,    0,   91,   92,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  271,  272,  288,    0,    0,    0,    0,
    0,   95,    0,   96,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   98,   99,  100,
  101,    0,    0,    0,  102,    0,    0,    0,  293,    0,
    0,    0,    0,    0,  103,  104,   46,    0,    0,  289,
   48,    0,    0,   49,  268,    0,    0,    0,   53,   54,
    0,   55,    0,   57,    0,    0,    0,    0,    0,    0,
    0,  105,    0,    0,   58,  106,  273,    0,   60,    0,
    0,  108,  109,    0,  269,    0,    0,    0,    0,    0,
  110,    0,    0,    0,    0,   66,    0,    0,   48,    0,
   68,   49,    0,   69,   70,    0,   53,    0,    0,    0,
    0,   57,    0,    0,    0,    0,    0,    0,    0,    0,
   72,   73,   74,    0,    0,    0,   60,    0,   76,    0,
   78,    0,   80,   81,   82,  270,   84,    0,    0,   87,
    0,    0,    0,   66,    0,    0,    0,    0,   68,   91,
   92,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  271,  272,    0,    0,   72,   73,
    0,    0,   95,    0,   96,    0,    0,    0,    0,    0,
    0,   81,   82,    0,    0,    0,    0,   87,   98,   99,
  100,  101,    0,    0,    0,  102,    0,    0,    0,  298,
    0,    0,    0,    0,    0,  103,  104,   46,    0,    0,
    0,   48,    0,    0,   49,  268,    0,    0,    0,   53,
   54,    0,   55,    0,   57,    0,    0,    0,    0,    0,
    0,    0,  105,    0,    0,   58,  106,  273,    0,   60,
    0,    0,  108,  109,    0,  269,    0,  196,    0,    0,
    0,  110,    0,    0,    0,    0,   66,    0,    0,    0,
    0,   68,    0,    0,   69,   70,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   72,   73,   74,    0,  289,    0,    0,    0,   76,
    0,   78,    0,   80,   81,   82,  270,   84,    0,    0,
   87,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   91,   92,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  271,  272,    0,    0,    0,
    0,    0,    0,   95,    0,   96,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   98,
   99,  100,  101,    0,    0,    0,  102,    0,    0,    0,
  371,    0,    0,    0,    0,    0,  103,  104,   46,    0,
    0,    0,   48,    0,    0,   49,  268,    0,    0,    0,
   53,   54,    0,   55,    0,   57,    0,    0,    0,    0,
    0,    0,    0,  105,    0,    0,   58,  106,  273,    0,
   60,    0,    0,  108,  109,    0,  269,    0,    0,    0,
    0,    0,  110,    0,    0,    0,    0,   66,    0,    0,
    0,    0,   68,    0,    0,   69,   70,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   72,   73,   74,    0,    0,    0,    0,    0,
   76,    0,   78,    0,   80,   81,   82,  270,   84,    0,
    0,   87,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   91,   92,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  271,  272,    0,    0,
    0,    0,    0,    0,   95,    0,   96,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   98,   99,  100,  101,    0,    0,    0,  102,    0,    0,
    0,  569,    0,    0,    0,    0,    0,  103,  104,   46,
    0,    0,    0,   48,    0,    0,   49,  268,    0,    0,
    0,   53,   54,    0,   55,    0,   57,    0,    0,    0,
    0,    0,    0,    0,  105,    0,    0,   58,  106,  273,
    0,   60,    0,    0,  108,  109,    0,  269,    0,    0,
    0,    0,    0,  110,    0,    0,    0,    0,   66,    0,
    0,    0,    0,   68,    0,    0,   69,   70,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   72,   73,   74,    0,    0,    0,    0,
    0,   76,    0,   78,    0,   80,   81,   82,  270,   84,
    0,    0,   87,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   91,   92,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  271,  272,    0,
    0,    0,    0,    0,    0,   95,    0,   96,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   98,   99,  100,  101,    0,    0,    0,  102,    0,
    0,    0,  819,    0,    0,    0,    0,    0,  103,  104,
   46,    0,    0,    0,   48,    0,    0,   49,  268,    0,
    0,    0,   53,   54,    0,   55,    0,   57,    0,    0,
    0,    0,    0,    0,    0,  105,    0,    0,   58,  106,
  273,    0,   60,    0,    0,  108,  109,    0,  269,    0,
    0,    0,    0,    0,  110,    0,    0,    0,    0,   66,
    0,    0,    0,    0,   68,    0,    0,   69,   70,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   72,   73,   74,    0,    0,    0,
    0,    0,   76,    0,   78,    0,   80,   81,   82,  270,
   84,    0,    0,   87,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   91,   92,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  271,  272,
    0,    0,    0,    0,    0,    0,   95,    0,   96,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   98,   99,  100,  101,    0,    0,    0,  102,
    0,    0,    0,  918,    0,    0,    0,    0,    0,  103,
  104,   46,    0,    0,    0,   48,    0,    0,   49,  268,
    0,    0,    0,   53,   54,    0,   55,    0,   57,    0,
    0,    0,    0,    0,    0,    0,  105,    0,    0,   58,
  106,  273,    0,   60,    0,    0,  108,  109,    0,  269,
    0,    0,    0,    0,    0,  110,    0,    0,    0,    0,
   66,    0,    0,    0,    0,   68,    0,    0,   69,   70,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   72,   73,   74,    0,    0,
    0,    0,    0,   76,    0,   78,    0,   80,   81,   82,
  270,   84,    0,    0,   87,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   91,   92,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  271,
  272,    0,    0,    0,    0,    0,    0,   95,    0,   96,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   98,   99,  100,  101,    0,    0,    0,
  102,    0,    0,    0,  989,    0,    0,    0,    0,    0,
  103,  104,   46,    0,    0,    0,   48,    0,    0,   49,
  268,    0,    0,    0,   53,   54,    0,   55,    0,   57,
    0,    0,    0,    0,    0,    0,    0,  105,    0,    0,
   58,  106,  273,    0,   60,    0,    0,  108,  109,    0,
  269,    0,    0,    0,    0,    0,  110,    0,    0,    0,
    0,   66,    0,    0,    0,    0,   68,    0,    0,   69,
   70,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   72,   73,   74,    0,
    0,    0,    0,    0,   76,    0,   78,    0,   80,   81,
   82,  270,   84,    0,    0,   87,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   91,   92,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  271,  272,    0,    0,    0,    0,    0,    0,   95,    0,
   96,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   98,   99,  100,  101,    0,    0,
  633,  102,    0,    0,    0,  321,    0,    0,    0,    0,
    0,  103,  104,   46,    0,    0,    0,   48,    0,    0,
   49,  268,    0,    0,    0,   53,   54,    0,   55,    0,
   57,    0,    0,    0,    0,    0,    0,    0,  105,    0,
    0,   58,  106,  990,    0,   60,    0,    0,  108,  109,
    0,  269,    0,    0,  633,    0,    0,  110,    0,    0,
    0,    0,   66,    0,    0,    0,    0,   68,    0,    0,
   69,   70,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   72,   73,   74,
    0,    0,    0,    0,    0,   76,    0,   78,    0,   80,
   81,   82,  270,   84,    0,    0,   87,  633,    0,    0,
    0,  633,    0,  633,  633,  633,  633,  633,  633,  633,
  633,  633,  633,  633,    0,    0,    0,    0,    0,    0,
    0,  271,  272,  633,    0,  633,    0,  633,    0,   95,
    0,   96,    0,  322,    0,    0,    0,  633,  633,  633,
    0,    0,    0,    0,    0,   98,   99,  100,  101,    0,
    0,  634,  102,    0,    0,  633,  267,    0,    0,    0,
    0,    0,  103,  104,   46,    0,    0,    0,   48,  633,
    0,   49,  268,    0,    0,    0,   53,   54,    0,   55,
    0,   57,  633,    0,    0,    0,    0,    0,    0,  105,
    0,    0,   58,  106,  273,    0,   60,    0,    0,  108,
  109,  633,  269,    0,    0,  634,    0,    0,  110,    0,
    0,    0,    0,   66,    0,    0,    0,    0,   68,    0,
    0,   69,   70,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   72,   73,
   74,    0,    0,    0,    0,    0,   76,    0,   78,    0,
   80,   81,   82,  270,   84,    0,    0,   87,  634,    0,
    0,    0,  634,    0,  634,  634,  634,  634,  634,  634,
  634,  634,  634,  634,  634,    0,    0,    0,    0,    0,
    0,    0,  271,  272,  634,    0,  634,    0,  634,    0,
   95,    0,   96,    0,    0,    0,    0,    0,  634,  634,
  634,    0,    0,    0,    0,    0,   98,   99,  100,  101,
    0,    0,  636,  102,    0,    0,  634,  302,    0,    0,
    0,    0,    0,  103,  104,   46,    0,    0,    0,   48,
  634,    0,   49,  268,    0,    0,    0,   53,   54,    0,
   55,    0,   57,  634,    0,    0,    0,    0,    0,    0,
  105,    0,    0,   58,  106,  273,    0,   60,    0,    0,
  108,  109,  634,  269,    0,    0,  636,    0,    0,  110,
    0,    0,    0,    0,   66,    0,    0,    0,    0,   68,
    0,    0,   69,   70,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   72,
   73,   74,    0,    0,    0,    0,    0,   76,    0,   78,
    0,   80,   81,   82,  270,   84,    0,    0,   87,  636,
    0,    0,    0,  636,    0,  636,  636,  636,  636,  636,
  636,  636,  636,  636,  636,  636,    0,    0,    0,    0,
    0,    0,    0,  271,  272,  636,    0,  636,    0,  636,
    0,   95,    0,   96,    0,    0,    0,    0,    0,  636,
  636,  636,    0,    0,    0,    0,    0,   98,   99,  100,
  101,    0,    0,  995,  102,    0,    0,  636,  325,    0,
    0,    0,    0,    0,  103,  104,   46,    0,    0,    0,
   48,    0,    0,   49,  268,    0,    0,    0,   53,   54,
    0,   55,    0,   57,    0,    0,    0,    0,    0,    0,
    0,  105,    0,    0,   58,  106,  273,    0,   60,    0,
    0,  108,  109,  636,  269,    0,    0,  995,    0,    0,
  110,    0,    0,    0,    0,   66,    0,    0,    0,    0,
   68,    0,    0,   69,   70,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   72,   73,   74,    0,    0,    0,    0,    0,   76,    0,
   78,    0,   80,   81,   82,  270,   84,    0,    0,   87,
  995,    0,    0,    0,  995,    0,  995,  995,  995,  995,
  995,  995,  995,  995,  995,  995,    0,    0,    0,    0,
    0,    0,    0,    0,  271,  272,  995,    0,  995,    0,
  995,    0,   95,    0,   96,    0,    0,    0,    0,    0,
  995,  995,  995,    0,    0,    0,    0,    0,   98,   99,
  100,  101,    0,    0,    0,  102,    0,    0,    0,  327,
    0,    0,    0,    0,    0,  103,  104,   46,    0,    0,
    0,   48,    0,    0,   49,  268,    0,    0,    0,   53,
   54,    0,   55,    0,   57,    0,    0,    0,    0,    0,
    0,    0,  105,    0,    0,   58,  106,  273,    0,   60,
    0,    0,  108,  109,  995,  269,    0,    0,    0,    0,
    0,  110,    0,    0,    0,    0,   66,    0,    0,    0,
    0,   68,    0,    0,   69,   70,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   72,   73,   74,    0,    0,    0,    0,    0,   76,
    0,   78,    0,   80,   81,   82,  270,   84,    0,    0,
   87,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  271,  272,    0,    0,    0,
    0,    0,    0,   95,    0,   96,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   98,
   99,  100,  101,    0,    0,    0,  102,    0,    0,    0,
  329,    0,    0,    0,    0,    0,  103,  104,   46,    0,
    0,    0,   48,    0,    0,   49,  268,    0,    0,    0,
   53,   54,    0,   55,    0,   57,    0,    0,    0,    0,
    0,    0,    0,  105,    0,    0,   58,  106,  273,    0,
   60,    0,    0,  108,  109,    0,  269,    0,    0,    0,
    0,    0,  110,    0,    0,    0,    0,   66,    0,    0,
    0,    0,   68,    0,    0,   69,   70,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   72,   73,   74,    0,    0,    0,    0,    0,
   76,    0,   78,    0,   80,   81,   82,  270,   84,    0,
    0,   87,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  271,  272,    0,    0,
    0,    0,    0,    0,   95,    0,   96,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   98,   99,  100,  101,    0,    0,    0,  102,    0,    0,
    0,  331,    0,    0,    0,    0,    0,  103,  104,   46,
    0,    0,    0,   48,    0,    0,   49,  268,    0,    0,
    0,   53,   54,    0,   55,    0,   57,    0,    0,    0,
    0,    0,    0,    0,  105,    0,    0,   58,  106,  273,
    0,   60,    0,    0,  108,  109,    0,  269,    0,    0,
    0,    0,    0,  110,    0,    0,    0,    0,   66,    0,
    0,    0,    0,   68,    0,    0,   69,   70,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   72,   73,   74,    0,    0,    0,    0,
    0,   76,    0,   78,    0,   80,   81,   82,  270,   84,
    0,    0,   87,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  271,  272,    0,
    0,    0,    0,    0,    0,   95,    0,   96,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   98,   99,  100,  101,    0,    0,    0,  102,    0,
    0,    0,  333,    0,    0,    0,    0,    0,  103,  104,
   46,    0,    0,    0,   48,    0,    0,   49,  268,    0,
    0,    0,   53,   54,    0,   55,    0,   57,    0,    0,
    0,    0,    0,    0,    0,  105,    0,    0,   58,  106,
  273,    0,   60,    0,    0,  108,  109,    0,  269,    0,
    0,    0,    0,    0,  110,    0,    0,    0,    0,   66,
    0,    0,    0,    0,   68,    0,    0,   69,   70,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   72,   73,   74,    0,    0,    0,
    0,    0,   76,    0,   78,    0,   80,   81,   82,  270,
   84,    0,    0,   87,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  271,  272,
    0,    0,    0,    0,    0,    0,   95,    0,   96,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   98,   99,  100,  101,    0,    0,    0,  102,
    0,    0,    0,  335,    0,    0,    0,    0,    0,  103,
  104,   46,    0,    0,    0,   48,    0,    0,   49,  268,
    0,    0,    0,   53,   54,    0,   55,    0,   57,    0,
    0,    0,    0,    0,    0,    0,  105,    0,    0,   58,
  106,  273,    0,   60,    0,    0,  108,  109,    0,  269,
    0,    0,    0,    0,    0,  110,    0,    0,    0,    0,
   66,    0,    0,    0,    0,   68,    0,    0,   69,   70,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   72,   73,   74,    0,    0,
    0,    0,    0,   76,    0,   78,    0,   80,   81,   82,
  270,   84,    0,    0,   87,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  271,
  272,    0,    0,    0,    0,    0,    0,   95,    0,   96,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   98,   99,  100,  101,    0,    0,    0,
  102,    0,    0,    0,  337,    0,    0,    0,    0,    0,
  103,  104,   46,    0,    0,    0,   48,    0,    0,   49,
  268,    0,    0,    0,   53,   54,    0,   55,    0,   57,
    0,    0,    0,    0,    0,    0,    0,  105,    0,    0,
   58,  106,  273,    0,   60,    0,    0,  108,  109,    0,
  269,    0,    0,    0,    0,    0,  110,    0,    0,    0,
    0,   66,    0,    0,    0,    0,   68,    0,    0,   69,
   70,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   72,   73,   74,    0,
    0,    0,    0,    0,   76,    0,   78,    0,   80,   81,
   82,  270,   84,    0,    0,   87,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  271,  272,    0,    0,    0,    0,    0,    0,   95,    0,
   96,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   98,   99,  100,  101,    0,    0,
    0,  102,    0,    0,    0,  339,    0,    0,    0,    0,
    0,  103,  104,   46,    0,    0,    0,   48,    0,    0,
   49,  268,    0,    0,    0,   53,   54,    0,   55,    0,
   57,    0,    0,    0,    0,    0,    0,    0,  105,    0,
    0,   58,  106,  273,    0,   60,    0,    0,  108,  109,
    0,  269,    0,    0,    0,    0,    0,  110,    0,    0,
    0,    0,   66,    0,    0,    0,    0,   68,    0,    0,
   69,   70,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   72,   73,   74,
    0,    0,    0,    0,    0,   76,    0,   78,    0,   80,
   81,   82,  270,   84,    0,    0,   87,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  271,  272,    0,    0,    0,    0,    0,    0,   95,
    0,   96,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   98,   99,  100,  101,    0,
    0,    0,  102,    0,    0,    0,  601,    0,    0,    0,
    0,    0,  103,  104,   46,    0,    0,    0,   48,    0,
    0,   49,  268,    0,    0,    0,   53,   54,    0,   55,
    0,   57,    0,    0,    0,    0,    0,    0,    0,  105,
    0,    0,   58,  106,  273,    0,   60,    0,    0,  108,
  109,    0,  269,    0,    0,    0,    0,    0,  110,    0,
    0,    0,    0,   66,    0,    0,    0,    0,   68,    0,
    0,   69,   70,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   72,   73,
   74,    0,    0,    0,    0,    0,   76,    0,   78,    0,
   80,   81,   82,  270,   84,    0,    0,   87,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  271,  272,    0,    0,    0,    0,    0,    0,
   95,    0,   96,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   98,   99,  100,  101,
    0,    0,    0,  102,    0,    0,    0,  603,    0,    0,
    0,    0,    0,  103,  104,   46,    0,    0,    0,   48,
    0,    0,   49,  268,    0,    0,    0,   53,   54,    0,
   55,    0,   57,    0,    0,    0,    0,    0,    0,    0,
  105,    0,    0,   58,  106,  273,    0,   60,    0,    0,
  108,  109,    0,  269,    0,    0,    0,    0,    0,  110,
    0,    0,    0,    0,   66,    0,    0,    0,    0,   68,
    0,    0,   69,   70,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   72,
   73,   74,    0,    0,    0,    0,    0,   76,    0,   78,
    0,   80,   81,   82,  270,   84,    0,    0,   87,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  271,  272,    0,    0,    0,    0,    0,
    0,   95,    0,   96,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   98,   99,  100,
  101,    0,    0,    0,  102,    0,    0,    0,  605,    0,
    0,    0,    0,    0,  103,  104,   46,    0,    0,    0,
   48,    0,    0,   49,  268,    0,    0,    0,   53,   54,
    0,   55,    0,   57,    0,    0,    0,    0,    0,    0,
    0,  105,    0,    0,   58,  106,  273,    0,   60,    0,
    0,  108,  109,    0,  269,    0,    0,    0,    0,    0,
  110,    0,    0,    0,    0,   66,    0,    0,    0,    0,
   68,    0,    0,   69,   70,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   72,   73,   74,    0,    0,    0,    0,    0,   76,    0,
   78,    0,   80,   81,   82,  270,   84,    0,    0,   87,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  271,  272,    0,    0,    0,    0,
    0,    0,   95,    0,   96,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   98,   99,
  100,  101,    0,    0,    0,  102,    0,    0,    0,  613,
    0,    0,    0,    0,    0,  103,  104,   46,    0,    0,
    0,   48,    0,    0,   49,  268,    0,    0,    0,   53,
   54,    0,   55,    0,   57,    0,    0,    0,    0,    0,
    0,    0,  105,    0,    0,   58,  106,  273,    0,   60,
    0,    0,  108,  109,    0,  269,    0,    0,    0,    0,
    0,  110,    0,    0,    0,    0,   66,    0,    0,    0,
    0,   68,    0,    0,   69,   70,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   72,   73,   74,    0,    0,    0,    0,    0,   76,
    0,   78,    0,   80,   81,   82,  270,   84,    0,    0,
   87,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  271,  272,    0,    0,    0,
    0,    0,    0,   95,    0,   96,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   98,
   99,  100,  101,    0,    0,    0,  102,    0,    0,    0,
  616,    0,    0,    0,    0,    0,  103,  104,   46,    0,
    0,    0,   48,    0,    0,   49,  268,    0,    0,    0,
   53,   54,    0,   55,    0,   57,    0,    0,    0,    0,
    0,    0,    0,  105,    0,    0,   58,  106,  273,    0,
   60,    0,    0,  108,  109,    0,  269,    0,    0,    0,
    0,    0,  110,    0,    0,    0,    0,   66,    0,    0,
    0,    0,   68,    0,    0,   69,   70,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   72,   73,   74,    0,    0,    0,    0,    0,
   76,    0,   78,    0,   80,   81,   82,  270,   84,    0,
    0,   87,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  271,  272,    0,    0,
    0,    0,    0,    0,   95,    0,   96,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   98,   99,  100,  101,    0,    0,    0,  102,    0,    0,
    0,  618,    0,    0,    0,    0,    0,  103,  104,   46,
    0,    0,    0,   48,    0,    0,   49,  268,    0,    0,
    0,   53,   54,    0,   55,    0,   57,    0,    0,    0,
    0,    0,    0,    0,  105,    0,    0,   58,  106,  273,
    0,   60,    0,    0,  108,  109,    0,  269,    0,    0,
    0,    0,    0,  110,    0,    0,    0,    0,   66,    0,
    0,    0,    0,   68,    0,    0,   69,   70,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   72,   73,   74,    0,    0,    0,    0,
    0,   76,    0,   78,    0,   80,   81,   82,  270,   84,
    0,    0,   87,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  271,  272,    0,
    0,    0,    0,    0,    0,   95,    0,   96,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   98,   99,  100,  101,    0,    0,    0,  102,    0,
    0,    0,  620,    0,    0,    0,    0,    0,  103,  104,
   46,    0,    0,    0,   48,    0,    0,   49,  268,    0,
    0,    0,   53,   54,    0,   55,    0,   57,    0,    0,
    0,    0,    0,    0,    0,  105,    0,    0,   58,  106,
  273,    0,   60,    0,    0,  108,  109,    0,  269,    0,
    0,    0,    0,    0,  110,    0,    0,    0,    0,   66,
    0,    0,    0,    0,   68,    0,    0,   69,   70,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   72,   73,   74,    0,    0,    0,
    0,    0,   76,    0,   78,    0,   80,   81,   82,  270,
   84,    0,    0,   87,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  271,  272,
    0,    0,    0,    0,    0,    0,   95,    0,   96,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   98,   99,  100,  101,    0,    0,    0,  102,
    0,    0,    0,  622,    0,    0,    0,    0,    0,  103,
  104,   46,    0,    0,    0,   48,    0,    0,   49,  268,
    0,    0,    0,   53,   54,    0,   55,    0,   57,    0,
    0,    0,    0,    0,    0,    0,  105,    0,    0,   58,
  106,  273,    0,   60,    0,    0,  108,  109,    0,  269,
    0,    0,    0,    0,    0,  110,    0,    0,    0,    0,
   66,    0,    0,    0,    0,   68,    0,    0,   69,   70,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   72,   73,   74,    0,    0,
    0,    0,    0,   76,    0,   78,    0,   80,   81,   82,
  270,   84,    0,    0,   87,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  271,
  272,    0,    0,    0,    0,    0,    0,   95,    0,   96,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   98,   99,  100,  101,    0,    0,    0,
  102,    0,    0,    0,  624,    0,    0,    0,    0,    0,
  103,  104,   46,    0,    0,    0,   48,    0,    0,   49,
  268,    0,    0,    0,   53,   54,    0,   55,    0,   57,
    0,    0,    0,    0,    0,    0,    0,  105,    0,    0,
   58,  106,  273,    0,   60,    0,    0,  108,  109,    0,
  269,    0,    0,    0,    0,    0,  110,    0,    0,    0,
    0,   66,    0,    0,    0,    0,   68,    0,    0,   69,
   70,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   72,   73,   74,    0,
    0,    0,    0,    0,   76,    0,   78,    0,   80,   81,
   82,  270,   84,    0,    0,   87,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  271,  272,    0,    0,    0,    0,    0,    0,   95,    0,
   96,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   98,   99,  100,  101,    0,    0,
    0,  102,    0,    0,    0,  626,    0,    0,    0,    0,
    0,  103,  104,   46,    0,    0,    0,   48,    0,    0,
   49,  268,    0,    0,    0,   53,   54,    0,   55,    0,
   57,    0,    0,    0,    0,    0,    0,    0,  105,    0,
    0,   58,  106,  273,    0,   60,    0,    0,  108,  109,
    0,  269,    0,    0,    0,    0,    0,  110,    0,    0,
    0,    0,   66,    0,    0,    0,    0,   68,    0,    0,
   69,   70,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   72,   73,   74,
    0,    0,    0,    0,    0,   76,    0,   78,    0,   80,
   81,   82,  270,   84,    0,    0,   87,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  271,  272,    0,    0,    0,    0,    0,    0,   95,
    0,   96,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   98,   99,  100,  101,    0,
    0,    0,  102,    0,    0,    0,  628,    0,    0,    0,
    0,    0,  103,  104,   46,    0,    0,    0,   48,    0,
    0,   49,  268,    0,    0,    0,   53,   54,    0,   55,
    0,   57,    0,    0,    0,    0,    0,    0,    0,  105,
    0,    0,   58,  106,  273,    0,   60,    0,    0,  108,
  109,    0,  269,    0,    0,    0,    0,    0,  110,    0,
    0,    0,    0,   66,    0,    0,    0,    0,   68,    0,
    0,   69,   70,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   72,   73,
   74,    0,    0,    0,    0,    0,   76,    0,   78,    0,
   80,   81,   82,  270,   84,    0,    0,   87,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  271,  272,    0,    0,    0,    0,    0,    0,
   95,    0,   96,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   98,   99,  100,  101,
    0,    0,    0,  102,    0,    0,    0,  630,    0,    0,
    0,    0,    0,  103,  104,   46,    0,    0,    0,   48,
    0,    0,   49,  268,    0,    0,    0,   53,   54,    0,
   55,    0,   57,    0,    0,    0,    0,    0,    0,    0,
  105,    0,    0,   58,  106,  273,    0,   60,    0,    0,
  108,  109,    0,  269,    0,    0,    0,    0,    0,  110,
    0,    0,    0,    0,   66,    0,    0,    0,    0,   68,
    0,    0,   69,   70,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   72,
   73,   74,    0,    0,    0,    0,    0,   76,    0,   78,
    0,   80,   81,   82,  270,   84,    0,    0,   87,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  271,  272,    0,    0,    0,    0,    0,
    0,   95,    0,   96,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   98,   99,  100,
  101,    0,    0,    0,  102,    0,    0,    0,  632,    0,
    0,    0,    0,    0,  103,  104,   46,    0,    0,    0,
   48,    0,    0,   49,  268,    0,    0,    0,   53,   54,
    0,   55,    0,   57,    0,    0,    0,    0,    0,    0,
    0,  105,    0,    0,   58,  106,  273,    0,   60,    0,
    0,  108,  109,    0,  269,    0,    0,    0,    0,    0,
  110,    0,    0,    0,    0,   66,    0,    0,    0,    0,
   68,    0,    0,   69,   70,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   72,   73,   74,    0,    0,    0,    0,    0,   76,    0,
   78,    0,   80,   81,   82,  270,   84,    0,    0,   87,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  271,  272,    0,    0,    0,    0,
    0,    0,   95,    0,   96,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   98,   99,
  100,  101,    0,    0,    0,  102,    0,    0,    0,  638,
    0,    0,    0,    0,    0,  103,  104,   46,    0,    0,
    0,   48,    0,    0,   49,  268,    0,    0,    0,   53,
   54,    0,   55,    0,   57,    0,    0,    0,    0,    0,
    0,    0,  105,    0,    0,   58,  106,  273,    0,   60,
    0,    0,  108,  109,    0,  269,    0,    0,    0,    0,
    0,  110,    0,    0,    0,    0,   66,    0,    0,    0,
    0,   68,    0,    0,   69,   70,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   72,   73,   74,    0,    0,    0,    0,    0,   76,
    0,   78,    0,   80,   81,   82,  270,   84,    0,    0,
   87,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  271,  272,    0,    0,    0,
    0,    0,    0,   95,    0,   96,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   98,
   99,  100,  101,    0,    0,    0,  102,    0,    0,    0,
  640,    0,    0,    0,    0,    0,  103,  104,   46,    0,
    0,    0,   48,    0,    0,   49,  268,    0,    0,    0,
   53,   54,    0,   55,    0,   57,    0,    0,    0,    0,
    0,    0,    0,  105,    0,    0,   58,  106,  273,    0,
   60,    0,    0,  108,  109,    0,  269,    0,    0,    0,
    0,    0,  110,    0,    0,    0,    0,   66,    0,    0,
    0,    0,   68,    0,    0,   69,   70,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   72,   73,   74,    0,    0,    0,    0,    0,
   76,    0,   78,    0,   80,   81,   82,  270,   84,    0,
    0,   87,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  271,  272,    0,    0,
    0,    0,    0,    0,   95,    0,   96,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   98,   99,  100,  101,    0,    0,    0,  102,    0,    0,
    0,  642,    0,    0,    0,    0,    0,  103,  104,   46,
    0,    0,    0,   48,    0,    0,   49,  268,    0,    0,
    0,   53,   54,    0,   55,    0,   57,    0,    0,    0,
    0,    0,    0,    0,  105,    0,    0,   58,  106,  273,
    0,   60,    0,    0,  108,  109,    0,  269,    0,    0,
    0,    0,    0,  110,    0,    0,    0,    0,   66,    0,
    0,    0,    0,   68,    0,    0,   69,   70,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   72,   73,   74,    0,    0,    0,    0,
    0,   76,    0,   78,    0,   80,   81,   82,  270,   84,
    0,    0,   87,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  271,  272,    0,
    0,    0,    0,    0,    0,   95,    0,   96,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   98,   99,  100,  101,    0,    0,    0,  102,    0,
    0,    0,  644,    0,    0,    0,    0,    0,  103,  104,
   46,    0,    0,    0,   48,    0,    0,   49,  268,    0,
    0,    0,   53,   54,    0,   55,    0,   57,    0,    0,
    0,    0,    0,    0,    0,  105,    0,    0,   58,  106,
  273,    0,   60,    0,    0,  108,  109,    0,  269,    0,
    0,    0,    0,    0,  110,    0,    0,    0,    0,   66,
    0,    0,    0,    0,   68,    0,    0,   69,   70,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   72,   73,   74,    0,    0,    0,
    0,    0,   76,    0,   78,    0,   80,   81,   82,  270,
   84,    0,    0,   87,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  271,  272,
    0,    0,    0,    0,    0,    0,   95,    0,   96,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   98,   99,  100,  101,    0,    0,    0,  102,
    0,    0,    0,  646,    0,    0,    0,    0,    0,  103,
  104,   46,    0,    0,    0,   48,    0,    0,   49,  268,
    0,    0,    0,   53,   54,    0,   55,    0,   57,    0,
    0,    0,    0,    0,    0,    0,  105,    0,    0,   58,
  106,  273,    0,   60,    0,    0,  108,  109,    0,  269,
    0,    0,    0,    0,    0,  110,    0,    0,    0,    0,
   66,    0,    0,    0,    0,   68,    0,    0,   69,   70,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   72,   73,   74,    0,    0,
    0,    0,    0,   76,    0,   78,    0,   80,   81,   82,
  270,   84,    0,    0,   87,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  271,
  272,    0,    0,    0,    0,    0,    0,   95,    0,   96,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   98,   99,  100,  101,    0,    0,    0,
  102,    0,    0,    0,  607,    0,    0,    0,    0,    0,
  103,  104,   46,    0,    0,    0,   48,    0,    0,   49,
  268,    0,    0,    0,   53,   54,    0,    0,    0,   57,
    0,    0,    0,    0,    0,    0,    0,  105,    0,    0,
   58,  106,  273,    0,   60,    0,    0,  108,  109,    0,
  269,    0,  194,    0,    0,    0,  110,    0,    0,    0,
    0,   66,    0,    0,   48,    0,   68,   49,    0,   69,
   70,    0,   53,    0,    0,    0,    0,   57,    0,    0,
    0,    0,    0,    0,    0,    0,   72,   73,   74,    0,
    0,    0,   60,    0,   76,    0,   78,    0,    0,   81,
   82,  270,   84,  611,    0,   87,    0,    0,    0,   66,
    0,   46,    0,    0,   68,   48,    0,    0,   49,  268,
    0,    0,    0,   53,   54,    0,    0,    0,   57,    0,
  271,  608,    0,    0,   72,   73,    0,    0,   95,   58,
   96,    0,    0,   60,    0,    0,    0,   81,   82,  269,
    0,    0,    0,   87,  214,    0,    0,  195,    0,    0,
   66,    0,    0,    0,    0,   68,    0,    0,   69,   70,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   72,   73,   74,    0,    0,
    0,    0,    0,   76,    0,   78,    0,    0,   81,   82,
  270,   84,  106,  273,   87,    0,  364,    0,  108,  109,
  215,    0,  364,  196,    0,    0,    0,  110,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  271,
  608,    0,    0,    0,    0,    0,    0,   95,    0,   96,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  197,    0,    0,    0,    0,    0,    0,    0,    0,
  364,    0,    0,    0,    0,    0,  364,    0,  216,  217,
  218,  219,    0,  220,  221,  222,  223,    0,    0,  224,
  225,  226,  227,    0,    0,  228,  229,  230,  231,  232,
  233,  234,  235,    0,  236,    0,    0,    0,    0,    0,
    0,  106,  273,    0,    0,    0,    0,  108,  109,    0,
    0,  237,    0,  364,    0,    0,  110,  364,    0,  364,
  364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
  364,    0,    0,  364,  364,    0,    0,    0,    0,  364,
  364,  364,  364,  364,  364,  364,  364,  364,    0,  364,
    0,    0,    0,  364,  364,  364,    0,  364,  364,    0,
  364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
  364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
  364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
  364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
    0,   73,    0,  364,    0,  364,    0,    0,    0,    0,
  364,    0,    0,   73,    0,    0,    0,  364,   73,    0,
    0,    0,    0,    0,    0,   73,    0,    0,   73,    0,
    0,    0,    0,   73,    0,    0,    0,    0,    0,    0,
    0,    0,   73,   73,   73,    0,    0,    0,    0,    0,
    0,  364,    0,    0,   73,   73,    0,  364,    0,   73,
   73,   73,    0,    0,    0,    0,   73,    0,    0,    0,
   73,    0,   73,   73,   73,    0,    0,    0,    0,    0,
    0,    0,   73,    0,   73,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   73,    0,    0,    0,    0,
   73,    0,   73,    0,  364,   73,    0,    0,  364,    0,
  364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
  364,    0,   73,    0,    0,  364,    0,    0,    0,   53,
  364,    0,  364,  364,  364,  364,  364,  364,  364,    0,
  364,    0,    0,    0,  364,  364,  364,    0,  364,  364,
    0,  364,  364,  364,  364,  364,  364,  364,  364,  364,
  364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
  364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
  364,  364,  364,  364,  364,  364,  364,  364,  514,  364,
  364,    0,   74,    0,  514,    0,   73,    0,    0,    0,
    0,  364,    0,    0,   74,    0,    0,    0,  364,   74,
    0,    0,    0,    0,    0,    0,   74,    0,    0,   74,
    0,    0,    0,    0,   74,    0,    0,    0,    0,    0,
    0,    0,    0,   74,   74,   74,    0,    0,    0,    0,
    0,    0,  514,    0,    0,   74,   74,    0,  514,    0,
   74,   74,   74,    0,    0,    0,    0,   74,    0,    0,
    0,   74,    0,   74,   74,   74,    0,    0,    0,    0,
    0,    0,    0,   74,    0,   74,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   74,    0,    0,    0,
    0,   74,    0,   74,    0,  514,   74,    0,    0,  514,
    0,  514,  514,  514,  514,  514,  514,  514,  514,  514,
  514,  514,    0,   74,    0,    0,  514,    0,    0,    0,
    0,  514,    0,  514,  514,  514,    0,  514,  514,  514,
    0,  514,    0,    0,    0,  514,  514,  514,    0,  514,
  514,    0,  514,  514,  514,  514,  514,  514,  514,  514,
  514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
  514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
  514,  514,  514,  514,  514,  514,  514,  514,  514,  558,
  514,  514,   43,    0,    0,  558,    0,   74,    0,    0,
    0,    0,  514,    0,    0,    0,    0,    0,    0,  514,
    0,    0,    0,    0,    0,    0,   43,    0,    0,    0,
    0,    0,    0,    0,   43,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  558,    0,    0,   43,    0,    0,  558,
    0,   43,   43,    0,    0,    0,  416,   43,    0,    0,
    0,   43,  416,   43,   43,   43,    0,    0,   43,    0,
    0,    0,    0,   43,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   43,    0,    0,    0,
    0,   43,    0,   43,    0,    0,  558,    0,    0,    0,
  558,    0,  558,  558,  558,  558,  558,  558,  558,  558,
  558,  558,  558,   43,    0,    0,  416,    0,    0,    0,
   43,   43,  558,    0,  558,    0,  558,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  558,  558,  558,    0,
  558,  558,    0,  558,  558,  558,  558,  558,  558,  558,
  558,  558,  558,  558,  558,    0,    0,    0,  558,  558,
  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
    0,  558,  558,  356,  416,    0,    0,   43,    0,    0,
  356,    0,  416,  416,  416,  416,  416,  416,  593,  416,
  558,    0,    0,  416,  593,    0,    0,  416,  416,    0,
  416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
  416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
  416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
  416,  416,  416,  416,  416,  416,  416,    0,  416,  416,
    0,    0,  593,    0,    0,  356,    0,    0,  593,    0,
  416,    0,    0,    0,    0,    0,    0,  416,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  594,    0,    0,
    0,    0,    0,  594,    0,  593,    0,    0,    0,  593,
    0,  593,  593,  593,  593,  593,  593,  593,  593,  593,
  593,  593,    0,    0,    0,    0,  416,    0,    0,    0,
    0,  593,    0,  593,  416,  593,  416,  416,  416,  416,
    0,  416,    0,    0,    0,  593,  593,  593,    0,  593,
  593,  594,    0,  593,  593,  593,  593,  594,    0,    0,
    0,    0,  593,  593,  416,  416,  416,  593,  593,  593,
  593,  593,  593,  593,  593,  593,  593,  593,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  593,  593,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  416,    0,  594,    0,    0,    0,  594,  593,
  594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
  594,    0,    0,  582,    0,  416,    0,    0,    0,  582,
  594,    0,  594,  416,  594,  416,  416,  416,  416,    0,
  416,    0,    0,    0,  594,  594,  594,    0,  594,  594,
    0,    0,  594,  594,  594,  594,    0,    0,    0,    0,
    0,  594,  594,  416,  416,  416,  594,  594,  594,  594,
  594,  594,  594,  594,  594,  594,  594,  582,    0,    0,
    0,    0,    0,  582,    0,    0,    0,    0,    0,  594,
  594,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  416,    0,    0,    0,    0,    0,  589,  594,    0,
    0,    0,    0,  589,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  582,    0,    0,    0,  582,    0,  582,  582,  582,  582,
  582,  582,  582,  582,  582,  582,  582,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  582,    0,  582,    0,
  582,  589,    0,    0,    0,    0,    0,  589,    0,    0,
  582,  582,  582,    0,  582,  582,    0,    0,  582,  582,
  582,  582,    0,    0,  582,  582,  582,  582,  582,    0,
    0,    0,  582,  582,  582,  582,  582,  582,  582,  582,
  582,  582,  582,    0,    0,    0,  590,    0,    0,    0,
    0,    0,  590,    0,  589,  582,  582,    0,  589,    0,
  589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
  589,    0,    0,    0,  582,    0,    0,    0,    0,    0,
  589,    0,  589,    0,  589,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  589,  589,  589,    0,  589,  589,
  590,    0,  589,  589,  589,  589,  590,    0,    0,    0,
    0,  589,  589,    0,    0,    0,  589,  589,  589,  589,
  589,  589,  589,  589,  589,  589,  589,    0,    0,    0,
  591,    0,    0,    0,    0,    0,  591,    0,    0,  589,
  589,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  590,    0,    0,    0,  590,  589,  590,
  590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  590,
    0,  590,    0,  590,  591,    0,    0,    0,    0,    0,
  591,    0,    0,  590,  590,  590,    0,  590,  590,    0,
    0,  590,  590,  590,  590,    0,    0,    0,    0,    0,
  590,  590,    0,    0,    0,  590,  590,  590,  590,  590,
  590,  590,  590,  590,  590,  590,    0,    0,    0,  592,
    0,    0,    0,    0,    0,  592,    0,  591,  590,  590,
    0,  591,    0,  591,  591,  591,  591,  591,  591,  591,
  591,  591,  591,  591,    0,    0,    0,  590,    0,    0,
    0,    0,    0,  591,    0,  591,    0,  591,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  591,  591,  591,
    0,  591,  591,  592,    0,  591,  591,  591,  591,  592,
    0,    0,    0,    0,  591,  591,    0,    0,    0,  591,
  591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
    0,    0,    0,  600,    0,    0,    0,    0,    0,    0,
    0,    0,  591,  591,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  592,    0,    0,    0,
  592,  591,  592,  592,  592,  592,  592,  592,  592,  592,
  592,  592,  592,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  592,    0,  592,    0,  592,  600,    0,    0,
    0,    0,    0,    0,    0,    0,  592,  592,  592,    0,
  592,  592,    0,    0,  592,  592,  592,  592,    0,    0,
    0,    0,    0,  592,  592,  601,    0,    0,  592,  592,
  592,  592,  592,  592,  592,  592,  592,  592,  592,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  600,  592,  592,    0,  600,    0,  600,  600,  600,  600,
  600,  600,  600,  600,  600,  600,  600,    0,    0,    0,
  592,    0,    0,    0,    0,    0,  600,    0,  600,  601,
  600,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  600,  600,  600,    0,    0,    0,    0,    0,  600,  600,
  600,  600,    0,    0,    0,  602,    0,  600,  600,    0,
    0,    0,  600,  600,  600,  600,  600,  600,  600,  600,
  600,  600,  600,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  601,    0,    0,  600,  601,    0,  601,  601,
  601,  601,  601,  601,  601,  601,  601,  601,  601,    0,
    0,    0,    0,    0,  600,    0,    0,    0,  601,  602,
  601,    0,  601,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  601,  601,  601,    0,    0,    0,    0,    0,
  601,  601,  601,  601,    0,  603,    0,    0,    0,  601,
  601,    0,    0,    0,  601,  601,  601,  601,  601,  601,
  601,  601,  601,  601,  601,    0,    0,    0,    0,    0,
    0,    0,  602,    0,    0,    0,  602,  601,  602,  602,
  602,  602,  602,  602,  602,  602,  602,  602,  602,    0,
    0,    0,    0,    0,    0,    0,  601,    0,  602,  603,
  602,    0,  602,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  602,  602,  602,    0,    0,    0,    0,    0,
  602,  602,  602,  602,    0,  607,    0,    0,    0,  602,
  602,    0,    0,    0,  602,  602,  602,  602,  602,  602,
  602,  602,  602,  602,  602,    0,    0,    0,    0,    0,
    0,    0,  603,    0,    0,    0,  603,  602,  603,  603,
  603,  603,  603,  603,  603,  603,  603,  603,  603,    0,
    0,    0,    0,    0,    0,    0,  602,    0,  603,  607,
  603,    0,  603,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  603,  603,  603,    0,    0,    0,    0,    0,
  603,  603,  603,  603,    0,  608,    0,    0,    0,  603,
  603,    0,    0,    0,  603,  603,  603,  603,  603,  603,
  603,  603,  603,  603,  603,    0,    0,    0,    0,    0,
    0,    0,  607,    0,    0,    0,  607,  603,  607,  607,
  607,  607,  607,  607,  607,  607,  607,  607,  607,    0,
    0,    0,    0,    0,    0,    0,  603,    0,  607,  608,
  607,    0,  607,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  607,  607,  607,    0,    0,    0,    0,    0,
  607,  607,  607,  607,    0,  609,    0,    0,    0,  607,
  607,    0,    0,    0,    0,    0,    0,  607,  607,  607,
  607,  607,  607,  607,  607,    0,    0,    0,    0,    0,
    0,    0,  608,    0,    0,    0,  608,  607,  608,  608,
  608,  608,  608,  608,  608,  608,  608,  608,  608,    0,
    0,    0,    0,    0,    0,    0,  607,    0,  608,  609,
  608,    0,  608,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  608,  608,  608,    0,    0,    0,    0,    0,
  608,  608,  608,  608,    0,  610,    0,    0,    0,  608,
  608,    0,    0,    0,    0,    0,    0,  608,  608,  608,
  608,  608,  608,  608,  608,    0,    0,    0,    0,    0,
    0,    0,  609,    0,    0,    0,  609,  608,  609,  609,
  609,  609,  609,  609,  609,  609,  609,  609,  609,    0,
    0,    0,    0,    0,    0,    0,  608,    0,  609,  610,
  609,    0,  609,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  609,  609,  609,    0,    0,    0,    0,    0,
  609,  609,  609,  609,    0,  611,    0,    0,    0,  609,
  609,    0,    0,    0,    0,    0,    0,  609,  609,  609,
  609,  609,  609,  609,  609,    0,    0,    0,    0,    0,
    0,    0,  610,    0,    0,    0,  610,  609,  610,  610,
  610,  610,  610,  610,  610,  610,  610,  610,  610,    0,
    0,    0,    0,    0,    0,    0,  609,    0,  610,  611,
  610,    0,  610,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  610,  610,  610,    0,    0,    0,    0,    0,
  610,  610,  610,  610,    0,  616,    0,    0,    0,  610,
  610,    0,    0,    0,    0,    0,    0,  610,  610,  610,
  610,  610,  610,  610,  610,    0,    0,    0,    0,    0,
    0,    0,  611,    0,    0,    0,  611,  610,  611,  611,
  611,  611,  611,  611,  611,  611,  611,  611,  611,    0,
    0,    0,    0,    0,    0,    0,  610,    0,  611,  616,
  611,    0,  611,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  611,  611,  611,    0,    0,    0,    0,    0,
  611,  611,  611,  611,    0,  617,    0,    0,    0,  611,
  611,    0,    0,    0,    0,    0,    0,  611,  611,  611,
  611,  611,  611,  611,  611,    0,    0,    0,    0,    0,
    0,    0,  616,    0,    0,    0,  616,  611,  616,  616,
  616,  616,  616,  616,  616,  616,  616,  616,  616,    0,
    0,    0,    0,    0,    0,    0,  611,    0,  616,  617,
  616,    0,  616,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  616,  616,  616,    0,    0,    0,    0,    0,
    0,    0,  616,  616,    0,  619,    0,    0,    0,  616,
  616,    0,    0,    0,    0,    0,    0,    0,    0,  616,
  616,  616,  616,  616,  616,    0,    0,    0,    0,    0,
    0,    0,  617,    0,    0,    0,  617,  616,  617,  617,
  617,  617,  617,  617,  617,  617,  617,  617,  617,    0,
    0,    0,    0,    0,    0,    0,  616,    0,  617,  619,
  617,    0,  617,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  617,  617,  617,    0,    0,    0,    0,    0,
    0,    0,  617,  617,    0,  618,    0,    0,    0,  617,
  617,    0,    0,    0,    0,    0,    0,    0,    0,  617,
  617,  617,  617,  617,  617,    0,    0,    0,    0,    0,
    0,    0,  619,    0,    0,    0,  619,  617,  619,  619,
  619,  619,  619,  619,  619,  619,  619,  619,  619,    0,
    0,    0,    0,    0,    0,    0,  617,    0,  619,  618,
  619,    0,  619,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  619,  619,  619,    0,    0,    0,    0,    0,
    0,    0,  619,  619,    0,  620,    0,    0,    0,  619,
  619,    0,    0,    0,    0,    0,    0,    0,    0,  619,
  619,  619,  619,  619,  619,    0,    0,    0,    0,    0,
    0,    0,  618,    0,    0,    0,  618,  619,  618,  618,
  618,  618,  618,  618,  618,  618,  618,  618,  618,    0,
    0,    0,    0,    0,    0,    0,  619,    0,  618,  620,
  618,    0,  618,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  618,  618,  618,    0,    0,    0,    0,    0,
    0,    0,  618,  618,    0,  622,    0,    0,    0,  618,
  618,    0,    0,    0,    0,    0,    0,    0,    0,  618,
  618,  618,  618,  618,  618,    0,    0,    0,    0,    0,
    0,    0,  620,    0,    0,    0,  620,  618,  620,  620,
  620,  620,  620,  620,  620,  620,  620,  620,  620,    0,
    0,    0,    0,    0,    0,    0,  618,    0,  620,  622,
  620,    0,  620,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  620,  620,  620,    0,    0,    0,    0,    0,
    0,    0,  620,  620,    0,  624,    0,    0,    0,  620,
  620,    0,    0,    0,    0,    0,    0,    0,    0,  620,
  620,  620,  620,  620,  620,    0,    0,    0,    0,    0,
    0,    0,  622,    0,    0,    0,  622,  620,  622,  622,
  622,  622,  622,  622,  622,  622,  622,  622,  622,    0,
    0,    0,    0,    0,    0,    0,  620,    0,  622,  624,
  622,    0,  622,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  622,  622,  622,    0,    0,    0,    0,    0,
    0,    0,  622,  622,    0,  625,    0,    0,    0,  622,
  622,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  622,  622,    0,    0,    0,    0,    0,
    0,    0,  624,    0,    0,    0,  624,  622,  624,  624,
  624,  624,  624,  624,  624,  624,  624,  624,  624,    0,
    0,    0,    0,    0,    0,    0,  622,    0,  624,  625,
  624,    0,  624,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  624,  624,  624,    0,    0,    0,    0,    0,
    0,    0,    0,  624,    0,  627,    0,    0,    0,  624,
  624,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  624,  624,    0,    0,    0,    0,    0,
    0,    0,  625,    0,    0,    0,  625,  624,  625,  625,
  625,  625,  625,  625,  625,  625,  625,  625,  625,    0,
    0,    0,    0,    0,    0,    0,  624,    0,  625,  627,
  625,    0,  625,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  625,  625,  625,    0,    0,    0,    0,    0,
    0,    0,    0,  625,    0,  628,    0,    0,    0,  625,
  625,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  625,  625,    0,    0,    0,    0,    0,
    0,    0,  627,    0,    0,    0,  627,  625,  627,  627,
  627,  627,  627,  627,  627,  627,  627,  627,  627,    0,
    0,    0,    0,    0,    0,    0,  625,    0,  627,  628,
  627,    0,  627,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  627,  627,  627,    0,    0,    0,    0,    0,
    0,    0,    0,  627,    0,  630,    0,    0,    0,    0,
  627,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  627,  627,    0,    0,    0,    0,    0,
    0,    0,  628,    0,    0,    0,  628,  627,  628,  628,
  628,  628,  628,  628,  628,  628,  628,  628,  628,    0,
    0,    0,    0,    0,    0,    0,  627,    0,  628,  630,
  628,    0,  628,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  628,  628,  628,    0,    0,    0,    0,    0,
    0,    0,    0,  628,    0,  631,    0,    0,    0,    0,
  628,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  628,  628,    0,    0,    0,    0,    0,
    0,    0,  630,    0,    0,    0,  630,  628,  630,  630,
  630,  630,  630,  630,  630,  630,  630,  630,  630,    0,
    0,    0,    0,    0,    0,    0,  628,    0,  630,  631,
  630,    0,  630,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  630,  630,  630,    0,  364,    0,    0,    0,
    0,  786,    0,    0,    0,    0,    0,    0,    0,    0,
  630,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  630,  630,    0,    0,    0,    0,    0,
    0,    0,  631,    0,    0,    0,  631,  630,  631,  631,
  631,  631,  631,  631,  631,  631,  631,  631,  631,    0,
  364,    0,    0,    0,    0,    0,  630,    0,  631,    0,
  631,    0,  631,    0,    0,    0,    0,    0,    0,    0,
  786,    0,  631,  631,  631,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  631,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  631,  631,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  631,  364,    0,
    0,    0,    0,  364,    0,    0,  364,    0,  364,  364,
  364,  364,    0,  364,    0,    0,  631,    0,  786,  364,
    0,  364,  364,    0,  364,  364,  364,  364,  364,  364,
  364,  364,  364,  364,  364,  364,    0,  364,  364,  364,
  364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
  364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
  364,    0,  364,  364,    0,   46,    0,    0,    0,   48,
    0,    0,   49,  268,  364,    0,    0,   53,   54,    0,
   55,  364,   57,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  210,   58,    0,  210,    0,   60,    0,    0,
  210,    0,    0,  269,    0,  210,    0,    0,    0,    0,
    0,    0,    0,    0,   66,    0,    0,    0,    0,   68,
  210,    0,   69,   70,    0,    0,  493,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  494,  210,    0,   72,
   73,   74,  210,    0,    0,    0,    0,   76,    0,   78,
    0,   80,   81,   82,  270,   84,    0,    0,   87,    0,
    0,    0,  210,  210,    0,    0,    0,    0,   91,   92,
    0,    0,    0,    0,    0,  210,  210,    0,    0,    0,
    0,  210,    0,  271,  272,  210,    0,    0,    0,    0,
    0,   95,    0,   96,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  495,    0,    0,   98,   99,  100,
  101,    0,    0,    0,  102,   46,    0, 1020,    0,   48,
    0,    0,   49,  268,  103,  104,    0,   53,   54,    0,
   55,    0,   57,    0,    0,    0,    0,    0,    0,    0,
    0,  210,    0,   58,    0,    0,    0,   60,    0,    0,
    0,  105,    0,  269,    0,  106,  273,    0,    0,    0,
    0,  108,  109,    0,   66,    0,    0,    0,    0,   68,
  110,    0,   69,   70,    0,    0,    0,    0,    0,  210,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   72,
   73,   74,    0,    0,    0,    0,    0,   76,    0,   78,
    0,   80,   81,   82,  270,   84,    0,    0,   87,    0,
    0,    0,  536,    0,    0,    0,    0,    0,   91,   92,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  271,  272,    0,    0,    0,    0,    0,
    0,   95,    0,   96,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   98,   99,  100,
  101,    0,    0,    0,  102,   46,    0,    0,    0,   48,
    0,    0,   49,  268,  103,  104,    0,   53,   54,    0,
   55,    0,   57,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   58,    0,    0,    0,   60,    0,    0,
    0,  105,    0,  269,    0,  106,  273,    0,    0,    0,
    0,  108,  109,    0,   66,    0,    0,    0,    0,   68,
  110,    0,   69,   70,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   72,
   73,   74,    0,    0,    0,    0,    0,   76,    0,   78,
    0,   80,   81,   82,  270,   84,    0,    0,   87,    0,
    0,    0,  536,    0,    0,    0,    0,    0,   91,   92,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  271,  272,    0,    0,    0,    0,    0,
    0,   95,    0,  710,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   98,   99,  100,
  101,    0,    0,    0,  102,   46,    0,    0,    0,   48,
    0,    0,   49,  268,  103,  104,    0,   53,   54,    0,
   55,    0,   57,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   58,    0,    0,    0,   60,    0,    0,
    0,  105,    0,  269,    0,  106,  273,    0,    0,    0,
    0,  108,  109,    0,   66,    0,    0,    0,    0,   68,
  110,    0,   69,   70,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   72,
   73,   74,    0,    0,    0,    0,    0,   76,    0,   78,
    0,   80,   81,   82,  270,   84,    0,    0,   87,    0,
  734,    0,    0,    0,    0,    0,    0,    0,   91,   92,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  271,  272,    0,    0,    0,    0,    0,
    0,   95,    0,   96,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   98,   99,  100,
  101,    0,    0,    0,  102,   46,    0,    0,    0,   48,
    0,    0,   49,  268,  103,  104,    0,   53,   54,    0,
   55,    0,   57,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   58,    0,    0,    0,   60,    0,    0,
    0,  105,    0,  269,    0,  106,  273,    0,    0,    0,
    0,  108,  109,    0,   66,    0,    0,    0,    0,   68,
  110,    0,   69,   70,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   72,
   73,   74,    0,    0,    0,    0,    0,   76,    0,   78,
    0,   80,   81,   82,  270,   84,    0,    0,   87,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   91,   92,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  271,  272,    0,    0,    0,    0,    0,
    0,   95,    0,   96,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   98,   99,  100,
  101,    0,    0,    0,  102,  170,    0,    0,    0,  170,
    0,    0,  170,  170,  103,  104,    0,  170,  170,    0,
  170,    0,  170,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  170,    0,    0,    0,  170,    0,    0,
    0,  105,    0,  170,    0,  106,  273,    0,    0,    0,
    0,  108,  109,    0,  170,    0,    0,    0,    0,  170,
  110,    0,  170,  170,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  170,
  170,  170,    0,    0,    0,    0,    0,  170,    0,  170,
    0,  170,  170,  170,  170,  170,    0,    0,  170,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  170,  170,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  170,  170,    0,    0,    0,    0,    0,
    0,  170,    0,  170,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  170,  170,  170,
  170,    0,    0,    0,  170,   46,    0,    0,    0,   48,
    0,    0,   49,  268,  170,  170,    0,   53,   54,    0,
   55,    0,   57,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   58,    0,    0,    0,   60,    0,    0,
    0,  170,    0,  269,    0,  170,  170,    0,    0,    0,
    0,  170,  170,    0,   66,    0,    0,  555,    0,   68,
  170,    0,   69,   70,    0,    0,    0,    0,    0,   48,
    0,    0,   49,    0,    0,    0,    0,   53,    0,   72,
   73,   74,   57,    0,    0,    0,    0,   76,    0,   78,
    0,   80,   81,   82,  270,   84,    0,   60,   87,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   66,    0,    0,    0,    0,   68,
    0,    0,    0,  271,  272,    0,    0,    0,    0,    0,
    0,   95,    0,   96,    0,    0,    0,    0,    0,   72,
   73,    0,    0,    0,    0,    0,    0,   98,   99,  100,
  101,    0,   81,   82,  102,    0,    0,    0,   87,    0,
    0,    0,  312,    0,  103,  104,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  124,    0,    0,    0,    0,
  124,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  105,  124,  124,    0,  106,  273,  124,    0,    0,
    0,  108,  109,    0,  124,    0,    0,  124,  124,  124,
  110,    0,  124,    0,  124,    0,    0,    0,  196,    0,
    0,  124,  124,  124,    0,    0,  124,    0,  124,    0,
  124,    0,    0,  124,  124,    0,    0,    0,  124,  124,
  124,    0,    0,  124,    0,  124,    0,    0,    0,  124,
  124,  124,  124,  124,    0,    0,  289, 1271,    0,    0,
    0,  124,    0,  124,    0,    0,    0,    0, 1061,   48,
    0,    0,   49,    0,  124,  124,    0,   53,  124,  124,
   48,  124,   57,   49,  124,    0,    0,    0,   53,    0,
    0,    0,    0,   57,    0,    0,    0,   60, 1250,    0,
    0,  124,    0,    0,    0,    0,    0,    0,   60,  124,
   48,    0,    0,   49,   66,    0,    0,    0,   53,   68,
    0,    0,    0,   57,    0,   66,    0,    0,    0,    0,
   68,    0,    0,    0,    0,    0,    0,    0,   60,   72,
   73,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   72,   73,   81,   82,  364,   66,    0,    0,   87,    0,
   68,    0,  312,   81,   82,    0,    0,    0,    0,   87,
    0,    0,   73,  847,   73,  124,  124,    0,    0,    0,
   72,   73,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  244,    0,   81,   82,    0,   73,    0,    0,   87,
    0,    0,    0,  312,   73,    0,    0,    0,  364,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  196,    0,
    0,    0,    0,    0,    0,    0,   73,    0,    0,  196,
    0,   73,   73,    0,    0,    0,    0,   73,    0,    0,
    0,   73,    0,   73,   73,   73,    0,    0,   73,    0,
    0,    0,    0,   73,    0,    0,  289,    0,    0,  196,
    0,    0,    0,    0,    0,    0,   73,  289,    0,    0,
    0,   73,    0,   73,    0,    0,  364,    0,    0,    0,
    0,    0,    0,    0,  364,  364,  364,  364,  364,  364,
    0,  364,    0,   73,    0,  364,    0,  289,    0,  364,
  364,    0,    0,  364,  364,  364,  364,  364,  364,  364,
  364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
  364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
  364,  364,  364,  364,  364,  364,  364,  364,  364,   51,
  364,  364,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   51,  364,    0,    0,    0,   51,    0,    0,    0,
    0,    0,    0,   51,    0,    0,   51,   73,    0,    0,
    0,   51,    0,    0,    0,    0,    0,    0,    0,    0,
   51,   51,   51,    0,    0,    0,    0,   51,    0,    0,
    0,    0,   51,   51,    0,    0,    0,   51,   51,   51,
    0,    0,    0,    0,   51,    0,    0,    0,   51,    0,
   51,   51,   51,    0,    0,    0,    0,    0,    0,    0,
   51,    0,   51,    0,    0,    0,    0,    0,    0,   74,
    0,    0,    0,   51,   51,    0,    0,    0,   51,    0,
   51,   74,   74,   51,    0,    0,   74,    0,    0,    0,
    0,    0,    0,   74,    0,    0,   74,   74,   74,    0,
   51,   74,    0,   74,    0,    0,    0,   51,   51,    0,
   74,   74,   74,    0,    0,   74,    0,   74,    0,   74,
    0,    0,   74,   74,    0,    0,    0,   74,   74,   74,
    0,    0,   74,    0,   74,    0,    0,    0,   74,   74,
   74,   74,   74,    0,    0,    0,    0,    0,    0,    0,
   74,    0,   74,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   74,   74,    0,    0,   74,   74,    0,
   74,   73,    0,   74,   51,   51,    0,    0,    0,    0,
    0,    0,    0,   73,   73,    0,    0,    0,   73,    0,
   74,    0,    0,    0,    0,   73,    0,    0,   73,   73,
   73,    0,    0,   73,    0,   73,    0,    0,    0,    0,
    0,    0,   73,   73,   73,    0,    0,   73,    0,   73,
    0,   73,    0,    0,   73,   73,    0,    0,    0,   73,
   73,   73,    0,    0,   73,    0,   73,    0,    0,    0,
   73,   73,   73,   73,   73,    0,    0,    0,    0,    0,
    0,    0,   73,    0,   73,    0,    0,    0,    0,    0,
    0,   73,    0,   74,   74,   73,   73,    0,    0,   73,
   73,    0,   73,   73,   73,   73,    0,    0,   73,    0,
    0,    0,    0,    0,    0,   73,    0,    0,   73,   73,
   73,    0,   73,   73,    0,   73,    0,    0,    0,  103,
    0,    0,   73,   73,   73,    0,    0,   73,    0,   73,
    0,   73,    0,    0,   73,   73,    0,    0,    0,   73,
   73,   73,    0,    0,   73,    0,   73,    0,    0,    0,
   73,   73,   73,   73,   73,    0,    0,    0,    0,    0,
    0,    0,   73,    0,   73,    0,    0,    0,    0,    0,
    0,   73,    0,    0,    0,   73,   73,    0,    0,   73,
   73,    0,   73,   73,   73,   73,   73,    0,   73,    0,
    0,    0,    0,    0,    0,   73,    0,    0,   73,   73,
   73,    0,   73,   73,    0,   73,    0,    0,    0,  104,
    0,    0,   73,   73,   73,    0,    0,   73,    0,   73,
    0,   73,    0,    0,   73,   73,    0,    0,    0,   73,
   73,   73,    0,    0,   73,    0,   73,    0,    0,    0,
   73,   73,   73,   73,   73,    0,    0,    0,    0,    0,
    0,    0,   73,    0,   73,    0,    0,    0,    0,    0,
    0,   73,    0,    0,    0,   73,   73,    0,    0,   73,
   73,    0,   73,   73,   73,   73,   73,    0,   73,    0,
    0,    0,    0,    0,    0,   73,    0,    0,   73,   73,
   73,    0,   73,   73,    0,   73,    0,    0,    0,    0,
    0,    0,   73,   73,   73,    0,    0,   73,    0,    0,
    0,   73,    0,    0,   73,   73,    0,    0,    0,   73,
   73,   73,    0,    0,   73,    0,   73,    0,    0,    0,
   73,   73,   73,   73,   73,    0,    0,    0,    0,    0,
    0,    0,   73,    0,   73,    0,    0,    0,    0,    0,
    0,   73,    0,    0,    0,   73,    0,    0,    0,   73,
   73,    0,   73,   73,   73,   73,   73,    0,   73,    0,
    0,    0,    0,    0,    0,   73,    0,    0,   73,   73,
   73,    0,   73,   73,    0,   73,    0,    0,    0,  249,
    0,    0,   73,   73,   73,    0,    0,   73,    0,    0,
    0,   73,    0,    0,   73,   73,    0,    0,    0,   73,
   73,   73,    0,    0,   73,    0,   73,    0,    0,    0,
   73,   73,   73,   73,   73,    0,    0,   63,    0,    0,
    0,    0,   73,    0,   73,    0,    0,    0,    0,   63,
    0,    0,    0,    0,   63,   73,    0,    0,    0,   73,
   73,   63,   73,    0,   63,   73,   73,    0,    0,   63,
    0,    0,    0,    0,    0,    0,    0,    0,   63,   63,
   63,    0,   73,    0,    0,   63,    0,    0,    0,  250,
   63,   63,    0,    0,    0,   63,   63,   63,    0,    0,
    0,    0,   63,    0,    0,    0,   63,    0,   63,   63,
   63,    0,    0,    0,    0,    0,    0,    0,   63,    0,
   63,    0,   73,    0,    0,    0,    0,    0,    0,    0,
    0,   63,   63,    0,   73,    0,   63,    0,   63,   73,
    0,   63,    0,    0,    0,    0,   73,    0,    0,   73,
    0,    0,    0,    0,   73,    0,   73,    0,   63,    0,
    0,    0,    0,   73,   73,   73,   63,    0,   73,    0,
    0,    0,    0,    0,    0,   73,   73,    0,    0,    0,
   73,   73,   73,    0,    0,    0,    0,   73,    0,    0,
    0,   73,   73,   73,   73,   73,    0,    0,    0,    0,
   73,    0,    0,   73,    0,   73,   73,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   73,    0,    0,    0,
    0,   73,   73,   73,    0,    0,   73,   73,   73,    0,
   73,    0,   63,   73,    0,    0,    0,   73,   73,   73,
   73,   73,    0,   73,    0,    0,    0,    0,    0,   73,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   73,    0,   73,    0,    0,   73,   73,   73,    0,   73,
    0,   73,    0,    0,    0,   73,    0,   73,   73,   73,
    0,    0,    0,    0,   43,    0,   43,   73,    0,   73,
    0,    0,   73,   73,    0,    0,  230,    0,    0,    0,
   73,    0,    0,    0,    0,   73,    0,   73,   43,    0,
    0,    0,    0,    0,    0, 1154,   43,   73,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   73,    0,    0,
   73,   73,    0,    0,  232,    0,    0,    0,   43, 1155,
    0,    0,    0,   43,   43,    0,    0, 1156,    0,   43,
    0,    0,    0,   43,    0,   43,   43,   43,    0,    0,
    0,    0,    0,   73,    0,   43,    0,    0,   73, 1157,
    0,    0,    0,    0, 1158, 1159,    0,    0,   43,    0,
 1160,    0,    0,   43, 1161,   43, 1162, 1163, 1164,    0,
    0,    0,   73,    0,    0,    0, 1165,    0,    0,    0,
   73,   73,    0,    0,    0,   43,    0,    0,    0, 1166,
    0,    0,   43,   43, 1167,    0, 1168,    0,    0,    0,
    0,   73,   73,   73,    0,    0,    0,   73,   73,    0,
    0,    0,    0,   73,    0,    0, 1169,   73,    0,   73,
   73,   73,    0,    0,   73,   73,    0,    0,    0,   73,
    0,    0,   73,   73,    0,    0,    0,    0,    0,    0,
 1442,    0,   73,    0,    0,    0,    0,   73,    0,   73,
    0,    0,    0,    0,    0,   73,   73,    0,    0,   43,
   73,   73,    0,    0,   73,    0,   73,    0,    0,   73,
   73,    0,   73,   73,   73,    0,  321,    0,    0,    0,
    0,    0,   73,    0,    0,    0,   73,    0,    0, 1211,
 1170,   73,   73,    0,    0,   73,    0,   73,    0,    0,
   73,   73,   73,   73,   73,   73,    0,    0, 1154,    0,
    0,    0,    0,   73,    0,    0,    0,    0,    0,    0,
    0,    0,   73,    0,    0,    0,   73,    0,    0,  322,
    0,   73, 1155,   73,    0,    0,    0,    0,    0, 1154,
 1156,    0,    0,   73,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   73,    0,    0,   73,   73,    0,    0,
    0,    0, 1157, 1155,    0,    0,    0, 1158, 1159,    0,
    0, 1156,    0, 1160,    0,    0,    0, 1161,    0, 1162,
 1163, 1164,    0,    0,    0,    0,    0,    0,    0, 1165,
    0,    0,    0, 1157,    0,    0,   73,    0, 1158, 1159,
    0,    0, 1166,    0, 1160,    0,    0, 1167, 1161, 1168,
 1162, 1163, 1164,    0,    0,    0,    0,    0,    0,    0,
 1165,    0,    0,   48,    0,    0,   49,   73, 1359, 1169,
    0,   53,    0, 1166,   48,    0,   57,   49, 1167,    0,
 1168,    0,   53,    0,    0,    0,    0,   57,    0,    0,
    0,   60,    0,    0,    0,    0,    0,    0,    0,    0,
 1169,    0,   60,    0,    0,    0,    0,    0,   66,  210,
    0,    0,  210,   68,    0,    0, 1360,  210,    0,   66,
    0,    0,  210,    0,   68,    0,    0,    0,    0,    0,
    0,    0,    0,   72,   73,    0,    0,  210,    0, 1361,
    0,    0, 1211, 1170,   72,   73,   81,   82,    0,    0,
    0,    0,   87,    0,  210,    0,  312,   81,   82,  210,
    0,    0,    0,   87,    0,    0,    0,  312,    0,    0,
    0,    0,    0,    0, 1170,    0,    0,    0,    0,  210,
  210,    0,    0,   48,    0,    0,   49,    0,    0,  261,
    0,   53,  210,  210,    0,    0,   57,    0,  210,    0,
    0,    0,  210,    0,    0,    0,    0,    0,    0,    0,
    0,   60,  196,    0,   48,    0,    0,   49,    0,    0,
    0,    0,   53,  196,    0,    0,    0,   57,   66,    0,
    0,    0, 1020,   68,    0,    0,    0,    0,    0,    0,
    0,    0,   60,    0,    0,    0,    0,    0,    0,    0,
  289,    0,    0,   72,   73,    0,    0,    0,  210,   66,
   48,  313,    0,   49,   68,    0,   81,   82,   53,    0,
    0,    0,   87,   57,    0,    0,  312,    0,    0,    0,
    0,    0,    0,    0,   72,   73,    0,    0,   60,    0,
    0,   48,    0,    0,   49,    0,  210,   81,   82,   53,
    0,    0,    0,   87,   57,   66,    0,  847,    0,    0,
   68,    0,    0,    0,    0,    0,    0,    0,    0,   60,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   72,   73,  196,    0,    0,    0,   66,   48,    0,    0,
   49,   68,    0,   81,   82,   53,    0,    0,    0,   87,
   57,    0,    0,  195,    0,    0,    0,    0,    0,    0,
    0,   72,   73,  196,    0,   60,    0,    0,  211,    0,
  289,  211,    0,    0,   81,   82,  211,    0,    0,    0,
   87,  211,   66,    0, 1477,    0,    0,   68,    0,    0,
    0,    0,    0,    0,    0,    0,  211,    0,    0,    0,
    0,  289,    0,    0,    0,    0,    0,   72,   73,  196,
    0,    0,    0,  211,  210,    0,    0,  210,  211,    0,
   81,   82,  210,    0,    0,    0,   87,  210,    0,    0,
 1572,    0,    0,    0,    0,    0,    0,    0,  211,  211,
  196,    0,  210,    0,    0,    0,    0,  289,    0,    0,
    0,  211,  211,    0,    0,    0,    0,  211,    0,  210,
    0,  211,    0,    0,  210,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  289,    0,
    0,    0,    0,    0,  210,  210,  196,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  210,  210,    0,
  673,    0,    0,  210,    0,    0,    0,  210,    0,    0,
  673,  673,    0,    0,    0,  673,    0,  211,    0,    0,
    0,    0,    0,    0,  289,  673,  673,  673,    0,    0,
    0,    0,  673,    0,    0,    0,    0,    0,    0,  673,
  673,  673,    0,    0,  673,    0,  673,    0,  673,  672,
  672,  673,    0,    0,  672,  211,  673,    0,    0,    0,
    0,  673,    0,  210,  672,  672,  672,    0,  673,    0,
    0,  672,    0,    0,  673,    0,    0,    0,  672,  672,
  672,  673,    0,  672,    0,  672,    0,  672,    0,    0,
  672,    0,    0,  673,    0,  672,  673,    0,    0,    0,
  672,  210,  673,    0,    0,    0,    0,  672,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  672,    0,  673,  673,    0,    0,    0,    0,    0,    0,
    0,    0,  672,    0,    0,  672,    0,    0,    0,    0,
    0,  672,
  };
  protected static readonly short [] yyCheck = {            17,
   50,  138,    6,   91,   92,  288,   41,  247,  208,  192,
  749,  311,  576,   20,   20,   18,   41,  650,  501,    0,
    0,  205,   17,    0,  703,    0,  543,   20,    0,   79,
  489,   51, 1017,   83,   77,  238,  494,    0,   17,  309,
 1010,  256,   52, 1190,   64,  357,  347,    0,  787, 1034,
 1020,    0,  256,   71,    0,  269, 1451,  269,  256,   77,
  256,  256,   69,  256,  256,  256,  256,  256,   46,   89,
 1091,   91,   92,  310,  269,  256,   54,  256,   96, 1191,
 1192,   59,  256,   61,   91,   92,  256,   65,   17,   67,
  110,  550, 1096,  576,  256, 1080,   74,   75, 1119,  309,
   17,  309, 1214,  562,  256,   83,  256,  309, 1091,  945,
   88,  256,   90,  256,  256,  256, 1023,    0,  256,  383,
  138,  256,  392,  393,  212,  213,   17,  471, 1098, 1241,
   20, 1526, 1153, 1023,  970,  392, 1119,  115,  363,  289,
  325,  661,  662,  161,  363,  393,  356,  270,  356,  393,
  335,  417,  418,  419,  356,  403,  290, 1552,  193,  403,
  724,  346,  410,  388, 1071, 1186,  161,  650,  405,  388,
 1153,  294,  911,  307,  388,  389, 1180,  256,  266,   69,
  390, 1071,  161,  324,  256,  364,  336,  275,  390,  393,
  324,  455,  390,  256,   17,  256,  540,  256,  455,  403,
  390,   91,   92, 1186,  269,  212,  213,  403,  296,  405,
  245,  392,  277,  672,  410, 1051,  405,  410,  410,  410,
  390,  363,  462,  493,  494,  367,  388,  369,   17,  403,
  372,  373,  161,  375,  376,  253,  254,  241,   17,  309,
  455,  724,  260,  405,  161,  459,  381,  459,  560,  457,
   17,  310,  710,  565,  342,  457,  568,  307,  753,  266,
  755,  403,  280,  467,  459,  283,  284,  457,  275,  287,
  161,  281,  282,  476,  477, 1422,  257,  257,  773,  297,
  257,  288,  257, 1374,  256,  295,  356,  782,  306,  296,
  300,  309,  270,  311,  257,  256,  316,  756,  318,  277,
  759, 1392,  322,  455,  257,  455, 1291, 1419,  257,  988,
  455,  257,  455,  451, 1426, 1300, 1301,  360,  383,  291,
  458,  455,  212,  213,  403,  467,  405,  462,  463,  464,
  465,  410,  404,  792,  256,  342,  308,  256,  161,  357,
  358,  404,  360,  404,  403, 1366,  405,  328,  328,  359,
  256,  410,  256,  328,  538,  443,  444,  375,  376,  377,
  378,  379,  380,  381,  382,  383,  384,  385,  386,  387,
  388,  672,  161,   17,  257,  328,  266, 1347,  310,  328,
  256, 1402,  161, 1366,  256,  275,   17,  457,  256,   17,
  455,  363,  262,  325,  161, 1335,  414,  467,  288,  256,
   17,    0,  256,  923,   17,  925,  296,  927,  389,  390,
  390,  388,  403,  381,   17,  503,  388,  256,  310, 1402,
  392,  256,  394,  443,  444, 1090,  309,  447, 1280,  267,
  440,  392,  404,  394,  256,  267,  443,  444,  256, 1530,
  710,  256,  256,  404,  479,  328,  316,  256,  585,  256,
  256,  872,  342,  541,  256, 1033,  463,  463,  256,  979,
  256,  981,  453,  983,  346, 1317, 1286, 1558,  963, 1560,
  324,  474, 1457,  356,  393,  493,  494,  484,  484,  900,
  530,  403,  310, 1468,  509, 1576,  506, 1004,  905,  507,
  508, 1008, 1432, 1433, 1434,  346,  503,  403,  336,  403,
  346,  256,  512,  743,  336, 1069,  501,  390, 1141, 1329,
 1249, 1006, 1177,  405,  390, 1254, 1255,  161,  818,  539,
 1259, 1260,  501,  455,  392,  535,  394,  545, 1106,  547,
  161,  403, 1502,  161,  541,  392,  404,  407,  408,  559,
 1023,  306,  560,  561,  161,  389, 1285,  565,  161, 1182,
  568,  529,  391,  443,  444,  390,  310, 1052,  161,  577,
  578,  579, 1082, 1548,  403,  575,  404,  585,  256,  310,
  383,  393,  404,  455,  457,  393,  390,  405,  393,  449,
 1075,  576, 1003, 1000,  393,  392, 1069,  393, 1071, 1109,
  388,  393,  388,  380,  392,  325,  392,  576, 1093,  389,
  310,  325, 1097, 1588,  455,  335,    0,  394,  363,  455,
  405,  335,  367,  503,  369, 1600,  346,  372,  373, 1136,
  375,  376,  346,  467, 1172,  257,  380,  392,  389,  383,
  393,  609,  389,  393,  257,  308,  390,  657,  656,  659,
  394,  454,  455,  661,  662,  310,  664,  390,  403,  669,
  383,  541,  952,  466,  389,  650,  389,  256, 1141,  325,
  388,  389,  403,  393,  405, 1185, 1214,  388,  389,  335,
  400,  650,  467,  389,  652,  363,  400,  467,  383,  367,
  346,  369,  689,  393,  372,  373, 1206,  375,  376,  405,
  363,  709,  710,  403,  714,  405,  689,  392,  325, 1182,
  308,  455,  790,  721,  467,  256,  467,  467,  335,  308,
  467,  310,  467,  263,  734,  388,  766,  460,  768,  346,
  256,  454,  455,  308,  749,  455, 1367,  308,  393,  724,
  394,  455,  467,  466,  400,  389,  389,  388,  403,  467,
  405,  393,  392, 1482, 1483,  724,  467,    0,  931,  273,
  455,  467, 1211, 1492,  405,  363,  393, 1496,  263,  451,
  455,  779,  787,   28,  363,  783,  458,  785,  388,  403,
  309,  466, 1366,  400,  310, 1416, 1235,   42,  363,  467,
  388,  380,  363,  790,  383,  405,  764,  337,  455,  388,
  314,  390,  391,  392,  393,  394,  460,  396,  816,  689,
  818,  455,  455,  388,  403,  455,  405,  388, 1402,  946,
  845,  410,  363,  412,  388,  467,  367,  356,  369,  453,
  344,  372,  373,    0,  375,  376,  309,  363,  455,  256,
  467,  367,  337,  369,  370,  371,  372,  373,  374,  375,
  376,  377,  378,  379, 1378,  947,  324,  273,  410,  856,
  856,  273,  394,  389,  453,  391,  455,  393,  876,  884,
  948,  403,  256,  319,  256,  256,  968,  403,  404,  405,
 1578, 1579, 1366,  356, 1408,  893, 1116,  413,  414,  270,
 1311, 1312,  451,  903,  420,  421,  911, 1318,  314,  451,
  363, 1091,  314, 1601,  904,  390,  458,  466,  434,  435,
  790, 1332,  390,  294,  392,  923,  394,  925, 1402,  927,
  410,  453,  448,  278,  308,  388,  310,  324,  344, 1119,
 1366,  939,  344,  288, 1366,  405,  944, 1358,  946,  936,
  936,  467,  405,  951,  952,  953,  363,  302,  303,  304,
  367,  948,  369, 1366, 1032,  372,  373,  310,  375,  376,
  957,  451,  405, 1153,  319, 1366, 1402,  388,  458,  388,
 1402,  979,  325,  981,  957,  983,  466,  985,  978,  363,
  363,  363,  460,  388,  405,  367,  405,  369,  310, 1402,
  372,  373,  392,  375,  376,  388, 1186, 1446,  998,  383,
  405, 1402, 1010,  325,  388,  388,  390,  391,  392,  393,
  365,  422, 1020,  256,  389, 1012,  388, 1466,  393,  403,
 1017,  405,  405,  389,  391, 1033,  410,  393,  412, 1012,
  405, 1031,  380,  405, 1017, 1032,  403, 1034, 1023, 1047,
  451,    0,  390,  390,  319,    4,  394,  458,  396,  396,
  467, 1034,  391,  392, 1023,  466,  389,  405,  405,  394,
  393, 1101,  435, 1293,  403,  308, 1091,  310,  948,  453,
  405,  455,  405,  256, 1082,  448, 1091,  957,  389, 1087,
  302,  391,  410, 1080, 1069,  467, 1071,  415,  416,  256,
 1098,  455,  403,  403, 1119,  391,  460, 1080, 1106,  410,
 1069, 1109, 1071, 1111, 1119,  411,  412, 1147,  436,  437,
  438,  439,  440,  441,  442,  443,  444,  445,  446,  451,
  363,  391,  428,  429,  391,  393,  458,  391, 1153,  413,
  391,  381, 1012,  403,  466,  403,  403, 1017,  388,  403,
  383,  308,  403,  310,  420,  388,  391,  256,  391,  392,
  393, 1229, 1032,  393, 1034,  393, 1141,  414,  403,  393,
  403, 1186,  405,  403,  388,  403,  403,  410,  405,  403,
  455, 1186, 1141,  410,  434,  460,  273, 1185, 1256,  404,
  363,  278,  421,  389,  367,  410,  369,  393, 1461,  372,
  373,  288,  375,  376, 1188, 1189,  363, 1182, 1206,  392,
 1080,  394,  403,  405,  405,  302,  303,  304,  256,  410,
  453,  390,  455, 1182,  404, 1225,  383,  314,  380,  389,
  410,  388,  319,  393,  391,  392,  393,  430,  431,  432,
  433, 1256, 1229,  392, 1249,  403,  403,  405,  405, 1254,
 1255,  377,  378,  410, 1259, 1260,  455,  344, 1242,  391,
 1244,  393, 1246,  451,  363, 1280,  377,  378,  367, 1256,
  369,  389,  390,  372,  373, 1280,  375,  376,  365,  328,
 1285,  425,  426,  427, 1352,  400,  401,  402,  403,  256,
  404,  405,  406,  407,  467,  403,  453,  405,  455, 1286,
  455, 1288, 1317, 1371, 1291,  394,  395,  396,  404,  397,
  398,  399, 1317, 1300, 1301,  389,  390,  403, 1291,  405,
 1307,  403,  403,  405,  405,  363,  392, 1300, 1301,  367,
  403,  369,  405,  302,  372,  373,  392,  375,  376,  385,
  386,  394, 1329,  391,  392,  256,  394,  388,  389, 1347,
 1365, 1366, 1367,  388,  389,  403,  404,  388,  389, 1229,
 1365,  394, 1367, 1378,  256, 1352,  310,  384,  467,  385,
  386,  455, 1440, 1378,  404,  392, 1444,  394,  395,  396,
  397,  310,  399,  455, 1371,  455, 1256, 1402,    0, 1289,
 1290, 1459,  410, 1408, 1283, 1284,  392,  393,  458,  578,
  579, 1416, 1519, 1408,  404,  422,  423,  424,  403,  256,
  404, 1416,  455,  379,  396,  455, 1286,  405, 1288,  390,
  256, 1291, 1452,  451,  403,  393,  455,  412,  393,  467,
 1300, 1301,  392,  455,  393,  393,  310, 1307,  310,  392,
  256,  310,  394,  460,  310,  393, 1563,  410,  405,  389,
  404,  394,  403, 1440,  310,  405,  403, 1444,  310, 1329,
  393,  403,  403,  310,  388,  403,  393,  310,  310,  403,
 1457,  455, 1459,  391, 1461,  392,  404, 1482, 1483,  394,
  393, 1468, 1352,  455, 1457,  410,  256, 1492, 1605,  410,
  404, 1496, 1507,  393,  287, 1468,  393,  374,  391,  388,
  455, 1371,  404,  404, 1502,  403,  393,  393,  393,  404,
  393,  370,  393,  393,  410,  256,  363, 1532, 1533,  455,
  367, 1519,  369,  370,  371,  372,  373,  374,  375,  376,
  377,  378,  379,  404,  389, 1550,  370,  391,  403,  388,
  306,  389,  389, 1541,  391,  371,  393,  410,  388,  371,
  389,  388,  403,  302,  389,  379,  403,  404,  405,  389,
  392, 1548, 1549, 1578, 1579, 1563,  404, 1597, 1598,  392,
 1440,  455,  392,  455, 1444, 1548, 1549,  455,  256,  455,
  273,  274,  410, 1613, 1614,  278, 1601, 1457,  256, 1459,
  394, 1461,  392,  451,    0,  288,  289,  290, 1468,  405,
  388, 1588,  295,  394,  454,  392,  291, 1605,  393,  302,
  303,  304,  393, 1600,  307, 1588,  393,  393,  311,  393,
  467,  314,  291,  256,  404,  404,  319, 1600,  308,  393,
  455,  324,  403,  363,  256,  389,  404,  455,  331,  361,
  405,  410,  388,  388,  256,  257,  388,  405,  392,  388,
  403,  344,  264,  393,  389,  267,  268,  269,  389,  271,
  272,  389,  274,  275,  276,  277,  359,  279,  280,  281,
  389,  455,  365,  455,  388,  287,  392,  455, 1548, 1549,
  292,  404,  392,  295,  296,  392,  404,  404,  300,  301,
  302,  404,  455,  305,  306,  392,  256,  392,  410,  403,
  405,  313,  410,    0,  390,  317,  318,  403,  455,  321,
  322,  393,  393,  388,  393,  405,  403,  393, 1588,  256,
  403,  393,  455,  455,  336,  389,  338,  339,  340,  455,
 1600,  404,  391,  345,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,  357,  358,  359,  404,  388,
  405,  405,  364,  405,  404,  367,  368,  410,  337,  263,
  404,  389,  410,  389,    0,  388,    0,  405,  405,  389,
  382,  383,  391,    0,  405,  388,  388,  389,  390,  388,
  392,  391,  393,  388,  455,  455,  393,  405,  405,  393,
  393,  393,  389,  405,  406,  407,  408,  409,  393,  389,
  388,  413,  389,  388,  405,  405,  455,  390,  455,  405,
  394,  423,  424,  405,  405,  337,  405,  263,   40,  405,
  193,   12, 1409,  405,  405,  405,    5, 1409, 1186, 1119,
  936,  856, 1153, 1278, 1047, 1555, 1047, 1568,  450, 1505,
 1522, 1544,  454,  455, 1514, 1282,  690,  459,  460,  461,
  256,  257,  884, 1426,  742,  467, 1614,  469,  264, 1402,
  884,  267,  268,  269, 1616,  271,  272, 1425,  274,  275,
  276,  277, 1537,  279,  280,  281, 1533, 1532, 1317, 1598,
 1235,  845,   20, 1424, 1012, 1307,  292,  571,  758,  295,
  296,  358,  358,  584,  300,  301,  302,  309,    0,  305,
  306,  494,  721, 1107,  709,  408,  411,  313,  409,  586,
  410,  317,  318,  412, 1326,  321,  322,  413,  817, 1371,
  161,  968, 1024, 1024, 1074,  895,  899,  452,  452,  667,
  336,  508,  338,  339,  340, 1224, 1111,  531,  161,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,  357,  358,  359,   -1,   -1,   -1,   -1,  364,  256,
   -1,  367,  368,  853,   -1,  262,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  852,   -1,   -1,  382,  383,   -1,   -1,
   -1,   -1,  388,  389,  390,   -1,  392,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,
  406,  407,  408,  409,   -1,   -1,   -1,  413,   -1,   -1,
   -1,  308,   -1,  310,   -1,   -1,    0,  423,  424,  316,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  450,   -1,   -1,   -1,  454,  455,
   -1,   -1,   -1,  459,  460,  461,   -1,   -1,   -1,   -1,
   -1,  467,   -1,  469,   -1,   -1,  363,   -1,   -1,   -1,
  367,   -1,  369,  370,  371,  372,  373,  374,  375,  376,
  377,  378,  379,  380,   -1,   -1,  383,  384,   -1,   -1,
   -1,  388,  389,  390,  391,  392,  393,  394,  395,  396,
  397,   -1,  399,   -1,   -1,   -1,  403,  404,  405,    0,
  407,  408,   -1,  410,  411,  412,  413,  414,  415,  416,
  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
  427,  428,  429,  430,  431,  432,  433,  434,  435,  436,
  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,
   -1,  448,  449,   -1,  256,  257,  453,   -1,  455,  261,
   -1,   -1,   -1,  460,   -1,   -1,   -1,   -1,   -1,   -1,
  467,  273,  274,   -1,   -1,   -1,  278,   -1,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,  288,  289,  290,   -1,
   -1,  293,   -1,  295,   -1,   -1,   -1,   -1,   -1,   -1,
  302,  303,  304,   -1,   -1,  307,   -1,  309,   -1,  311,
   -1,   -1,  314,  315,   -1,   -1,   -1,  319,  320,  321,
   -1,   -1,  324,   -1,  326,   -1,  328,    0,  330,  331,
  332,  333,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  355,  356,   -1,   -1,  359,  360,   -1,
  362,   -1,   -1,  365,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,
  382,   -1,   -1,   -1,   -1,   -1,   -1,  389,  390,  273,
  274,   -1,   -1,   -1,  278,   -1,   -1,   -1,   -1,   -1,
   -1,  285,   -1,  405,  288,  289,  290,   -1,   -1,  293,
   -1,  295,   -1,   -1,   -1,   -1,   -1,    0,  302,  303,
  304,   -1,   -1,  307,   -1,  309,   -1,  311,   -1,   -1,
  314,  315,   -1,   -1,   -1,  319,  320,  321,   -1,   -1,
  324,   -1,  326,   -1,   -1,   -1,  330,  331,  332,  333,
  334,   -1,   -1,   -1,  456,  457,   -1,   -1,  342,   -1,
  344,   -1,   -1,   -1,   -1,  467,  257,   -1,   -1,   -1,
  261,  355,  356,   -1,   -1,  359,  360,   -1,  362,   -1,
   -1,  365,  273,   -1,   -1,   -1,   -1,  278,   -1,   -1,
   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,  382,   -1,
   -1,   -1,  293,   -1,   -1,  389,  390,   -1,   -1,   -1,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,  309,   -1,
   -1,   -1,   -1,  314,  315,   -1,   -1,   -1,  319,  320,
  321,   -1,    0,   -1,   -1,  326,   -1,  328,   -1,  330,
   -1,  332,  333,  334,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  355,  356,   -1,   -1,   -1,  360,
   -1,  362,  456,  457,  365,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,  261,   -1,
   -1,  382,   -1,   -1,   -1,   -1,   -1,   -1,  389,  390,
  273,   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,   -1,
   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,
  293,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,  309,   -1,   -1,   -1,
   -1,  314,  315,   -1,   -1,   -1,  319,  320,  321,   -1,
   -1,   -1,   -1,  326,   -1,   -1,   -1,  330,   -1,  332,
  333,  334,   -1,   -1,   -1,  456,  457,   -1,   -1,  342,
   -1,  344,   -1,   -1,  257,   -1,   -1,   -1,  261,   -1,
  263,   -1,  355,  356,   -1,   -1,   -1,  360,   -1,  362,
  273,  274,  365,   -1,   -1,  278,   -1,   -1,   -1,   -1,
   -1,   -1,  285,   -1,   -1,  288,  289,  290,   -1,  382,
  293,   -1,  295,   -1,   -1,   -1,   -1,  390,   -1,  302,
  303,  304,   -1,   -1,  307,   -1,   -1,  310,  311,   -1,
   -1,  314,  315,   -1,   -1,   -1,  319,  320,  321,   -1,
   -1,  324,  325,  326,   -1,  328,   -1,  330,  331,  332,
  333,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,  342,
   -1,  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  355,   -1,   -1,   -1,  359,  360,   -1,  362,
   -1,   -1,  365,  456,  457,   -1,   -1,   -1,   -1,  257,
   -1,   -1,   -1,  261,   -1,   -1,   -1,   -1,   -1,  382,
  274,   -1,  385,  386,  278,  273,   -1,   -1,   -1,   -1,
  278,   -1,   -1,   -1,  288,  289,  290,  285,   -1,   -1,
  288,  295,   -1,   -1,   -1,  293,   -1,   -1,  302,  303,
  304,   -1,   -1,  307,  302,  303,  304,  311,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  319,  314,  315,   -1,   -1,
  324,  319,  320,  321,   -1,   -1,   -1,  331,  326,   -1,
   -1,   -1,  330,   -1,  332,  333,  334,   -1,   -1,   -1,
   -1,   -1,  455,  456,  342,   -1,  344,   -1,   -1,  257,
   -1,   -1,   -1,  261,   55,  359,   -1,  355,   -1,   -1,
   -1,  365,  360,   -1,  362,  273,   -1,  365,   -1,   -1,
  278,   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,   80,
  288,   -1,   -1,   -1,  382,  293,   -1,   -1,   -1,   -1,
   -1,  389,   -1,   94,  302,  303,  304,   98,   99,  100,
  101,  102,  103,  104,  105,   -1,  314,  315,   -1,   -1,
   -1,  319,  320,  321,   -1,   -1,   -1,   -1,  326,   -1,
   -1,   -1,  330,   -1,  332,  333,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  342,   -1,  344,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  355,   -1,   -1,
   -1,   -1,  360,   -1,  362,   -1,   -1,  365,  456,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,   -1,   -1,   -1,  382,  264,   -1,   -1,  267,  268,
  269,  389,  271,  272,   -1,  274,  275,  276,  277,   -1,
  279,  280,  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  292,   -1,   -1,  295,  296,   -1,   -1,
   -1,  300,  301,  302,   -1,   -1,  305,  306,   -1,   -1,
   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,  317,  318,
   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,  456,  338,
  339,  340,   -1,   -1,   -1,   -1,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,
  359,  272,   -1,   -1,   -1,  364,   -1,   -1,  367,  368,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,
   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  405,  406,  407,  408,
  409,   -1,   -1,   -1,  413,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  423,  424,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  450,   -1,   -1,   -1,  454,  455,   -1,   -1,   -1,
  459,  460,  461,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  469,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  389,  390,
  391,   -1,   -1,  394,  395,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,  256,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  264,   -1,   -1,  267,  268,   -1,   -1,  271,  272,
   -1,  274,  275,  276,  277,   -1,  279,  280,  281,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,
   -1,   -1,  295,  296,   -1,   -1,   -1,  300,  301,  302,
   -1,   -1,  305,  306,   -1,   -1,   -1,   -1,   -1,   -1,
  313,   -1,   -1,   -1,  317,  318,   -1,   -1,  321,  322,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  336,   -1,  338,  339,  340,   -1,   -1,
   -1,   -1,  345,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,  357,  358,  359,   -1,   -1,   -1,
   -1,  364,   -1,   -1,  367,  368,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,
  383,   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,  392,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  405,  406,  407,  408,  409,   -1,   -1,   -1,
  413,  274,   -1,   -1,   -1,  278,   -1,   -1,   -1,   -1,
  423,  424,   -1,   -1,   -1,  288,  289,  290,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,   -1,   -1,  302,
  303,  304,   -1,   -1,  307,   -1,  309,  450,  311,   -1,
   -1,  454,  455,   -1,   -1,   -1,  319,  460,  461,  256,
   -1,  324,   -1,   -1,  467,   -1,  469,  264,  331,   -1,
  267,  268,   -1,   -1,  271,  272,   -1,  274,  275,  276,
  277,   -1,  279,  280,  281,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  356,   -1,  292,  359,   -1,  295,  296,
   -1,   -1,  365,  300,  301,  302,   -1,   -1,  305,  306,
   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,
  317,  318,   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,
   -1,  338,  339,  340,   -1,   -1,   -1,   -1,  345,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
  357,  358,  359,   -1,   -1,   -1,   -1,  364,   -1,   -1,
  367,  368,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,
   -1,  388,   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,  406,
  407,  408,  409,   -1,   -1,   -1,  413,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  423,  424,   -1,   -1,
   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  264,
   -1,   -1,  267,  268,   -1,   -1,  271,  272,   -1,  274,
  275,  276,  277,  450,  279,  280,  281,  454,  455,   -1,
   -1,   -1,   -1,  460,  461,   -1,   -1,  292,   -1,   -1,
  295,  296,  469,   -1,   -1,  300,  301,  302,   -1,   -1,
  305,  306,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,
   -1,   -1,  317,  318,   -1,   -1,  321,  322,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  336,   -1,  338,  339,  340,   -1,   -1,   -1,   -1,
  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,  357,  358,  359,   -1,   -1,   -1,   -1,  364,
   -1,   -1,  367,  368,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,
   -1,   -1,   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  405,  406,  407,  408,  409,   -1,   -1,   -1,  413,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  423,  424,
   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  264,   -1,   -1,  267,  268,   -1,   -1,  271,  272,
   -1,  274,  275,  276,  277,  450,  279,  280,  281,  454,
  455,   -1,   -1,   -1,   -1,  460,  461,   -1,   -1,  292,
   -1,   -1,  295,  296,  469,   -1,   -1,  300,  301,  302,
   -1,   -1,  305,  306,   -1,   -1,   -1,   -1,   -1,   -1,
  313,   -1,   -1,   -1,  317,  318,   -1,   -1,  321,  322,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  336,   -1,  338,  339,  340,   -1,   -1,
   -1,   -1,  345,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,  357,  358,  359,   -1,   -1,   -1,
   -1,  364,   -1,   -1,  367,  368,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,
  383,   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,  392,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  405,  406,  407,  408,  409,   -1,   -1,   -1,
  413,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  423,  424,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  264,   -1,   -1,  267,  268,   -1,   -1,
  271,  272,   -1,  274,  275,  276,  277,  450,  279,  280,
  281,  454,  455,   -1,   -1,   -1,   -1,  460,  461,   -1,
   -1,  292,   -1,   -1,  295,  296,  469,   -1,   -1,  300,
  301,  302,   -1,   -1,  305,  306,   -1,   -1,   -1,   -1,
   -1,   -1,  313,   -1,   -1,   -1,  317,  318,   -1,   -1,
  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  336,   -1,  338,  339,  340,
   -1,   -1,   -1,   -1,  345,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,  357,  358,  359,   -1,
   -1,   -1,   -1,  364,   -1,   -1,  367,  368,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,   -1,  390,
   -1,  392,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  405,  406,  407,  408,  409,   -1,
   -1,   -1,  413,   -1,   -1,   -1,  256,   -1,   -1,   -1,
   -1,   -1,  423,  424,  264,   -1,   -1,   -1,  268,   -1,
   -1,  271,  272,   -1,   -1,   -1,  276,  277,   -1,  279,
   -1,  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  450,
   -1,   -1,  292,  454,  455,   -1,  296,   -1,   -1,  460,
  461,   -1,  302,   -1,   -1,   -1,   -1,   -1,  469,   -1,
   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,
   -1,  321,  322,   -1,   -1,  325,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  335,   -1,   -1,  338,  339,
  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,
  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,   -1,
  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,  264,   -1,
   -1,   -1,  268,   -1,   -1,  271,  406,  407,  408,  409,
  276,   -1,   -1,  413,   -1,  281,   -1,  256,   -1,   -1,
   -1,   -1,   -1,  423,  424,  264,   -1,   -1,   -1,  268,
  296,   -1,  271,  272,   -1,   -1,   -1,  276,  277,   -1,
  279,   -1,  281,   -1,   -1,   -1,   -1,  313,   -1,   -1,
  450,   -1,  318,  292,  454,  455,   -1,  296,   -1,   -1,
  460,  461,   -1,  302,   -1,   -1,   -1,   -1,   -1,  469,
   -1,   -1,  338,  339,  313,   -1,   -1,   -1,   -1,  318,
  346,   -1,  321,  322,   -1,  351,  352,   -1,   -1,   -1,
   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,
  339,  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,
   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,
  359,   -1,   -1,   -1,   -1,   -1,  392,   -1,  367,  368,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  382,  383,  411,   -1,   -1,   -1,   -1,
   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  406,  407,  408,
  409,   -1,   -1,   -1,  413,   -1,   -1,   -1,  256,   -1,
   -1,   -1,   -1,   -1,  423,  424,  264,   -1,   -1,  455,
  268,   -1,   -1,  271,  272,   -1,   -1,   -1,  276,  277,
   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  450,   -1,   -1,  292,  454,  455,   -1,  296,   -1,
   -1,  460,  461,   -1,  302,   -1,   -1,   -1,   -1,   -1,
  469,   -1,   -1,   -1,   -1,  313,   -1,   -1,  268,   -1,
  318,  271,   -1,  321,  322,   -1,  276,   -1,   -1,   -1,
   -1,  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  338,  339,  340,   -1,   -1,   -1,  296,   -1,  346,   -1,
  348,   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,
   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,  367,
  368,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,  338,  339,
   -1,   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,
   -1,  351,  352,   -1,   -1,   -1,   -1,  357,  406,  407,
  408,  409,   -1,   -1,   -1,  413,   -1,   -1,   -1,  256,
   -1,   -1,   -1,   -1,   -1,  423,  424,  264,   -1,   -1,
   -1,  268,   -1,   -1,  271,  272,   -1,   -1,   -1,  276,
  277,   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  450,   -1,   -1,  292,  454,  455,   -1,  296,
   -1,   -1,  460,  461,   -1,  302,   -1,  417,   -1,   -1,
   -1,  469,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,
   -1,  318,   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  338,  339,  340,   -1,  455,   -1,   -1,   -1,  346,
   -1,  348,   -1,  350,  351,  352,  353,  354,   -1,   -1,
  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  367,  368,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,
   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  406,
  407,  408,  409,   -1,   -1,   -1,  413,   -1,   -1,   -1,
  256,   -1,   -1,   -1,   -1,   -1,  423,  424,  264,   -1,
   -1,   -1,  268,   -1,   -1,  271,  272,   -1,   -1,   -1,
  276,  277,   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  450,   -1,   -1,  292,  454,  455,   -1,
  296,   -1,   -1,  460,  461,   -1,  302,   -1,   -1,   -1,
   -1,   -1,  469,   -1,   -1,   -1,   -1,  313,   -1,   -1,
   -1,   -1,  318,   -1,   -1,  321,  322,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  338,  339,  340,   -1,   -1,   -1,   -1,   -1,
  346,   -1,  348,   -1,  350,  351,  352,  353,  354,   -1,
   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  367,  368,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,
   -1,   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  406,  407,  408,  409,   -1,   -1,   -1,  413,   -1,   -1,
   -1,  256,   -1,   -1,   -1,   -1,   -1,  423,  424,  264,
   -1,   -1,   -1,  268,   -1,   -1,  271,  272,   -1,   -1,
   -1,  276,  277,   -1,  279,   -1,  281,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  450,   -1,   -1,  292,  454,  455,
   -1,  296,   -1,   -1,  460,  461,   -1,  302,   -1,   -1,
   -1,   -1,   -1,  469,   -1,   -1,   -1,   -1,  313,   -1,
   -1,   -1,   -1,  318,   -1,   -1,  321,  322,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  338,  339,  340,   -1,   -1,   -1,   -1,
   -1,  346,   -1,  348,   -1,  350,  351,  352,  353,  354,
   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  367,  368,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,
   -1,   -1,   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  406,  407,  408,  409,   -1,   -1,   -1,  413,   -1,
   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,  423,  424,
  264,   -1,   -1,   -1,  268,   -1,   -1,  271,  272,   -1,
   -1,   -1,  276,  277,   -1,  279,   -1,  281,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  450,   -1,   -1,  292,  454,
  455,   -1,  296,   -1,   -1,  460,  461,   -1,  302,   -1,
   -1,   -1,   -1,   -1,  469,   -1,   -1,   -1,   -1,  313,
   -1,   -1,   -1,   -1,  318,   -1,   -1,  321,  322,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  338,  339,  340,   -1,   -1,   -1,
   -1,   -1,  346,   -1,  348,   -1,  350,  351,  352,  353,
  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  367,  368,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,
   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,  392,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  406,  407,  408,  409,   -1,   -1,   -1,  413,
   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,  423,
  424,  264,   -1,   -1,   -1,  268,   -1,   -1,  271,  272,
   -1,   -1,   -1,  276,  277,   -1,  279,   -1,  281,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  450,   -1,   -1,  292,
  454,  455,   -1,  296,   -1,   -1,  460,  461,   -1,  302,
   -1,   -1,   -1,   -1,   -1,  469,   -1,   -1,   -1,   -1,
  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,  321,  322,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  338,  339,  340,   -1,   -1,
   -1,   -1,   -1,  346,   -1,  348,   -1,  350,  351,  352,
  353,  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  367,  368,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,
  383,   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,  392,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  406,  407,  408,  409,   -1,   -1,   -1,
  413,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,
  423,  424,  264,   -1,   -1,   -1,  268,   -1,   -1,  271,
  272,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,  281,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  450,   -1,   -1,
  292,  454,  455,   -1,  296,   -1,   -1,  460,  461,   -1,
  302,   -1,   -1,   -1,   -1,   -1,  469,   -1,   -1,   -1,
   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,  321,
  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,  340,   -1,
   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,  350,  351,
  352,  353,  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  367,  368,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  382,  383,   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,
  392,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  406,  407,  408,  409,   -1,   -1,
  256,  413,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,
   -1,  423,  424,  264,   -1,   -1,   -1,  268,   -1,   -1,
  271,  272,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,
  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  450,   -1,
   -1,  292,  454,  455,   -1,  296,   -1,   -1,  460,  461,
   -1,  302,   -1,   -1,  310,   -1,   -1,  469,   -1,   -1,
   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,
  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,  340,
   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,  350,
  351,  352,  353,  354,   -1,   -1,  357,  363,   -1,   -1,
   -1,  367,   -1,  369,  370,  371,  372,  373,  374,  375,
  376,  377,  378,  379,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  382,  383,  389,   -1,  391,   -1,  393,   -1,  390,
   -1,  392,   -1,  394,   -1,   -1,   -1,  403,  404,  405,
   -1,   -1,   -1,   -1,   -1,  406,  407,  408,  409,   -1,
   -1,  256,  413,   -1,   -1,  421,  256,   -1,   -1,   -1,
   -1,   -1,  423,  424,  264,   -1,   -1,   -1,  268,  435,
   -1,  271,  272,   -1,   -1,   -1,  276,  277,   -1,  279,
   -1,  281,  448,   -1,   -1,   -1,   -1,   -1,   -1,  450,
   -1,   -1,  292,  454,  455,   -1,  296,   -1,   -1,  460,
  461,  467,  302,   -1,   -1,  310,   -1,   -1,  469,   -1,
   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,
   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,
  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,
  350,  351,  352,  353,  354,   -1,   -1,  357,  363,   -1,
   -1,   -1,  367,   -1,  369,  370,  371,  372,  373,  374,
  375,  376,  377,  378,  379,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  382,  383,  389,   -1,  391,   -1,  393,   -1,
  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,  403,  404,
  405,   -1,   -1,   -1,   -1,   -1,  406,  407,  408,  409,
   -1,   -1,  256,  413,   -1,   -1,  421,  256,   -1,   -1,
   -1,   -1,   -1,  423,  424,  264,   -1,   -1,   -1,  268,
  435,   -1,  271,  272,   -1,   -1,   -1,  276,  277,   -1,
  279,   -1,  281,  448,   -1,   -1,   -1,   -1,   -1,   -1,
  450,   -1,   -1,  292,  454,  455,   -1,  296,   -1,   -1,
  460,  461,  467,  302,   -1,   -1,  310,   -1,   -1,  469,
   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,
   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,
  339,  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,
   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,  363,
   -1,   -1,   -1,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  379,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  382,  383,  389,   -1,  391,   -1,  393,
   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,  403,
  404,  405,   -1,   -1,   -1,   -1,   -1,  406,  407,  408,
  409,   -1,   -1,  256,  413,   -1,   -1,  421,  256,   -1,
   -1,   -1,   -1,   -1,  423,  424,  264,   -1,   -1,   -1,
  268,   -1,   -1,  271,  272,   -1,   -1,   -1,  276,  277,
   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  450,   -1,   -1,  292,  454,  455,   -1,  296,   -1,
   -1,  460,  461,  467,  302,   -1,   -1,  310,   -1,   -1,
  469,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,
  318,   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  338,  339,  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,
  348,   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,
  363,   -1,   -1,   -1,  367,   -1,  369,  370,  371,  372,
  373,  374,  375,  376,  377,  378,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  382,  383,  389,   -1,  391,   -1,
  393,   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,
  403,  404,  405,   -1,   -1,   -1,   -1,   -1,  406,  407,
  408,  409,   -1,   -1,   -1,  413,   -1,   -1,   -1,  256,
   -1,   -1,   -1,   -1,   -1,  423,  424,  264,   -1,   -1,
   -1,  268,   -1,   -1,  271,  272,   -1,   -1,   -1,  276,
  277,   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  450,   -1,   -1,  292,  454,  455,   -1,  296,
   -1,   -1,  460,  461,  467,  302,   -1,   -1,   -1,   -1,
   -1,  469,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,
   -1,  318,   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  338,  339,  340,   -1,   -1,   -1,   -1,   -1,  346,
   -1,  348,   -1,  350,  351,  352,  353,  354,   -1,   -1,
  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,
   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  406,
  407,  408,  409,   -1,   -1,   -1,  413,   -1,   -1,   -1,
  256,   -1,   -1,   -1,   -1,   -1,  423,  424,  264,   -1,
   -1,   -1,  268,   -1,   -1,  271,  272,   -1,   -1,   -1,
  276,  277,   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  450,   -1,   -1,  292,  454,  455,   -1,
  296,   -1,   -1,  460,  461,   -1,  302,   -1,   -1,   -1,
   -1,   -1,  469,   -1,   -1,   -1,   -1,  313,   -1,   -1,
   -1,   -1,  318,   -1,   -1,  321,  322,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  338,  339,  340,   -1,   -1,   -1,   -1,   -1,
  346,   -1,  348,   -1,  350,  351,  352,  353,  354,   -1,
   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,
   -1,   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  406,  407,  408,  409,   -1,   -1,   -1,  413,   -1,   -1,
   -1,  256,   -1,   -1,   -1,   -1,   -1,  423,  424,  264,
   -1,   -1,   -1,  268,   -1,   -1,  271,  272,   -1,   -1,
   -1,  276,  277,   -1,  279,   -1,  281,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  450,   -1,   -1,  292,  454,  455,
   -1,  296,   -1,   -1,  460,  461,   -1,  302,   -1,   -1,
   -1,   -1,   -1,  469,   -1,   -1,   -1,   -1,  313,   -1,
   -1,   -1,   -1,  318,   -1,   -1,  321,  322,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  338,  339,  340,   -1,   -1,   -1,   -1,
   -1,  346,   -1,  348,   -1,  350,  351,  352,  353,  354,
   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,
   -1,   -1,   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  406,  407,  408,  409,   -1,   -1,   -1,  413,   -1,
   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,  423,  424,
  264,   -1,   -1,   -1,  268,   -1,   -1,  271,  272,   -1,
   -1,   -1,  276,  277,   -1,  279,   -1,  281,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  450,   -1,   -1,  292,  454,
  455,   -1,  296,   -1,   -1,  460,  461,   -1,  302,   -1,
   -1,   -1,   -1,   -1,  469,   -1,   -1,   -1,   -1,  313,
   -1,   -1,   -1,   -1,  318,   -1,   -1,  321,  322,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  338,  339,  340,   -1,   -1,   -1,
   -1,   -1,  346,   -1,  348,   -1,  350,  351,  352,  353,
  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,
   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,  392,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  406,  407,  408,  409,   -1,   -1,   -1,  413,
   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,  423,
  424,  264,   -1,   -1,   -1,  268,   -1,   -1,  271,  272,
   -1,   -1,   -1,  276,  277,   -1,  279,   -1,  281,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  450,   -1,   -1,  292,
  454,  455,   -1,  296,   -1,   -1,  460,  461,   -1,  302,
   -1,   -1,   -1,   -1,   -1,  469,   -1,   -1,   -1,   -1,
  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,  321,  322,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  338,  339,  340,   -1,   -1,
   -1,   -1,   -1,  346,   -1,  348,   -1,  350,  351,  352,
  353,  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,
  383,   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,  392,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  406,  407,  408,  409,   -1,   -1,   -1,
  413,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,
  423,  424,  264,   -1,   -1,   -1,  268,   -1,   -1,  271,
  272,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,  281,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  450,   -1,   -1,
  292,  454,  455,   -1,  296,   -1,   -1,  460,  461,   -1,
  302,   -1,   -1,   -1,   -1,   -1,  469,   -1,   -1,   -1,
   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,  321,
  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,  340,   -1,
   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,  350,  351,
  352,  353,  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  382,  383,   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,
  392,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  406,  407,  408,  409,   -1,   -1,
   -1,  413,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,
   -1,  423,  424,  264,   -1,   -1,   -1,  268,   -1,   -1,
  271,  272,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,
  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  450,   -1,
   -1,  292,  454,  455,   -1,  296,   -1,   -1,  460,  461,
   -1,  302,   -1,   -1,   -1,   -1,   -1,  469,   -1,   -1,
   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,
  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,  340,
   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,  350,
  351,  352,  353,  354,   -1,   -1,  357,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,   -1,  390,
   -1,  392,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  406,  407,  408,  409,   -1,
   -1,   -1,  413,   -1,   -1,   -1,  256,   -1,   -1,   -1,
   -1,   -1,  423,  424,  264,   -1,   -1,   -1,  268,   -1,
   -1,  271,  272,   -1,   -1,   -1,  276,  277,   -1,  279,
   -1,  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  450,
   -1,   -1,  292,  454,  455,   -1,  296,   -1,   -1,  460,
  461,   -1,  302,   -1,   -1,   -1,   -1,   -1,  469,   -1,
   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,
   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,
  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,
  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,   -1,
  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  406,  407,  408,  409,
   -1,   -1,   -1,  413,   -1,   -1,   -1,  256,   -1,   -1,
   -1,   -1,   -1,  423,  424,  264,   -1,   -1,   -1,  268,
   -1,   -1,  271,  272,   -1,   -1,   -1,  276,  277,   -1,
  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  450,   -1,   -1,  292,  454,  455,   -1,  296,   -1,   -1,
  460,  461,   -1,  302,   -1,   -1,   -1,   -1,   -1,  469,
   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,
   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,
  339,  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,
   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,
   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  406,  407,  408,
  409,   -1,   -1,   -1,  413,   -1,   -1,   -1,  256,   -1,
   -1,   -1,   -1,   -1,  423,  424,  264,   -1,   -1,   -1,
  268,   -1,   -1,  271,  272,   -1,   -1,   -1,  276,  277,
   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  450,   -1,   -1,  292,  454,  455,   -1,  296,   -1,
   -1,  460,  461,   -1,  302,   -1,   -1,   -1,   -1,   -1,
  469,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,
  318,   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  338,  339,  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,
  348,   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,
   -1,   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  406,  407,
  408,  409,   -1,   -1,   -1,  413,   -1,   -1,   -1,  256,
   -1,   -1,   -1,   -1,   -1,  423,  424,  264,   -1,   -1,
   -1,  268,   -1,   -1,  271,  272,   -1,   -1,   -1,  276,
  277,   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  450,   -1,   -1,  292,  454,  455,   -1,  296,
   -1,   -1,  460,  461,   -1,  302,   -1,   -1,   -1,   -1,
   -1,  469,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,
   -1,  318,   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  338,  339,  340,   -1,   -1,   -1,   -1,   -1,  346,
   -1,  348,   -1,  350,  351,  352,  353,  354,   -1,   -1,
  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,
   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  406,
  407,  408,  409,   -1,   -1,   -1,  413,   -1,   -1,   -1,
  256,   -1,   -1,   -1,   -1,   -1,  423,  424,  264,   -1,
   -1,   -1,  268,   -1,   -1,  271,  272,   -1,   -1,   -1,
  276,  277,   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  450,   -1,   -1,  292,  454,  455,   -1,
  296,   -1,   -1,  460,  461,   -1,  302,   -1,   -1,   -1,
   -1,   -1,  469,   -1,   -1,   -1,   -1,  313,   -1,   -1,
   -1,   -1,  318,   -1,   -1,  321,  322,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  338,  339,  340,   -1,   -1,   -1,   -1,   -1,
  346,   -1,  348,   -1,  350,  351,  352,  353,  354,   -1,
   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,
   -1,   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  406,  407,  408,  409,   -1,   -1,   -1,  413,   -1,   -1,
   -1,  256,   -1,   -1,   -1,   -1,   -1,  423,  424,  264,
   -1,   -1,   -1,  268,   -1,   -1,  271,  272,   -1,   -1,
   -1,  276,  277,   -1,  279,   -1,  281,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  450,   -1,   -1,  292,  454,  455,
   -1,  296,   -1,   -1,  460,  461,   -1,  302,   -1,   -1,
   -1,   -1,   -1,  469,   -1,   -1,   -1,   -1,  313,   -1,
   -1,   -1,   -1,  318,   -1,   -1,  321,  322,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  338,  339,  340,   -1,   -1,   -1,   -1,
   -1,  346,   -1,  348,   -1,  350,  351,  352,  353,  354,
   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,
   -1,   -1,   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  406,  407,  408,  409,   -1,   -1,   -1,  413,   -1,
   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,  423,  424,
  264,   -1,   -1,   -1,  268,   -1,   -1,  271,  272,   -1,
   -1,   -1,  276,  277,   -1,  279,   -1,  281,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  450,   -1,   -1,  292,  454,
  455,   -1,  296,   -1,   -1,  460,  461,   -1,  302,   -1,
   -1,   -1,   -1,   -1,  469,   -1,   -1,   -1,   -1,  313,
   -1,   -1,   -1,   -1,  318,   -1,   -1,  321,  322,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  338,  339,  340,   -1,   -1,   -1,
   -1,   -1,  346,   -1,  348,   -1,  350,  351,  352,  353,
  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,
   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,  392,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  406,  407,  408,  409,   -1,   -1,   -1,  413,
   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,  423,
  424,  264,   -1,   -1,   -1,  268,   -1,   -1,  271,  272,
   -1,   -1,   -1,  276,  277,   -1,  279,   -1,  281,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  450,   -1,   -1,  292,
  454,  455,   -1,  296,   -1,   -1,  460,  461,   -1,  302,
   -1,   -1,   -1,   -1,   -1,  469,   -1,   -1,   -1,   -1,
  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,  321,  322,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  338,  339,  340,   -1,   -1,
   -1,   -1,   -1,  346,   -1,  348,   -1,  350,  351,  352,
  353,  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,
  383,   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,  392,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  406,  407,  408,  409,   -1,   -1,   -1,
  413,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,
  423,  424,  264,   -1,   -1,   -1,  268,   -1,   -1,  271,
  272,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,  281,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  450,   -1,   -1,
  292,  454,  455,   -1,  296,   -1,   -1,  460,  461,   -1,
  302,   -1,   -1,   -1,   -1,   -1,  469,   -1,   -1,   -1,
   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,  321,
  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,  340,   -1,
   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,  350,  351,
  352,  353,  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  382,  383,   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,
  392,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  406,  407,  408,  409,   -1,   -1,
   -1,  413,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,
   -1,  423,  424,  264,   -1,   -1,   -1,  268,   -1,   -1,
  271,  272,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,
  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  450,   -1,
   -1,  292,  454,  455,   -1,  296,   -1,   -1,  460,  461,
   -1,  302,   -1,   -1,   -1,   -1,   -1,  469,   -1,   -1,
   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,
  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,  340,
   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,  350,
  351,  352,  353,  354,   -1,   -1,  357,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,   -1,  390,
   -1,  392,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  406,  407,  408,  409,   -1,
   -1,   -1,  413,   -1,   -1,   -1,  256,   -1,   -1,   -1,
   -1,   -1,  423,  424,  264,   -1,   -1,   -1,  268,   -1,
   -1,  271,  272,   -1,   -1,   -1,  276,  277,   -1,  279,
   -1,  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  450,
   -1,   -1,  292,  454,  455,   -1,  296,   -1,   -1,  460,
  461,   -1,  302,   -1,   -1,   -1,   -1,   -1,  469,   -1,
   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,
   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,
  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,
  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,   -1,
  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  406,  407,  408,  409,
   -1,   -1,   -1,  413,   -1,   -1,   -1,  256,   -1,   -1,
   -1,   -1,   -1,  423,  424,  264,   -1,   -1,   -1,  268,
   -1,   -1,  271,  272,   -1,   -1,   -1,  276,  277,   -1,
  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  450,   -1,   -1,  292,  454,  455,   -1,  296,   -1,   -1,
  460,  461,   -1,  302,   -1,   -1,   -1,   -1,   -1,  469,
   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,
   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,
  339,  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,
   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,
   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  406,  407,  408,
  409,   -1,   -1,   -1,  413,   -1,   -1,   -1,  256,   -1,
   -1,   -1,   -1,   -1,  423,  424,  264,   -1,   -1,   -1,
  268,   -1,   -1,  271,  272,   -1,   -1,   -1,  276,  277,
   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  450,   -1,   -1,  292,  454,  455,   -1,  296,   -1,
   -1,  460,  461,   -1,  302,   -1,   -1,   -1,   -1,   -1,
  469,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,
  318,   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  338,  339,  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,
  348,   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,
   -1,   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  406,  407,
  408,  409,   -1,   -1,   -1,  413,   -1,   -1,   -1,  256,
   -1,   -1,   -1,   -1,   -1,  423,  424,  264,   -1,   -1,
   -1,  268,   -1,   -1,  271,  272,   -1,   -1,   -1,  276,
  277,   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  450,   -1,   -1,  292,  454,  455,   -1,  296,
   -1,   -1,  460,  461,   -1,  302,   -1,   -1,   -1,   -1,
   -1,  469,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,
   -1,  318,   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  338,  339,  340,   -1,   -1,   -1,   -1,   -1,  346,
   -1,  348,   -1,  350,  351,  352,  353,  354,   -1,   -1,
  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,
   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  406,
  407,  408,  409,   -1,   -1,   -1,  413,   -1,   -1,   -1,
  256,   -1,   -1,   -1,   -1,   -1,  423,  424,  264,   -1,
   -1,   -1,  268,   -1,   -1,  271,  272,   -1,   -1,   -1,
  276,  277,   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  450,   -1,   -1,  292,  454,  455,   -1,
  296,   -1,   -1,  460,  461,   -1,  302,   -1,   -1,   -1,
   -1,   -1,  469,   -1,   -1,   -1,   -1,  313,   -1,   -1,
   -1,   -1,  318,   -1,   -1,  321,  322,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  338,  339,  340,   -1,   -1,   -1,   -1,   -1,
  346,   -1,  348,   -1,  350,  351,  352,  353,  354,   -1,
   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,
   -1,   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  406,  407,  408,  409,   -1,   -1,   -1,  413,   -1,   -1,
   -1,  256,   -1,   -1,   -1,   -1,   -1,  423,  424,  264,
   -1,   -1,   -1,  268,   -1,   -1,  271,  272,   -1,   -1,
   -1,  276,  277,   -1,  279,   -1,  281,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  450,   -1,   -1,  292,  454,  455,
   -1,  296,   -1,   -1,  460,  461,   -1,  302,   -1,   -1,
   -1,   -1,   -1,  469,   -1,   -1,   -1,   -1,  313,   -1,
   -1,   -1,   -1,  318,   -1,   -1,  321,  322,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  338,  339,  340,   -1,   -1,   -1,   -1,
   -1,  346,   -1,  348,   -1,  350,  351,  352,  353,  354,
   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,
   -1,   -1,   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  406,  407,  408,  409,   -1,   -1,   -1,  413,   -1,
   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,  423,  424,
  264,   -1,   -1,   -1,  268,   -1,   -1,  271,  272,   -1,
   -1,   -1,  276,  277,   -1,  279,   -1,  281,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  450,   -1,   -1,  292,  454,
  455,   -1,  296,   -1,   -1,  460,  461,   -1,  302,   -1,
   -1,   -1,   -1,   -1,  469,   -1,   -1,   -1,   -1,  313,
   -1,   -1,   -1,   -1,  318,   -1,   -1,  321,  322,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  338,  339,  340,   -1,   -1,   -1,
   -1,   -1,  346,   -1,  348,   -1,  350,  351,  352,  353,
  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,
   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,  392,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  406,  407,  408,  409,   -1,   -1,   -1,  413,
   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,  423,
  424,  264,   -1,   -1,   -1,  268,   -1,   -1,  271,  272,
   -1,   -1,   -1,  276,  277,   -1,  279,   -1,  281,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  450,   -1,   -1,  292,
  454,  455,   -1,  296,   -1,   -1,  460,  461,   -1,  302,
   -1,   -1,   -1,   -1,   -1,  469,   -1,   -1,   -1,   -1,
  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,  321,  322,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  338,  339,  340,   -1,   -1,
   -1,   -1,   -1,  346,   -1,  348,   -1,  350,  351,  352,
  353,  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,
  383,   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,  392,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  406,  407,  408,  409,   -1,   -1,   -1,
  413,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,
  423,  424,  264,   -1,   -1,   -1,  268,   -1,   -1,  271,
  272,   -1,   -1,   -1,  276,  277,   -1,   -1,   -1,  281,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  450,   -1,   -1,
  292,  454,  455,   -1,  296,   -1,   -1,  460,  461,   -1,
  302,   -1,  256,   -1,   -1,   -1,  469,   -1,   -1,   -1,
   -1,  313,   -1,   -1,  268,   -1,  318,  271,   -1,  321,
  322,   -1,  276,   -1,   -1,   -1,   -1,  281,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,  340,   -1,
   -1,   -1,  296,   -1,  346,   -1,  348,   -1,   -1,  351,
  352,  353,  354,  256,   -1,  357,   -1,   -1,   -1,  313,
   -1,  264,   -1,   -1,  318,  268,   -1,   -1,  271,  272,
   -1,   -1,   -1,  276,  277,   -1,   -1,   -1,  281,   -1,
  382,  383,   -1,   -1,  338,  339,   -1,   -1,  390,  292,
  392,   -1,   -1,  296,   -1,   -1,   -1,  351,  352,  302,
   -1,   -1,   -1,  357,  292,   -1,   -1,  361,   -1,   -1,
  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,  321,  322,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  338,  339,  340,   -1,   -1,
   -1,   -1,   -1,  346,   -1,  348,   -1,   -1,  351,  352,
  353,  354,  454,  455,  357,   -1,  256,   -1,  460,  461,
  348,   -1,  262,  417,   -1,   -1,   -1,  469,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,
  383,   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,  392,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  455,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  310,   -1,   -1,   -1,   -1,   -1,  316,   -1,  406,  407,
  408,  409,   -1,  411,  412,  413,  414,   -1,   -1,  417,
  418,  419,  420,   -1,   -1,  423,  424,  425,  426,  427,
  428,  429,  430,   -1,  432,   -1,   -1,   -1,   -1,   -1,
   -1,  454,  455,   -1,   -1,   -1,   -1,  460,  461,   -1,
   -1,  449,   -1,  363,   -1,   -1,  469,  367,   -1,  369,
  370,  371,  372,  373,  374,  375,  376,  377,  378,  379,
  380,   -1,   -1,  383,  384,   -1,   -1,   -1,   -1,  389,
  390,  391,  392,  393,  394,  395,  396,  397,   -1,  399,
   -1,   -1,   -1,  403,  404,  405,   -1,  407,  408,   -1,
  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
  430,  431,  432,  433,  434,  435,  436,  437,  438,  439,
  440,  441,  442,  443,  444,  445,  446,  256,  448,  449,
   -1,  261,   -1,  262,   -1,  455,   -1,   -1,   -1,   -1,
  460,   -1,   -1,  273,   -1,   -1,   -1,  467,  278,   -1,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,  293,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,  310,   -1,   -1,  314,  315,   -1,  316,   -1,  319,
  320,  321,   -1,   -1,   -1,   -1,  326,   -1,   -1,   -1,
  330,   -1,  332,  333,  334,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  355,   -1,   -1,   -1,   -1,
  360,   -1,  362,   -1,  363,  365,   -1,   -1,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  379,   -1,  382,   -1,   -1,  384,   -1,   -1,   -1,  389,
  389,   -1,  391,  392,  393,  394,  395,  396,  397,   -1,
  399,   -1,   -1,   -1,  403,  404,  405,   -1,  407,  408,
   -1,  410,  411,  412,  413,  414,  415,  416,  417,  418,
  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
  429,  430,  431,  432,  433,  434,  435,  436,  437,  438,
  439,  440,  441,  442,  443,  444,  445,  446,  256,  448,
  449,   -1,  261,   -1,  262,   -1,  456,   -1,   -1,   -1,
   -1,  460,   -1,   -1,  273,   -1,   -1,   -1,  467,  278,
   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,  293,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,  310,   -1,   -1,  314,  315,   -1,  316,   -1,
  319,  320,  321,   -1,   -1,   -1,   -1,  326,   -1,   -1,
   -1,  330,   -1,  332,  333,  334,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  342,   -1,  344,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  355,   -1,   -1,   -1,
   -1,  360,   -1,  362,   -1,  363,  365,   -1,   -1,  367,
   -1,  369,  370,  371,  372,  373,  374,  375,  376,  377,
  378,  379,   -1,  382,   -1,   -1,  384,   -1,   -1,   -1,
   -1,  389,   -1,  391,  392,  393,   -1,  395,  396,  397,
   -1,  399,   -1,   -1,   -1,  403,  404,  405,   -1,  407,
  408,   -1,  410,  411,  412,  413,  414,  415,  416,  417,
  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
  428,  429,  430,  431,  432,  433,  434,  435,  436,  437,
  438,  439,  440,  441,  442,  443,  444,  445,  446,  256,
  448,  449,  261,   -1,   -1,  262,   -1,  456,   -1,   -1,
   -1,   -1,  460,   -1,   -1,   -1,   -1,   -1,   -1,  467,
   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  293,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  310,   -1,   -1,  315,   -1,   -1,  316,
   -1,  320,  321,   -1,   -1,   -1,  256,  326,   -1,   -1,
   -1,  330,  262,  332,  333,  334,   -1,   -1,  337,   -1,
   -1,   -1,   -1,  342,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  355,   -1,   -1,   -1,
   -1,  360,   -1,  362,   -1,   -1,  363,   -1,   -1,   -1,
  367,   -1,  369,  370,  371,  372,  373,  374,  375,  376,
  377,  378,  379,  382,   -1,   -1,  316,   -1,   -1,   -1,
  389,  390,  389,   -1,  391,   -1,  393,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  403,  404,  405,   -1,
  407,  408,   -1,  410,  411,  412,  413,  414,  415,  416,
  417,  418,  419,  420,  421,   -1,   -1,   -1,  425,  426,
  427,  428,  429,  430,  431,  432,  433,  434,  435,  436,
  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,
   -1,  448,  449,  383,  384,   -1,   -1,  456,   -1,   -1,
  390,   -1,  392,  393,  394,  395,  396,  397,  256,  399,
  467,   -1,   -1,  403,  262,   -1,   -1,  407,  408,   -1,
  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
  430,  431,  432,  433,  434,  435,  436,  437,  438,  439,
  440,  441,  442,  443,  444,  445,  446,   -1,  448,  449,
   -1,   -1,  310,   -1,   -1,  455,   -1,   -1,  316,   -1,
  460,   -1,   -1,   -1,   -1,   -1,   -1,  467,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,   -1,   -1,  262,   -1,  363,   -1,   -1,   -1,  367,
   -1,  369,  370,  371,  372,  373,  374,  375,  376,  377,
  378,  379,   -1,   -1,   -1,   -1,  384,   -1,   -1,   -1,
   -1,  389,   -1,  391,  392,  393,  394,  395,  396,  397,
   -1,  399,   -1,   -1,   -1,  403,  404,  405,   -1,  407,
  408,  310,   -1,  411,  412,  413,  414,  316,   -1,   -1,
   -1,   -1,  420,  421,  422,  423,  424,  425,  426,  427,
  428,  429,  430,  431,  432,  433,  434,  435,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  448,  449,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  460,   -1,  363,   -1,   -1,   -1,  367,  467,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  379,   -1,   -1,  256,   -1,  384,   -1,   -1,   -1,  262,
  389,   -1,  391,  392,  393,  394,  395,  396,  397,   -1,
  399,   -1,   -1,   -1,  403,  404,  405,   -1,  407,  408,
   -1,   -1,  411,  412,  413,  414,   -1,   -1,   -1,   -1,
   -1,  420,  421,  422,  423,  424,  425,  426,  427,  428,
  429,  430,  431,  432,  433,  434,  435,  310,   -1,   -1,
   -1,   -1,   -1,  316,   -1,   -1,   -1,   -1,   -1,  448,
  449,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  460,   -1,   -1,   -1,   -1,   -1,  256,  467,   -1,
   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  363,   -1,   -1,   -1,  367,   -1,  369,  370,  371,  372,
  373,  374,  375,  376,  377,  378,  379,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  389,   -1,  391,   -1,
  393,  310,   -1,   -1,   -1,   -1,   -1,  316,   -1,   -1,
  403,  404,  405,   -1,  407,  408,   -1,   -1,  411,  412,
  413,  414,   -1,   -1,  417,  418,  419,  420,  421,   -1,
   -1,   -1,  425,  426,  427,  428,  429,  430,  431,  432,
  433,  434,  435,   -1,   -1,   -1,  256,   -1,   -1,   -1,
   -1,   -1,  262,   -1,  363,  448,  449,   -1,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  379,   -1,   -1,   -1,  467,   -1,   -1,   -1,   -1,   -1,
  389,   -1,  391,   -1,  393,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  403,  404,  405,   -1,  407,  408,
  310,   -1,  411,  412,  413,  414,  316,   -1,   -1,   -1,
   -1,  420,  421,   -1,   -1,   -1,  425,  426,  427,  428,
  429,  430,  431,  432,  433,  434,  435,   -1,   -1,   -1,
  256,   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,  448,
  449,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  363,   -1,   -1,   -1,  367,  467,  369,
  370,  371,  372,  373,  374,  375,  376,  377,  378,  379,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  389,
   -1,  391,   -1,  393,  310,   -1,   -1,   -1,   -1,   -1,
  316,   -1,   -1,  403,  404,  405,   -1,  407,  408,   -1,
   -1,  411,  412,  413,  414,   -1,   -1,   -1,   -1,   -1,
  420,  421,   -1,   -1,   -1,  425,  426,  427,  428,  429,
  430,  431,  432,  433,  434,  435,   -1,   -1,   -1,  256,
   -1,   -1,   -1,   -1,   -1,  262,   -1,  363,  448,  449,
   -1,  367,   -1,  369,  370,  371,  372,  373,  374,  375,
  376,  377,  378,  379,   -1,   -1,   -1,  467,   -1,   -1,
   -1,   -1,   -1,  389,   -1,  391,   -1,  393,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  403,  404,  405,
   -1,  407,  408,  310,   -1,  411,  412,  413,  414,  316,
   -1,   -1,   -1,   -1,  420,  421,   -1,   -1,   -1,  425,
  426,  427,  428,  429,  430,  431,  432,  433,  434,  435,
   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  448,  449,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  363,   -1,   -1,   -1,
  367,  467,  369,  370,  371,  372,  373,  374,  375,  376,
  377,  378,  379,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  389,   -1,  391,   -1,  393,  310,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  403,  404,  405,   -1,
  407,  408,   -1,   -1,  411,  412,  413,  414,   -1,   -1,
   -1,   -1,   -1,  420,  421,  256,   -1,   -1,  425,  426,
  427,  428,  429,  430,  431,  432,  433,  434,  435,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  363,  448,  449,   -1,  367,   -1,  369,  370,  371,  372,
  373,  374,  375,  376,  377,  378,  379,   -1,   -1,   -1,
  467,   -1,   -1,   -1,   -1,   -1,  389,   -1,  391,  310,
  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  403,  404,  405,   -1,   -1,   -1,   -1,   -1,  411,  412,
  413,  414,   -1,   -1,   -1,  256,   -1,  420,  421,   -1,
   -1,   -1,  425,  426,  427,  428,  429,  430,  431,  432,
  433,  434,  435,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  363,   -1,   -1,  448,  367,   -1,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  379,   -1,
   -1,   -1,   -1,   -1,  467,   -1,   -1,   -1,  389,  310,
  391,   -1,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,
  411,  412,  413,  414,   -1,  256,   -1,   -1,   -1,  420,
  421,   -1,   -1,   -1,  425,  426,  427,  428,  429,  430,
  431,  432,  433,  434,  435,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  363,   -1,   -1,   -1,  367,  448,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  379,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  467,   -1,  389,  310,
  391,   -1,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,
  411,  412,  413,  414,   -1,  256,   -1,   -1,   -1,  420,
  421,   -1,   -1,   -1,  425,  426,  427,  428,  429,  430,
  431,  432,  433,  434,  435,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  363,   -1,   -1,   -1,  367,  448,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  379,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  467,   -1,  389,  310,
  391,   -1,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,
  411,  412,  413,  414,   -1,  256,   -1,   -1,   -1,  420,
  421,   -1,   -1,   -1,  425,  426,  427,  428,  429,  430,
  431,  432,  433,  434,  435,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  363,   -1,   -1,   -1,  367,  448,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  379,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  467,   -1,  389,  310,
  391,   -1,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,
  411,  412,  413,  414,   -1,  256,   -1,   -1,   -1,  420,
  421,   -1,   -1,   -1,   -1,   -1,   -1,  428,  429,  430,
  431,  432,  433,  434,  435,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  363,   -1,   -1,   -1,  367,  448,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  379,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  467,   -1,  389,  310,
  391,   -1,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,
  411,  412,  413,  414,   -1,  256,   -1,   -1,   -1,  420,
  421,   -1,   -1,   -1,   -1,   -1,   -1,  428,  429,  430,
  431,  432,  433,  434,  435,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  363,   -1,   -1,   -1,  367,  448,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  379,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  467,   -1,  389,  310,
  391,   -1,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,
  411,  412,  413,  414,   -1,  256,   -1,   -1,   -1,  420,
  421,   -1,   -1,   -1,   -1,   -1,   -1,  428,  429,  430,
  431,  432,  433,  434,  435,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  363,   -1,   -1,   -1,  367,  448,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  379,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  467,   -1,  389,  310,
  391,   -1,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,
  411,  412,  413,  414,   -1,  256,   -1,   -1,   -1,  420,
  421,   -1,   -1,   -1,   -1,   -1,   -1,  428,  429,  430,
  431,  432,  433,  434,  435,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  363,   -1,   -1,   -1,  367,  448,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  379,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  467,   -1,  389,  310,
  391,   -1,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,
  411,  412,  413,  414,   -1,  256,   -1,   -1,   -1,  420,
  421,   -1,   -1,   -1,   -1,   -1,   -1,  428,  429,  430,
  431,  432,  433,  434,  435,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  363,   -1,   -1,   -1,  367,  448,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  379,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  467,   -1,  389,  310,
  391,   -1,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  413,  414,   -1,  256,   -1,   -1,   -1,  420,
  421,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  430,
  431,  432,  433,  434,  435,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  363,   -1,   -1,   -1,  367,  448,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  379,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  467,   -1,  389,  310,
  391,   -1,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  413,  414,   -1,  256,   -1,   -1,   -1,  420,
  421,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  430,
  431,  432,  433,  434,  435,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  363,   -1,   -1,   -1,  367,  448,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  379,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  467,   -1,  389,  310,
  391,   -1,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  413,  414,   -1,  256,   -1,   -1,   -1,  420,
  421,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  430,
  431,  432,  433,  434,  435,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  363,   -1,   -1,   -1,  367,  448,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  379,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  467,   -1,  389,  310,
  391,   -1,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  413,  414,   -1,  256,   -1,   -1,   -1,  420,
  421,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  430,
  431,  432,  433,  434,  435,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  363,   -1,   -1,   -1,  367,  448,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  379,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  467,   -1,  389,  310,
  391,   -1,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  413,  414,   -1,  256,   -1,   -1,   -1,  420,
  421,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  430,
  431,  432,  433,  434,  435,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  363,   -1,   -1,   -1,  367,  448,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  379,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  467,   -1,  389,  310,
  391,   -1,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  413,  414,   -1,  256,   -1,   -1,   -1,  420,
  421,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  434,  435,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  363,   -1,   -1,   -1,  367,  448,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  379,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  467,   -1,  389,  310,
  391,   -1,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  414,   -1,  256,   -1,   -1,   -1,  420,
  421,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  434,  435,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  363,   -1,   -1,   -1,  367,  448,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  379,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  467,   -1,  389,  310,
  391,   -1,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  414,   -1,  256,   -1,   -1,   -1,  420,
  421,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  434,  435,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  363,   -1,   -1,   -1,  367,  448,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  379,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  467,   -1,  389,  310,
  391,   -1,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  414,   -1,  256,   -1,   -1,   -1,   -1,
  421,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  434,  435,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  363,   -1,   -1,   -1,  367,  448,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  379,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  467,   -1,  389,  310,
  391,   -1,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  414,   -1,  256,   -1,   -1,   -1,   -1,
  421,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  434,  435,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  363,   -1,   -1,   -1,  367,  448,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  379,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  467,   -1,  389,  310,
  391,   -1,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  403,  404,  405,   -1,  262,   -1,   -1,   -1,
   -1,  267,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  421,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  434,  435,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  363,   -1,   -1,   -1,  367,  448,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  379,   -1,
  316,   -1,   -1,   -1,   -1,   -1,  467,   -1,  389,   -1,
  391,   -1,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  336,   -1,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  421,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  434,  435,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  448,  384,   -1,
   -1,   -1,   -1,  389,   -1,   -1,  392,   -1,  394,  395,
  396,  397,   -1,  399,   -1,   -1,  467,   -1,  404,  405,
   -1,  407,  408,   -1,  410,  411,  412,  413,  414,  415,
  416,  417,  418,  419,  420,  421,   -1,  423,  424,  425,
  426,  427,  428,  429,  430,  431,  432,  433,  434,  435,
  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,
  446,   -1,  448,  449,   -1,  264,   -1,   -1,   -1,  268,
   -1,   -1,  271,  272,  460,   -1,   -1,  276,  277,   -1,
  279,  467,  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  268,  292,   -1,  271,   -1,  296,   -1,   -1,
  276,   -1,   -1,  302,   -1,  281,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,
  296,   -1,  321,  322,   -1,   -1,  325,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  335,  313,   -1,  338,
  339,  340,  318,   -1,   -1,   -1,   -1,  346,   -1,  348,
   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,
   -1,   -1,  338,  339,   -1,   -1,   -1,   -1,  367,  368,
   -1,   -1,   -1,   -1,   -1,  351,  352,   -1,   -1,   -1,
   -1,  357,   -1,  382,  383,  361,   -1,   -1,   -1,   -1,
   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  403,   -1,   -1,  406,  407,  408,
  409,   -1,   -1,   -1,  413,  264,   -1,  393,   -1,  268,
   -1,   -1,  271,  272,  423,  424,   -1,  276,  277,   -1,
  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  417,   -1,  292,   -1,   -1,   -1,  296,   -1,   -1,
   -1,  450,   -1,  302,   -1,  454,  455,   -1,   -1,   -1,
   -1,  460,  461,   -1,  313,   -1,   -1,   -1,   -1,  318,
  469,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,  455,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,
  339,  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,
   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,
   -1,   -1,  361,   -1,   -1,   -1,   -1,   -1,  367,  368,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,
   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  406,  407,  408,
  409,   -1,   -1,   -1,  413,  264,   -1,   -1,   -1,  268,
   -1,   -1,  271,  272,  423,  424,   -1,  276,  277,   -1,
  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  292,   -1,   -1,   -1,  296,   -1,   -1,
   -1,  450,   -1,  302,   -1,  454,  455,   -1,   -1,   -1,
   -1,  460,  461,   -1,  313,   -1,   -1,   -1,   -1,  318,
  469,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,
  339,  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,
   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,
   -1,   -1,  361,   -1,   -1,   -1,   -1,   -1,  367,  368,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,
   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  406,  407,  408,
  409,   -1,   -1,   -1,  413,  264,   -1,   -1,   -1,  268,
   -1,   -1,  271,  272,  423,  424,   -1,  276,  277,   -1,
  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  292,   -1,   -1,   -1,  296,   -1,   -1,
   -1,  450,   -1,  302,   -1,  454,  455,   -1,   -1,   -1,
   -1,  460,  461,   -1,  313,   -1,   -1,   -1,   -1,  318,
  469,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,
  339,  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,
   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,
  359,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,
   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  406,  407,  408,
  409,   -1,   -1,   -1,  413,  264,   -1,   -1,   -1,  268,
   -1,   -1,  271,  272,  423,  424,   -1,  276,  277,   -1,
  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  292,   -1,   -1,   -1,  296,   -1,   -1,
   -1,  450,   -1,  302,   -1,  454,  455,   -1,   -1,   -1,
   -1,  460,  461,   -1,  313,   -1,   -1,   -1,   -1,  318,
  469,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,
  339,  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,
   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,
   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  406,  407,  408,
  409,   -1,   -1,   -1,  413,  264,   -1,   -1,   -1,  268,
   -1,   -1,  271,  272,  423,  424,   -1,  276,  277,   -1,
  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  292,   -1,   -1,   -1,  296,   -1,   -1,
   -1,  450,   -1,  302,   -1,  454,  455,   -1,   -1,   -1,
   -1,  460,  461,   -1,  313,   -1,   -1,   -1,   -1,  318,
  469,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,
  339,  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,
   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,
   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  406,  407,  408,
  409,   -1,   -1,   -1,  413,  264,   -1,   -1,   -1,  268,
   -1,   -1,  271,  272,  423,  424,   -1,  276,  277,   -1,
  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  292,   -1,   -1,   -1,  296,   -1,   -1,
   -1,  450,   -1,  302,   -1,  454,  455,   -1,   -1,   -1,
   -1,  460,  461,   -1,  313,   -1,   -1,  256,   -1,  318,
  469,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,  268,
   -1,   -1,  271,   -1,   -1,   -1,   -1,  276,   -1,  338,
  339,  340,  281,   -1,   -1,   -1,   -1,  346,   -1,  348,
   -1,  350,  351,  352,  353,  354,   -1,  296,  357,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,
   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,
   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,  338,
  339,   -1,   -1,   -1,   -1,   -1,   -1,  406,  407,  408,
  409,   -1,  351,  352,  413,   -1,   -1,   -1,  357,   -1,
   -1,   -1,  361,   -1,  423,  424,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,
  261,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  450,  273,  274,   -1,  454,  455,  278,   -1,   -1,
   -1,  460,  461,   -1,  285,   -1,   -1,  288,  289,  290,
  469,   -1,  293,   -1,  295,   -1,   -1,   -1,  417,   -1,
   -1,  302,  303,  304,   -1,   -1,  307,   -1,  309,   -1,
  311,   -1,   -1,  314,  315,   -1,   -1,   -1,  319,  320,
  321,   -1,   -1,  324,   -1,  326,   -1,   -1,   -1,  330,
  331,  332,  333,  334,   -1,   -1,  455,  256,   -1,   -1,
   -1,  342,   -1,  344,   -1,   -1,   -1,   -1,  256,  268,
   -1,   -1,  271,   -1,  355,  356,   -1,  276,  359,  360,
  268,  362,  281,  271,  365,   -1,   -1,   -1,  276,   -1,
   -1,   -1,   -1,  281,   -1,   -1,   -1,  296,  256,   -1,
   -1,  382,   -1,   -1,   -1,   -1,   -1,   -1,  296,  390,
  268,   -1,   -1,  271,  313,   -1,   -1,   -1,  276,  318,
   -1,   -1,   -1,  281,   -1,  313,   -1,   -1,   -1,   -1,
  318,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,  338,
  339,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  338,  339,  351,  352,  262,  313,   -1,   -1,  357,   -1,
  318,   -1,  361,  351,  352,   -1,   -1,   -1,   -1,  357,
   -1,   -1,  261,  361,  263,  456,  457,   -1,   -1,   -1,
  338,  339,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  390,   -1,  351,  352,   -1,  285,   -1,   -1,  357,
   -1,   -1,   -1,  361,  293,   -1,   -1,   -1,  316,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  417,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,   -1,  417,
   -1,  320,  321,   -1,   -1,   -1,   -1,  326,   -1,   -1,
   -1,  330,   -1,  332,  333,  334,   -1,   -1,  337,   -1,
   -1,   -1,   -1,  342,   -1,   -1,  455,   -1,   -1,  417,
   -1,   -1,   -1,   -1,   -1,   -1,  355,  455,   -1,   -1,
   -1,  360,   -1,  362,   -1,   -1,  384,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  392,  393,  394,  395,  396,  397,
   -1,  399,   -1,  382,   -1,  403,   -1,  455,   -1,  407,
  408,   -1,   -1,  411,  412,  413,  414,  415,  416,  417,
  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
  428,  429,  430,  431,  432,  433,  434,  435,  436,  437,
  438,  439,  440,  441,  442,  443,  444,  445,  446,  261,
  448,  449,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  273,  460,   -1,   -1,   -1,  278,   -1,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,  288,  456,   -1,   -1,
   -1,  293,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,  309,   -1,   -1,
   -1,   -1,  314,  315,   -1,   -1,   -1,  319,  320,  321,
   -1,   -1,   -1,   -1,  326,   -1,   -1,   -1,  330,   -1,
  332,  333,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,   -1,  261,
   -1,   -1,   -1,  355,  356,   -1,   -1,   -1,  360,   -1,
  362,  273,  274,  365,   -1,   -1,  278,   -1,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,  288,  289,  290,   -1,
  382,  293,   -1,  295,   -1,   -1,   -1,  389,  390,   -1,
  302,  303,  304,   -1,   -1,  307,   -1,  309,   -1,  311,
   -1,   -1,  314,  315,   -1,   -1,   -1,  319,  320,  321,
   -1,   -1,  324,   -1,  326,   -1,   -1,   -1,  330,  331,
  332,  333,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  355,  356,   -1,   -1,  359,  360,   -1,
  362,  261,   -1,  365,  456,  457,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,  278,   -1,
  382,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,  289,
  290,   -1,   -1,  293,   -1,  295,   -1,   -1,   -1,   -1,
   -1,   -1,  302,  303,  304,   -1,   -1,  307,   -1,  309,
   -1,  311,   -1,   -1,  314,  315,   -1,   -1,   -1,  319,
  320,  321,   -1,   -1,  324,   -1,  326,   -1,   -1,   -1,
  330,  331,  332,  333,  334,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,
   -1,  261,   -1,  455,  456,  355,  356,   -1,   -1,  359,
  360,   -1,  362,  273,  274,  365,   -1,   -1,  278,   -1,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,  289,
  290,   -1,  382,  293,   -1,  295,   -1,   -1,   -1,  389,
   -1,   -1,  302,  303,  304,   -1,   -1,  307,   -1,  309,
   -1,  311,   -1,   -1,  314,  315,   -1,   -1,   -1,  319,
  320,  321,   -1,   -1,  324,   -1,  326,   -1,   -1,   -1,
  330,  331,  332,  333,  334,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,
   -1,  261,   -1,   -1,   -1,  355,  356,   -1,   -1,  359,
  360,   -1,  362,  273,  274,  365,  456,   -1,  278,   -1,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,  289,
  290,   -1,  382,  293,   -1,  295,   -1,   -1,   -1,  389,
   -1,   -1,  302,  303,  304,   -1,   -1,  307,   -1,  309,
   -1,  311,   -1,   -1,  314,  315,   -1,   -1,   -1,  319,
  320,  321,   -1,   -1,  324,   -1,  326,   -1,   -1,   -1,
  330,  331,  332,  333,  334,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,
   -1,  261,   -1,   -1,   -1,  355,  356,   -1,   -1,  359,
  360,   -1,  362,  273,  274,  365,  456,   -1,  278,   -1,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,  289,
  290,   -1,  382,  293,   -1,  295,   -1,   -1,   -1,   -1,
   -1,   -1,  302,  303,  304,   -1,   -1,  307,   -1,   -1,
   -1,  311,   -1,   -1,  314,  315,   -1,   -1,   -1,  319,
  320,  321,   -1,   -1,  324,   -1,  326,   -1,   -1,   -1,
  330,  331,  332,  333,  334,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,
   -1,  261,   -1,   -1,   -1,  355,   -1,   -1,   -1,  359,
  360,   -1,  362,  273,  274,  365,  456,   -1,  278,   -1,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,  289,
  290,   -1,  382,  293,   -1,  295,   -1,   -1,   -1,  389,
   -1,   -1,  302,  303,  304,   -1,   -1,  307,   -1,   -1,
   -1,  311,   -1,   -1,  314,  315,   -1,   -1,   -1,  319,
  320,  321,   -1,   -1,  324,   -1,  326,   -1,   -1,   -1,
  330,  331,  332,  333,  334,   -1,   -1,  261,   -1,   -1,
   -1,   -1,  342,   -1,  344,   -1,   -1,   -1,   -1,  273,
   -1,   -1,   -1,   -1,  278,  355,   -1,   -1,   -1,  359,
  360,  285,  362,   -1,  288,  365,  456,   -1,   -1,  293,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  302,  303,
  304,   -1,  382,   -1,   -1,  309,   -1,   -1,   -1,  389,
  314,  315,   -1,   -1,   -1,  319,  320,  321,   -1,   -1,
   -1,   -1,  326,   -1,   -1,   -1,  330,   -1,  332,  333,
  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  342,   -1,
  344,   -1,  261,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  355,  356,   -1,  273,   -1,  360,   -1,  362,  278,
   -1,  365,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,  293,   -1,  456,   -1,  382,   -1,
   -1,   -1,   -1,  302,  303,  304,  390,   -1,  261,   -1,
   -1,   -1,   -1,   -1,   -1,  314,  315,   -1,   -1,   -1,
  319,  320,  321,   -1,   -1,   -1,   -1,  326,   -1,   -1,
   -1,  330,  285,  332,  333,  334,   -1,   -1,   -1,   -1,
  293,   -1,   -1,  342,   -1,  344,  261,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  355,   -1,   -1,   -1,
   -1,  360,  315,  362,   -1,   -1,  365,  320,  321,   -1,
  285,   -1,  456,  326,   -1,   -1,   -1,  330,  293,  332,
  333,  334,   -1,  382,   -1,   -1,   -1,   -1,   -1,  342,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  315,   -1,  355,   -1,   -1,  320,  321,  360,   -1,  362,
   -1,  326,   -1,   -1,   -1,  330,   -1,  332,  333,  334,
   -1,   -1,   -1,   -1,  261,   -1,  263,  342,   -1,  382,
   -1,   -1,  385,  386,   -1,   -1,  389,   -1,   -1,   -1,
  355,   -1,   -1,   -1,   -1,  360,   -1,  362,  285,   -1,
   -1,   -1,   -1,   -1,   -1,  261,  293,  456,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,   -1,   -1,
  385,  386,   -1,   -1,  389,   -1,   -1,   -1,  315,  285,
   -1,   -1,   -1,  320,  321,   -1,   -1,  293,   -1,  326,
   -1,   -1,   -1,  330,   -1,  332,  333,  334,   -1,   -1,
   -1,   -1,   -1,  456,   -1,  342,   -1,   -1,  261,  315,
   -1,   -1,   -1,   -1,  320,  321,   -1,   -1,  355,   -1,
  326,   -1,   -1,  360,  330,  362,  332,  333,  334,   -1,
   -1,   -1,  285,   -1,   -1,   -1,  342,   -1,   -1,   -1,
  293,  456,   -1,   -1,   -1,  382,   -1,   -1,   -1,  355,
   -1,   -1,  389,  390,  360,   -1,  362,   -1,   -1,   -1,
   -1,  261,  315,  263,   -1,   -1,   -1,  320,  321,   -1,
   -1,   -1,   -1,  326,   -1,   -1,  382,  330,   -1,  332,
  333,  334,   -1,   -1,  337,  285,   -1,   -1,   -1,  342,
   -1,   -1,  261,  293,   -1,   -1,   -1,   -1,   -1,   -1,
  406,   -1,  355,   -1,   -1,   -1,   -1,  360,   -1,  362,
   -1,   -1,   -1,   -1,   -1,  315,  285,   -1,   -1,  456,
  320,  321,   -1,   -1,  293,   -1,  326,   -1,   -1,  382,
  330,   -1,  332,  333,  334,   -1,  389,   -1,   -1,   -1,
   -1,   -1,  342,   -1,   -1,   -1,  315,   -1,   -1,  455,
  456,  320,  321,   -1,   -1,  355,   -1,  326,   -1,   -1,
  360,  330,  362,  332,  333,  334,   -1,   -1,  261,   -1,
   -1,   -1,   -1,  342,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  382,   -1,   -1,   -1,  355,   -1,   -1,  389,
   -1,  360,  285,  362,   -1,   -1,   -1,   -1,   -1,  261,
  293,   -1,   -1,  456,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  382,   -1,   -1,  385,  386,   -1,   -1,
   -1,   -1,  315,  285,   -1,   -1,   -1,  320,  321,   -1,
   -1,  293,   -1,  326,   -1,   -1,   -1,  330,   -1,  332,
  333,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  342,
   -1,   -1,   -1,  315,   -1,   -1,  456,   -1,  320,  321,
   -1,   -1,  355,   -1,  326,   -1,   -1,  360,  330,  362,
  332,  333,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  342,   -1,   -1,  268,   -1,   -1,  271,  456,  273,  382,
   -1,  276,   -1,  355,  268,   -1,  281,  271,  360,   -1,
  362,   -1,  276,   -1,   -1,   -1,   -1,  281,   -1,   -1,
   -1,  296,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  382,   -1,  296,   -1,   -1,   -1,   -1,   -1,  313,  268,
   -1,   -1,  271,  318,   -1,   -1,  321,  276,   -1,  313,
   -1,   -1,  281,   -1,  318,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  338,  339,   -1,   -1,  296,   -1,  344,
   -1,   -1,  455,  456,  338,  339,  351,  352,   -1,   -1,
   -1,   -1,  357,   -1,  313,   -1,  361,  351,  352,  318,
   -1,   -1,   -1,  357,   -1,   -1,   -1,  361,   -1,   -1,
   -1,   -1,   -1,   -1,  456,   -1,   -1,   -1,   -1,  338,
  339,   -1,   -1,  268,   -1,   -1,  271,   -1,   -1,  383,
   -1,  276,  351,  352,   -1,   -1,  281,   -1,  357,   -1,
   -1,   -1,  361,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  296,  417,   -1,  268,   -1,   -1,  271,   -1,   -1,
   -1,   -1,  276,  417,   -1,   -1,   -1,  281,  313,   -1,
   -1,   -1,  391,  318,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  296,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  455,   -1,   -1,  338,  339,   -1,   -1,   -1,  417,  313,
  268,  455,   -1,  271,  318,   -1,  351,  352,  276,   -1,
   -1,   -1,  357,  281,   -1,   -1,  361,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  338,  339,   -1,   -1,  296,   -1,
   -1,  268,   -1,   -1,  271,   -1,  455,  351,  352,  276,
   -1,   -1,   -1,  357,  281,  313,   -1,  361,   -1,   -1,
  318,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  338,  339,  417,   -1,   -1,   -1,  313,  268,   -1,   -1,
  271,  318,   -1,  351,  352,  276,   -1,   -1,   -1,  357,
  281,   -1,   -1,  361,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  338,  339,  417,   -1,  296,   -1,   -1,  268,   -1,
  455,  271,   -1,   -1,  351,  352,  276,   -1,   -1,   -1,
  357,  281,  313,   -1,  361,   -1,   -1,  318,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,
   -1,  455,   -1,   -1,   -1,   -1,   -1,  338,  339,  417,
   -1,   -1,   -1,  313,  268,   -1,   -1,  271,  318,   -1,
  351,  352,  276,   -1,   -1,   -1,  357,  281,   -1,   -1,
  361,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,
  417,   -1,  296,   -1,   -1,   -1,   -1,  455,   -1,   -1,
   -1,  351,  352,   -1,   -1,   -1,   -1,  357,   -1,  313,
   -1,  361,   -1,   -1,  318,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  455,   -1,
   -1,   -1,   -1,   -1,  338,  339,  417,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  351,  352,   -1,
  263,   -1,   -1,  357,   -1,   -1,   -1,  361,   -1,   -1,
  273,  274,   -1,   -1,   -1,  278,   -1,  417,   -1,   -1,
   -1,   -1,   -1,   -1,  455,  288,  289,  290,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,   -1,   -1,  302,
  303,  304,   -1,   -1,  307,   -1,  309,   -1,  311,  273,
  274,  314,   -1,   -1,  278,  455,  319,   -1,   -1,   -1,
   -1,  324,   -1,  417,  288,  289,  290,   -1,  331,   -1,
   -1,  295,   -1,   -1,  337,   -1,   -1,   -1,  302,  303,
  304,  344,   -1,  307,   -1,  309,   -1,  311,   -1,   -1,
  314,   -1,   -1,  356,   -1,  319,  359,   -1,   -1,   -1,
  324,  455,  365,   -1,   -1,   -1,   -1,  331,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  344,   -1,  385,  386,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  356,   -1,   -1,  359,   -1,   -1,   -1,   -1,
   -1,  365,
  };

#line 8079 "ps-parser.jay"

// <summary>
//  A class used to hold info about an operator declarator
// </summary>
class OperatorDeclaration {
	public readonly Operator.OpType optype;
	public readonly FullNamedExpression ret_type;
	public readonly Location location;

	public OperatorDeclaration (Operator.OpType op, FullNamedExpression ret_type, Location location)
	{
		optype = op;
		this.ret_type = ret_type;
		this.location = location;
	}
}

void Error_ExpectingTypeName (Expression expr)
{
	if (expr is Invocation){
		report.Error (1002, expr.Location, "Expecting `;'");
	} else {
		expr.Error_InvalidExpressionStatement (report);
	}
}

void Error_ParameterModifierNotValid (string modifier, Location loc)
{
	report.Error (631, loc, "The parameter modifier `{0}' is not valid in this context",
			              modifier);
}

void Error_DuplicateParameterModifier (Location loc, Parameter.Modifier mod)
{
	report.Error (1107, loc, "Duplicate parameter modifier `{0}'",
  		Parameter.GetModifierSignature (mod));
}

void Error_TypeExpected (Location loc)
{
	report.Error (1031, loc, "Type expected");
}

void Error_UnsafeCodeNotAllowed (Location loc)
{
	report.Error (227, loc, "Unsafe code requires the `unsafe' command line option to be specified");
}

void Warning_EmptyStatement (Location loc)
{
	report.Warning (642, 3, loc, "Possible mistaken empty statement");
}

void Error_NamedArgumentExpected (NamedArgument a)
{
	report.Error (1738, a.Location, "Named arguments must appear after the positional arguments");
}

void Error_MissingInitializer (Location loc)
{
	report.Error (210, loc, "You must provide an initializer in a fixed or using statement declaration");
}

object Error_AwaitAsIdentifier (object token)
{
	if (async_block) {
		report.Error (4003, GetLocation (token), "`await' cannot be used as an identifier within an async method");
		return new LocatedToken ("await", GetLocation (token));
	}

	return token;
}

void push_current_container (TypeDefinition tc, object partial_token)
{
	if (module.Evaluator != null){
		tc.Definition.Modifiers = tc.ModFlags = (tc.ModFlags & ~Modifiers.AccessibilityMask) | Modifiers.PUBLIC;
		if (undo == null)
			undo = new Undo ();

		undo.AddTypeContainer (current_container, tc);
	}
	
	if (is_config_enabled) {
		if (partial_token != null)
			current_container.AddPartial (tc);
		else
			current_container.AddTypeContainer (tc);
	}
		
	++lexer.parsing_declaration;
	current_container = tc;
	current_type = tc;
}

TypeContainer pop_current_class ()
{
	var retval = current_container;

	current_container = current_container.Parent;
	current_type = current_type.Parent as TypeDefinition;

	return retval;
}

[System.Diagnostics.Conditional ("FULL_AST")]
void StoreModifierLocation (object token, Location loc)
{
	if (lbag == null)
		return;

	if (mod_locations == null)
  		mod_locations = new List<Tuple<Modifiers, Location>> ();

	mod_locations.Add (Tuple.Create ((Modifiers) token, loc));
}

[System.Diagnostics.Conditional ("FULL_AST")]
void PushLocation (Location loc)
{
	if (location_stack == null)
		location_stack = new Stack<Location> ();

	location_stack.Push (loc);
}

Location PopLocation ()
{
	if (location_stack == null)
		return Location.Null;

	return location_stack.Pop ();
}

//string CheckAttributeTarget (string a, Location l)
string CheckAttributeTarget (int token, string a, Location l)
{
	switch (a) {
	case "assembly" : case "module" : case "field" : case "method" : case "param" : case "property" : case "type" :
			return a;
	}

//	report.Warning (658, 1, l,
//		 "`{0}' is invalid attribute target. All attributes in this attribute section will be ignored", a);
	if (!Tokenizer.IsValidIdentifier (a)) {
		Error_SyntaxError (token);
	} else {
		report.Warning (658, 1, l,
		"`{0}' is invalid attribute target. All attributes in this attribute section will be ignored", a);
	}
	return string.Empty;
}

bool IsPartial (object a)
{
	var attrs = a as Attributes;
	if (attrs == null)
		return false;
	foreach (var attr in attrs.Attrs) {
		if (attr.TypeExpression.Name == "Partial")
			return true;
	}
	return false;
}

static bool IsUnaryOperator (Operator.OpType op)
{
	switch (op) {
		
	case Operator.OpType.LogicalNot: 
	case Operator.OpType.OnesComplement: 
	case Operator.OpType.Increment:
	case Operator.OpType.Decrement:
	case Operator.OpType.True: 
	case Operator.OpType.False: 
	case Operator.OpType.UnaryPlus: 
	case Operator.OpType.UnaryNegation:
		return true;
	}
	return false;
}

void syntax_error (Location l, string msg)
{
	report.Error (1003, l, "Syntax error, " + msg);
}

Tokenizer lexer;

public Tokenizer Lexer {
	get {
		return lexer;
	}
}		   

public PlayScriptParser (SeekableStreamReader reader, CompilationSourceFile file, ParserSession session)
	: this (reader, file, file.Compiler.Report, session)
{
}

public PlayScriptParser (SeekableStreamReader reader, CompilationSourceFile file, Report report, ParserSession session)
{
	this.file = file;
	current_container = current_namespace = file;
	
	this.module = file.Module;
	this.compiler = file.Compiler;
	this.settings = compiler.Settings;
	this.report = report;
	
	lang_version = settings.Version;
	yacc_verbose_flag = settings.VerboseParserFlag;
	doc_support = settings.DocumentationFile != null;
	lexer = new Tokenizer (reader, file, session, report);
	oob_stack = new Stack<object> ();
	lbag = session.LocationsBag;
	use_global_stacks = session.UseJayGlobalArrays;
	parameters_bucket = session.ParametersStack;
}

public void parse ()
{
	eof_token = Token.EOF;
	
	try {
		if (yacc_verbose_flag > 1)
			yyparse (lexer, new yydebug.yyDebugSimple ());
		else
			yyparse (lexer);
			
		Tokenizer tokenizer = lexer as Tokenizer;
		tokenizer.cleanup ();		
	} catch (Exception e){
	  	if (e is yyParser.yyUnexpectedEof) {
			Error_SyntaxError (yyToken);
			UnexpectedEOF = true;
			return;
		}
			
		if (e is yyParser.yyException) {
			if (report.Errors == 0)
				report.Error (-25, lexer.Location, "Parsing error");
		} else {
			// Used by compiler-tester to test internal errors
			if (yacc_verbose_flag > 0 || e is FatalException)
				throw;
		
			report.Error (589, lexer.Location, "Internal compiler error during parsing" + e);
		}
	}
}

void CheckToken (int error, int yyToken, string msg, Location loc)
{
	if (yyToken >= Token.FIRST_KEYWORD && yyToken <= Token.LAST_KEYWORD)
		report.Error (error, loc, "{0}: `{1}' is a keyword", msg, GetTokenName (yyToken));
	else
		report.Error (error, loc, msg);
}

string ConsumeStoredComment ()
{
	string s = tmpComment;
	tmpComment = null;
	Lexer.doc_state = XmlCommentState.Allowed;
	return s;
}

void FeatureIsNotAvailable (Location loc, string feature)
{
	report.FeatureIsNotAvailable (compiler, loc, feature);
}

Location GetLocation (object obj)
{
	var lt = obj as LocatedToken;
	if (lt != null)
		return lt.Location;
		
	var mn = obj as MemberName;
	if (mn != null)
		return mn.Location;
		
	var expr = obj as Expression;
	if (expr != null)
		return expr.Location;

	return lexer.Location;
}

void start_block (Location loc)
{
	if (current_block == null) {
		current_block = new ToplevelBlock (compiler, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else if (parsing_anonymous_method) {
		current_block = new ParametersBlock (current_block, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else {
		current_block = new ExplicitBlock (current_block, loc, Location.Null);
	}
}

Block
end_block (Location loc)
{
	Block retval = current_block.Explicit;
	retval.SetEndLocation (loc);
	current_block = retval.Parent;
	return retval;
}

void start_anonymous (ParametersCompiled parameters, FullNamedExpression retType, bool isAsync, Location loc)
{
	oob_stack.Push (current_anonymous_method);
	oob_stack.Push (current_local_parameters);
	oob_stack.Push (current_variable);
	oob_stack.Push (async_block);
	oob_stack.Push (Lexer.PrevAutoSemiInsertion);  // Auto semi will always be false after a FUNCTION keyword.. we want to know what it was before that.

	current_local_parameters = parameters;
	if (lang_version == LanguageVersion.ISO_1)
		FeatureIsNotAvailable (loc, "anonymous methods");
		
	current_anonymous_method = new AnonymousMethodExpression (loc, parameters, retType);

	async_block = isAsync;
	// Force the next block to be created as a ToplevelBlock
	parsing_anonymous_method = true;
}

/*
 * Completes the anonymous method processing
 */
AnonymousMethodExpression end_anonymous (ParametersBlock anon_block)
{
	AnonymousMethodExpression retval;

	if (async_block)
		anon_block.IsAsync = true;

	current_anonymous_method.Block = anon_block;
	retval = current_anonymous_method;

	Lexer.AutoSemiInsertion = (bool) oob_stack.Pop ();
	async_block = (bool) oob_stack.Pop ();
	current_variable = (BlockVariable) oob_stack.Pop ();
	current_local_parameters = (ParametersCompiled) oob_stack.Pop ();
	current_anonymous_method = (AnonymousMethodExpression) oob_stack.Pop ();

	return retval;
}

void Error_SyntaxError (int token)
{
	Error_SyntaxError (0, token);
}

void Error_SyntaxError (int error_code, int token)
{
	Error_SyntaxError (error_code, token, "Unexpected symbol");
}

void Error_SyntaxError (int error_code, int token, string msg)
{
	Lexer.CompleteOnEOF = false;

	// An error message has been reported by tokenizer
	if (token == Token.ERROR)
		return;
	
	// Avoid duplicit error message after unterminated string literals
	if (token == Token.LITERAL && lexer.Location.Column == 0)
		return;

	string symbol = GetSymbolName (token);
	string expecting = GetExpecting ();
	var loc = lexer.Location - symbol.Length;
	
	if (error_code == 0) {
		if (expecting == "`identifier'") {
			if (token > Token.FIRST_KEYWORD && token < Token.LAST_KEYWORD) {
				report.Error (1041, loc, "Identifier expected, `{0}' is a keyword", symbol);
				return;
			}
			
			error_code = 1001;
			expecting = "identifier";
		} else if (expecting == "`)'") {
			error_code = 1026;
		} else {
			error_code = 1525;
		}
	}
	
	if (string.IsNullOrEmpty (expecting))
		report.Error (error_code, loc, "{1} `{0}'", symbol, msg);
	else
		report.Error (error_code, loc, "{2} `{0}', expecting {1}", symbol, expecting, msg);	  
}

void CheckIsPlayScript(string elem, Location loc) 
{
	if (!parsing_playscript) {
		report.Error (7035, loc, "`{0}' only supported in PlayScript", elem);
	}

}

object ConvertAsType(SimpleName sn, object e)
{
	if (sn.Name == "Object") 
		return new TypeExpression (compiler.BuiltinTypes.Dynamic, GetLocation (e));
	else if (sn.Name == "Boolean") 
		return new TypeExpression (compiler.BuiltinTypes.Bool, GetLocation (e));
	else if (sn.Name == "Number")
		return new TypeExpression (compiler.BuiltinTypes.Double, GetLocation (e));
	else if (sn.Name == "String")
		return new TypeExpression (compiler.BuiltinTypes.String, GetLocation (e));
	else if (sn.Name == "void")
		return new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (e));
	else if (sn.Name == "Function")
		return new TypeExpression (compiler.BuiltinTypes.Delegate, GetLocation (e));
	else if (sn.Name == "Class")
		return new TypeExpression (compiler.BuiltinTypes.Type, GetLocation (e));
	else
		return e;
}

Statement ExpressionListToStatementList(List<Expression> list)
{
	if (list.Count == 1) {
		return ConvertExpressionToStatement(list[0]);
	} else if (list.Count > 1) {
		var sl = new StatementList(ConvertExpressionToStatement(list[0]), ConvertExpressionToStatement(list[1]));
		for (var i = 2; i < list.Count; i++) {
			sl.Add(ConvertExpressionToStatement(list[i]));
		}
		return sl;
	}
	
	return new StatementErrorExpression (EmptyExpression.MissingValue);
}

Statement ConvertExpressionToStatement(Expression ex)
{
	Statement ret;
	ExpressionStatement s = ex as ExpressionStatement;
	if (s == null) {
		if (Lexer.ParsingPlayScript) {
			ex.Error_InvalidExpressionStatement (report);
			ret = new StatementErrorExpression (ex);
		} else {
			ret = new AsNonAssignStatementExpression (ex);
		}
	} else {
		ret = new StatementExpression (s);
	}
	return ret;
}

Expression MakeMonoSimdType(string typeName, Location loc)
{
	return new MemberAccess(new MemberAccess(new SimpleName("Mono", loc), "Simd", loc), typeName, loc);
}

LocalVariable GetOrCreateLocalVariable(Block block, string name, LocalVariable.Flags flags, FullNamedExpression typeExpr, Location loc)
{
	INamedBlockVariable existing = null;
	LocalVariable li = null;

	if (!parsing_playscript) {
		if (block.ParametersBlock.TopBlock.GetLocalName (name, block, ref existing)) {
			if (existing is LocalVariable) {
				li = existing as LocalVariable;
				if (li.TypeExpr != null && existing.TypeExpr != null && li.TypeExpr.Equals (existing.TypeExpr)) {
					report.Warning (7138, 1, loc, "Variable is declared more than once.");
					li.DeclFlags |= LocalVariable.Flags.AsIgnoreMultiple;
					return li;
				}
			}
		}
	}
	
	li = new LocalVariable(block, name, flags, loc);
	li.TypeExpr = typeExpr;

	block.AddLocalName (li);
	
	return li;
}

string MakePrivateNamespaceName(NamespaceContainer prev_container, CompilationSourceFile file) 
{
	StringBuilder sb = new StringBuilder();
	sb.Append("_");
	sb.Append(System.IO.Path.GetFileNameWithoutExtension(file.FileName));
	sb.Append("_private");
	for (var i = 0; i < sb.Length; i++) {
		var ch = sb[i];
		if (ch != '_' && !char.IsLetterOrDigit(ch))
			sb[i] = '_';
	}
	return sb.ToString();
}

bool IsConfigVarDefined(string configVar) 
{
	string var_name = configVar.Replace("::", "_");
	return file.IsConditionalDefined (var_name) && file.GetConditionalValue (var_name) != "false";
}

string GetExpecting ()
{
	int [] tokens = yyExpectingTokens (yyExpectingState);
	var names = new List<string> (tokens.Length);
	bool has_type = false;
	bool has_identifier = false;
	for (int i = 0; i < tokens.Length; i++){
		int token = tokens [i];
		has_identifier |= token == Token.IDENTIFIER;
		
		string name = GetTokenName (token);
		if (name == "<internal>")
			continue;
			
		has_type |= name == "type";
		if (names.Contains (name))
			continue;
		
		names.Add (name);
	}

	//
	// Too many tokens to enumerate
	//
	if (names.Count > 8)
		return null;

	if (has_type && has_identifier)
		names.Remove ("identifier");

	if (names.Count == 1)
		return "`" + GetTokenName (tokens [0]) + "'";
	
	StringBuilder sb = new StringBuilder ();
	names.Sort ();
	int count = names.Count;
	for (int i = 0; i < count; i++){
		bool last = i + 1 == count;
		if (last)
			sb.Append ("or ");
		sb.Append ('`');
		sb.Append (names [i]);
		sb.Append (last ? "'" : count < 3 ? "' " : "', ");
	}
	return sb.ToString ();
}


string GetSymbolName (int token)
{
	switch (token){
	case Token.LITERAL:
		return "Literal " + ((Constant)lexer.Value).GetValue ().ToString ();
	case Token.IDENTIFIER:
	case Token.IDENTIFIER_MODIFIER:
	case Token.IDENTIFIER_CONFIG:
		return "Identifier " + ((LocatedToken)lexer.Value).Value ?? "";
	case Token.BOOL:
		return "bool";
	case Token.BOOLEAN:
		return "boolean";
	case Token.BYTE:
		return "byte";
	case Token.CHAR:
		return "char";
	case Token.VOID:
		return "void";
	case Token.DECIMAL:
		return "decimal";
	case Token.DOUBLE:
		return "double";
	case Token.DOUBLE2:
		return "double2";
	case Token.DOUBLE3:
		return "double3";
	case Token.DOUBLE4:
		return "double4";
	case Token.DYNAMIC:
		return "dynamic";
	case Token.FLOAT:
		return "float";
	case Token.FLOAT2:
		return "float2";
	case Token.FLOAT3:
		return "float3";
	case Token.FLOAT4:
		return "float4";
	case Token.INT:
		return "int";
	case Token.LONG:
		return "long";
	case Token.SBYTE:
		return "sbyte";
	case Token.SHORT:
		return "short";
	case Token.STRING:
		return "string";
	case Token.UINT:
		return "uint";
	case Token.ULONG:
		return "ulong";
	case Token.USHORT:
		return "ushort";
	case Token.OBJECT:
		return "object";
		
	case Token.PLUS:
		return "+";
	case Token.UMINUS:
	case Token.MINUS:
		return "-";
	case Token.BANG:
		return "!";
	case Token.BITWISE_AND:
		return "&";
	case Token.BITWISE_OR:
		return "|";
	case Token.LOGICAL_AND_ASSIGN:
		return "&&=";
	case Token.LOGICAL_OR_ASSIGN:
		return "||=";
	case Token.STAR:
		return "*";
	case Token.PERCENT:
		return "%";
	case Token.DIV:
		return "/";
	case Token.CARRET:
		return "^";
	case Token.OP_INC:
		return "++";
	case Token.OP_DEC:
		return "--";
	case Token.OP_SHIFT_LEFT:
		return "<<";
	case Token.OP_SHIFT_RIGHT:
		return ">>";
	case Token.OP_USHIFT_RIGHT:
		return ">>>";
	case Token.OP_LT:
		return "<";
	case Token.OP_GT:
		return ">";
	case Token.OP_LE:
		return "<=";
	case Token.OP_GE:
		return ">=";
	case Token.OP_EQ:
		return "==";
	case Token.OP_STRICT_EQ:
		return "===";
	case Token.OP_NE:
		return "!=";
	case Token.OP_AND:
		return "&&";
	case Token.OP_OR:
		return "||";
	case Token.OP_PTR:
		return "->";
	case Token.OP_IN:
		return "in";
	case Token.OP_COALESCING:	
		return "??";
	case Token.OP_MULT_ASSIGN:
		return "*=";
	case Token.OP_DIV_ASSIGN:
		return "/=";
	case Token.OP_MOD_ASSIGN:
		return "%=";
	case Token.OP_ADD_ASSIGN:
		return "+=";
	case Token.OP_SUB_ASSIGN:
		return "-=";
	case Token.OP_SHIFT_LEFT_ASSIGN:
		return "<<=";
	case Token.OP_SHIFT_RIGHT_ASSIGN:
		return ">>=";
	case Token.OP_USHIFT_RIGHT_ASSIGN:
		return ">>>=";
	case Token.OP_AND_ASSIGN:
		return "&=";
	case Token.OP_XOR_ASSIGN:
		return "^=";
	case Token.OP_OR_ASSIGN:
		return "|=";
	}

	return GetTokenName (token);
}

static string GetTokenName (int token)
{
	switch (token){
	case Token.ABSTRACT:
		return "abstract";
	case Token.AS:
		return "as";
	case Token.ADD:
		return "add";
	case Token.ASYNC:
		return "async";
	case Token.SUPER:
		return "super";
	case Token.BREAK:
		return "break";
	case Token.CASE:
		return "case";
	case Token.CATCH:
		return "catch";
	case Token.CHECKED:
		return "checked";
	case Token.CLASS:
		return "class";
	case Token.CONST:
		return "const";
	case Token.CONTINUE:
		return "continue";
	case Token.DEFAULT:
		return "default";
	case Token.DELEGATE:
		return "delegate";
	case Token.DELETE:
		return "delete";
	case Token.DO:
		return "do";
	case Token.EACH:
		return "each";
	case Token.ELSE:
		return "else";
	case Token.ENUM:
		return "enum";
	case Token.EVENT:
		return "event";
	case Token.EXPLICIT:
		return "explicit";
	case Token.EXTENDS:
		return "extends";
	case Token.EXTERN:
		return "extern";
	case Token.FALSE:
		return "false";
	case Token.FINAL:
		return "final";
	case Token.FINALLY:
		return "finally";
	case Token.FIXED:
		return "fixed";
	case Token.FOR:
		return "for";
	case Token.FOR_EACH:
		return "for each";
	case Token.FUNCTION:
		return "function";
	case Token.FUNCTION_GET:
		return "function get";
	case Token.FUNCTION_SET:
		return "function set";
	case Token.GOTO:
		return "goto";
	case Token.IF:
		return "if";
	case Token.IMPLEMENTS:
		return "implements";
	case Token.IMPLICIT:
		return "implicit";
	case Token.IMPORT:
		return "import";
	case Token.IN:
		return "in";
	case Token.INDEXER:
		return "indexer";
	case Token.INSTANCEOF:
		return "instanceof";
	case Token.INTERFACE:
		return "interface";
	case Token.INTERNAL:
		return "internal";
	case Token.IS:
		return "is";
	case Token.LOCK:
		return "lock";
	case Token.NAMESPACE:
		return "namespace";
	case Token.NATIVE:
		return "native";
	case Token.NEW:
		return "new";
	case Token.NULL:
		return "null";
	case Token.OPERATOR:
		return "operator";
	case Token.OUT:
		return "out";
	case Token.OVERRIDE:
		return "override";
	case Token.OVERLOAD:
		return "overload";
	case Token.PARAMS:
		return "params";
	case Token.PRIVATE:
		return "private";
	case Token.PROPERTY:
		return "property";
	case Token.PROTECTED:
		return "protected";
	case Token.PUBLIC:
		return "public";
	case Token.READONLY:
		return "readonly";
	case Token.REF:
		return "ref";
	case Token.RETURN:
		return "return";
	case Token.REMOVE:
		return "remove";
	case Token.SIZEOF:
		return "sizeof";
	case Token.STACKALLOC:
		return "stackalloc";
	case Token.STATIC:
		return "static";
	case Token.STRUCT:
		return "struct";
	case Token.SWITCH:
		return "switch";
	case Token.THIS:
		return "this";
	case Token.THROW:
		return "throw";
	case Token.TRUE:
		return "true";
	case Token.TRY:
		return "try";
	case Token.TYPEOF:
		return "typeof";
	case Token.UNCHECKED:
		return "unchecked";
	case Token.UNDEFINED:
		return "undefined";
	case Token.UNSAFE:
		return "unsafe";
	case Token.USE:
		return "use";
	case Token.USING:
		return "using";
	case Token.VAR:
		return "var";
	case Token.VIRTUAL:
		return "virtual";
	case Token.VOLATILE:
		return "volatile";
	case Token.WHERE:
		return "where";
	case Token.WHILE:
		return "while";
//	case Token.ARGLIST:
//		return "__arglist";
//	case Token.REFVALUE:
//		return "__refvalue";
//	case Token.REFTYPE:
//		return "__reftype";
//	case Token.MAKEREF:
//		return "__makeref";
	case Token.PARTIAL:
		return "partial";
	case Token.ARROW:
		return "=>";
	case Token.FROM:
	case Token.FROM_FIRST:
		return "from";
	case Token.JOIN:
		return "join";
	case Token.ON:
		return "on";
	case Token.EQUALS:
		return "equals";
	case Token.SELECT:
		return "select";
	case Token.GROUP:
		return "group";
	case Token.BY:
		return "by";
	case Token.LET:
		return "let";
	case Token.ORDERBY:
		return "orderby";
	case Token.ASCENDING:
		return "ascending";
	case Token.DESCENDING:
		return "descending";
	case Token.INTO:
		return "into";
	case Token.GET:
		return "get";
	case Token.SET:
		return "set";
	case Token.OPEN_BRACE:
	case Token.OPEN_BRACE_INIT:
		return "{";
	case Token.CLOSE_BRACE:
		return "}";
	case Token.OPEN_BRACKET:
	case Token.OPEN_BRACKET_EXPR:
		return "[";
	case Token.CLOSE_BRACKET:
		return "]";
	case Token.OPEN_PARENS:
		return "(";
	case Token.CLOSE_PARENS:
		return ")";
	case Token.DOT:
		return ".";
	case Token.DOT_AT:
		return ".@";
	case Token.DOT_STAR:
		return ".*";
	case Token.DOTDOT:
		return "..";
	case Token.DOTDOT_AT:
		return "..@";
	case Token.DOTDOT_STAR:
		return "..*";
	case Token.DOTDOTDOT:
		return "...";
	case Token.COMMA:
		return ",";
	case Token.DEFAULT_COLON:
		return "default:";
	case Token.COLON:
		return ":";
	case Token.SEMICOLON:
		return ";";
	case Token.TILDE:
		return "~";
		
	case Token.PLUS:
	case Token.UMINUS:
	case Token.MINUS:
	case Token.BANG:
	case Token.OP_LT:
	case Token.OP_GT:
	case Token.BITWISE_AND:
	case Token.BITWISE_OR:
	case Token.STAR:
	case Token.PERCENT:
	case Token.DIV:
	case Token.CARRET:
	case Token.OP_INC:
	case Token.OP_DEC:
	case Token.OP_SHIFT_LEFT:
	case Token.OP_SHIFT_RIGHT:
	case Token.OP_LE:
	case Token.OP_GE:
	case Token.OP_EQ:
	case Token.OP_NE:
	case Token.OP_AND:
	case Token.OP_OR:
	case Token.OP_PTR:
	case Token.OP_COALESCING:	
	case Token.OP_MULT_ASSIGN:
	case Token.OP_DIV_ASSIGN:
	case Token.OP_MOD_ASSIGN:
	case Token.OP_ADD_ASSIGN:
	case Token.OP_SUB_ASSIGN:
	case Token.OP_SHIFT_LEFT_ASSIGN:
	case Token.OP_SHIFT_RIGHT_ASSIGN:
	case Token.OP_AND_ASSIGN:
	case Token.OP_XOR_ASSIGN:
	case Token.OP_OR_ASSIGN:
	case Token.OP_AT:
		return "<operator>";

	case Token.BOOL:
	case Token.BYTE:
	case Token.CHAR:
	case Token.VOID:
	case Token.DECIMAL:
	case Token.DOUBLE:
	case Token.FLOAT:
	case Token.INT:
	case Token.LONG:
	case Token.SBYTE:
	case Token.SHORT:
	case Token.STRING:
	case Token.UINT:
	case Token.ULONG:
	case Token.USHORT:
	case Token.OBJECT:
		return "type";
	
	case Token.ASSIGN:
		return "=";
	case Token.OP_GENERICS_LT:
	case Token.GENERIC_DIMENSION:
		return ".<";
	case Token.OP_GENERICS_GT:
		return ">";
	case Token.INTERR:
	case Token.INTERR_NULLABLE:
		return "?";
	case Token.DOUBLE_COLON:
		return "::";
	case Token.LITERAL:
		return "value";
	case Token.IDENTIFIER:
	case Token.AWAIT:
		return "identifier";

	case Token.EOF:
		return "end-of-file";

		// All of these are internal.
	case Token.NONE:
	case Token.ERROR:
	case Token.FIRST_KEYWORD:
	case Token.EVAL_COMPILATION_UNIT_PARSER:
	case Token.EVAL_USING_DECLARATIONS_UNIT_PARSER:
	case Token.EVAL_STATEMENT_PARSER:
	case Token.LAST_KEYWORD:
	case Token.GENERATE_COMPLETION:
	case Token.COMPLETE_COMPLETION:
		return "<internal>";

		// A bit more robust.
	default:
		return yyNames [token];
        }
}

/* end end end */
}
#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 Console.Error.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int EOF = 257;
  public const int NONE = 258;
  public const int ERROR = 259;
  public const int FIRST_KEYWORD = 260;
  public const int ABSTRACT = 261;
  public const int AS = 262;
  public const int ADD = 263;
  public const int SUPER = 264;
  public const int BOOL = 265;
  public const int BOOLEAN = 266;
  public const int BREAK = 267;
  public const int BYTE = 268;
  public const int CASE = 269;
  public const int CATCH = 270;
  public const int CHAR = 271;
  public const int CHECKED = 272;
  public const int CLASS = 273;
  public const int CONST = 274;
  public const int CONTINUE = 275;
  public const int DECIMAL = 276;
  public const int DEFAULT = 277;
  public const int DELEGATE = 278;
  public const int DELETE = 279;
  public const int DO = 280;
  public const int DOUBLE = 281;
  public const int DOUBLE2 = 282;
  public const int DOUBLE3 = 283;
  public const int DOUBLE4 = 284;
  public const int DYNAMIC = 285;
  public const int EACH = 286;
  public const int ELSE = 287;
  public const int ENUM = 288;
  public const int EVENT = 289;
  public const int EXPLICIT = 290;
  public const int EXTENDS = 291;
  public const int FALSE = 292;
  public const int FINAL = 293;
  public const int FINALLY = 294;
  public const int FIXED = 295;
  public const int FLOAT = 296;
  public const int FLOAT2 = 297;
  public const int FLOAT3 = 298;
  public const int FLOAT4 = 299;
  public const int FOR = 300;
  public const int FOR_EACH = 301;
  public const int FUNCTION = 302;
  public const int FUNCTION_GET = 303;
  public const int FUNCTION_SET = 304;
  public const int GOTO = 305;
  public const int IF = 306;
  public const int IMPLICIT = 307;
  public const int IMPLEMENTS = 308;
  public const int IMPORT = 309;
  public const int IN = 310;
  public const int INDEXER = 311;
  public const int INSTANCEOF = 312;
  public const int INT = 313;
  public const int INTERFACE = 314;
  public const int INTERNAL = 315;
  public const int IS = 316;
  public const int LOCK = 317;
  public const int LONG = 318;
  public const int NAMESPACE = 319;
  public const int NATIVE = 320;
  public const int NEW = 321;
  public const int NULL = 322;
  public const int OBJECT = 323;
  public const int OPERATOR = 324;
  public const int OUT = 325;
  public const int OVERRIDE = 326;
  public const int OVERLOAD = 327;
  public const int PACKAGE = 328;
  public const int PARAMS = 329;
  public const int PRIVATE = 330;
  public const int PROPERTY = 331;
  public const int PROTECTED = 332;
  public const int PUBLIC = 333;
  public const int READONLY = 334;
  public const int REF = 335;
  public const int RETURN = 336;
  public const int REMOVE = 337;
  public const int SBYTE = 338;
  public const int SHORT = 339;
  public const int SIZEOF = 340;
  public const int STACKALLOC = 341;
  public const int STATIC = 342;
  public const int STRING = 343;
  public const int STRUCT = 344;
  public const int SWITCH = 345;
  public const int THIS = 346;
  public const int THROW = 347;
  public const int TRUE = 348;
  public const int TRY = 349;
  public const int TYPEOF = 350;
  public const int UINT = 351;
  public const int ULONG = 352;
  public const int UNCHECKED = 353;
  public const int UNDEFINED = 354;
  public const int UNSAFE = 355;
  public const int USE = 356;
  public const int USHORT = 357;
  public const int USING = 358;
  public const int VAR = 359;
  public const int VIRTUAL = 360;
  public const int VOID = 361;
  public const int VOLATILE = 362;
  public const int WHERE = 363;
  public const int WHILE = 364;
  public const int PARTIAL = 365;
  public const int ARROW = 366;
  public const int FROM = 367;
  public const int FROM_FIRST = 368;
  public const int JOIN = 369;
  public const int ON = 370;
  public const int EQUALS = 371;
  public const int SELECT = 372;
  public const int GROUP = 373;
  public const int BY = 374;
  public const int LET = 375;
  public const int ORDERBY = 376;
  public const int ASCENDING = 377;
  public const int DESCENDING = 378;
  public const int INTO = 379;
  public const int INTERR_NULLABLE = 380;
  public const int EXTERN = 381;
  public const int ASYNC = 382;
  public const int AWAIT = 383;
  public const int INTERR_OPERATOR = 384;
  public const int GET = 385;
  public const int SET = 386;
  public const int LAST_KEYWORD = 387;
  public const int OPEN_BRACE = 388;
  public const int CLOSE_BRACE = 389;
  public const int OPEN_BRACKET = 390;
  public const int CLOSE_BRACKET = 391;
  public const int OPEN_PARENS = 392;
  public const int CLOSE_PARENS = 393;
  public const int DOT = 394;
  public const int DOT_AT = 395;
  public const int DOT_STAR = 396;
  public const int DOTDOT = 397;
  public const int DOTDOT_AT = 398;
  public const int DOTDOT_STAR = 399;
  public const int DOTDOTDOT = 400;
  public const int DOT_OPEN_PARENS = 401;
  public const int CLOSE_PARENS_DOT = 402;
  public const int COMMA = 403;
  public const int COLON = 404;
  public const int SEMICOLON = 405;
  public const int TILDE = 406;
  public const int PLUS = 407;
  public const int MINUS = 408;
  public const int BANG = 409;
  public const int ASSIGN = 410;
  public const int OP_LT = 411;
  public const int OP_GT = 412;
  public const int BITWISE_AND = 413;
  public const int BITWISE_OR = 414;
  public const int LOGICAL_AND_ASSIGN = 415;
  public const int LOGICAL_OR_ASSIGN = 416;
  public const int STAR = 417;
  public const int PERCENT = 418;
  public const int DIV = 419;
  public const int CARRET = 420;
  public const int INTERR = 421;
  public const int DOUBLE_COLON = 422;
  public const int OP_INC = 423;
  public const int OP_DEC = 424;
  public const int OP_SHIFT_LEFT = 425;
  public const int OP_SHIFT_RIGHT = 426;
  public const int OP_USHIFT_RIGHT = 427;
  public const int OP_LE = 428;
  public const int OP_GE = 429;
  public const int OP_EQ = 430;
  public const int OP_STRICT_EQ = 431;
  public const int OP_NE = 432;
  public const int OP_STRICT_NE = 433;
  public const int OP_AND = 434;
  public const int OP_OR = 435;
  public const int OP_MULT_ASSIGN = 436;
  public const int OP_DIV_ASSIGN = 437;
  public const int OP_MOD_ASSIGN = 438;
  public const int OP_ADD_ASSIGN = 439;
  public const int OP_SUB_ASSIGN = 440;
  public const int OP_SHIFT_LEFT_ASSIGN = 441;
  public const int OP_SHIFT_RIGHT_ASSIGN = 442;
  public const int OP_USHIFT_RIGHT_ASSIGN = 443;
  public const int OP_AND_ASSIGN = 444;
  public const int OP_XOR_ASSIGN = 445;
  public const int OP_OR_ASSIGN = 446;
  public const int OP_PTR = 447;
  public const int OP_COALESCING = 448;
  public const int OP_IN = 449;
  public const int OP_AT = 450;
  public const int OP_GENERICS_LT = 451;
  public const int OP_GENERICS_LT_DECL = 452;
  public const int OP_GENERICS_GT = 453;
  public const int LITERAL = 454;
  public const int IDENTIFIER = 455;
  public const int IDENTIFIER_MODIFIER = 456;
  public const int IDENTIFIER_CONFIG = 457;
  public const int GENERIC_DIMENSION = 458;
  public const int DEFAULT_COLON = 459;
  public const int OPEN_BRACKET_EXPR = 460;
  public const int OPEN_BRACE_INIT = 461;
  public const int EVAL_STATEMENT_PARSER = 462;
  public const int EVAL_COMPILATION_UNIT_PARSER = 463;
  public const int EVAL_USING_DECLARATIONS_UNIT_PARSER = 464;
  public const int DOC_SEE = 465;
  public const int GENERATE_COMPLETION = 466;
  public const int COMPLETE_COMPLETION = 467;
  public const int UMINUS = 468;
  public const int qualified_alias_member = 469;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
