// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

#line 2 "cs-parser.jay"
//
// cs-parser.jay: The Parser for the C# compiler
//
// Authors: Miguel de Icaza (miguel@gnome.org)
//          Ravi Pratap     (ravi@ximian.com)
//          Marek Safar	    (marek.safar@gmail.com)
//
// Dual Licensed under the terms of the GNU GPL and the MIT X11 license
//
// (C) 2001 Ximian, Inc (http://www.ximian.com)
// (C) 2004-2011 Novell, Inc
// Copyright 2011-2012 Xamarin Inc.
//

using System.Text;
using System.IO;
using System;
using System.Collections.Generic;

namespace ICSharpCode.NRefactory.MonoPlayScript
{
	/// <summary>
	///    The C# Parser
	/// </summary>
	public class CSharpParser
	{
		[Flags]
		enum ParameterModifierType
		{
			Ref		= 1 << 1,
			Out		= 1 << 2,
			This	= 1 << 3,
			Params	= 1 << 4,
			Arglist	= 1 << 5,
			DefaultValue = 1 << 6,
			
			All = Ref | Out | This | Params | Arglist | DefaultValue,
			PrimaryConstructor = Ref | Out | Params | DefaultValue
		}
		
		static readonly object ModifierNone = 0;
	
		NamespaceContainer current_namespace;
		TypeContainer current_container;
		TypeDefinition current_type;
		PropertyBase current_property;
		EventProperty current_event;
		EventField current_event_field;
		FieldBase current_field;
	
		/// <summary>
		///   Current block is used to add statements as we find
		///   them.  
		/// </summary>
		Block      current_block;
		
		BlockVariable current_variable;

		Delegate   current_delegate;
		
		AnonymousMethodExpression current_anonymous_method;

		/// <summary>
		///   This is used by the unary_expression code to resolve
		///   a name against a parameter.  
		/// </summary>
		
		// FIXME: This is very ugly and it's very hard to reset it correctly
		// on all places, especially when some parameters are autogenerated.
		ParametersCompiled current_local_parameters;

		bool parsing_anonymous_method;
		
		bool async_block;

		///
		/// An out-of-band stack.
		///
		Stack<object> oob_stack;

		///
		/// Controls the verbosity of the errors produced by the parser
		///
		int yacc_verbose_flag;

		/// 
		/// Used by the interactive shell, flags whether EOF was reached
		/// and an error was produced
		///
		public bool UnexpectedEOF;

		///
		/// The current file.
		///
		readonly CompilationSourceFile file;

		///
		/// Temporary Xml documentation cache.
		/// For enum types, we need one more temporary store.
		///
		string tmpComment;
		string enumTypeComment;
	       		
		/// Current attribute target
		string current_attr_target;
		
		ParameterModifierType valid_param_mod;
		
		bool default_parameter_used;

		/// When using the interactive parser, this holds the
		/// resulting expression
		public Class InteractiveResult;

		//
		// Keeps track of global data changes to undo on parser error
		//
		public Undo undo;

		bool? interactive_async;
		
		Stack<Linq.QueryBlock> linq_clause_blocks;

		ModuleContainer module;
		
		readonly CompilerContext compiler;
		readonly LanguageVersion lang_version;
		readonly bool doc_support;
		readonly CompilerSettings settings;
		readonly Report report;
		
		//
		// Instead of allocating carrier array everytime we
		// share the bucket for very common constructs which can never
		// be recursive
		//
		List<Parameter> parameters_bucket;
		
		//
		// Full AST support members
		//
		LocationsBag lbag;
		List<Tuple<Modifiers, Location>> mod_locations;
		Stack<Location> location_stack;
#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = System.Console.Out;

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }
#pragma warning disable 649
  /* An EOF token */
  public int eof_token;
#pragma warning restore 649
  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
//t  internal yydebug.yyDebug debug;

  protected const int yyFinal = 7;
//t // Put this array into a separate class so it is only initialized if debugging is actually used
//t // Use MarshalByRefObject to disable inlining
//t class YYRules : MarshalByRefObject {
//t  public static readonly string [] yyRule = {
//t    "$accept : compilation_unit",
//t    "compilation_unit : outer_declaration opt_EOF",
//t    "$$1 :",
//t    "compilation_unit : interactive_parsing $$1 opt_EOF",
//t    "compilation_unit : documentation_parsing",
//t    "outer_declaration : opt_extern_alias_directives opt_using_directives",
//t    "outer_declaration : opt_extern_alias_directives opt_using_directives namespace_or_type_declarations opt_attributes",
//t    "outer_declaration : opt_extern_alias_directives opt_using_directives attribute_sections",
//t    "outer_declaration : error",
//t    "opt_EOF :",
//t    "opt_EOF : EOF",
//t    "extern_alias_directives : extern_alias_directive",
//t    "extern_alias_directives : extern_alias_directives extern_alias_directive",
//t    "extern_alias_directive : EXTERN_ALIAS IDENTIFIER IDENTIFIER SEMICOLON",
//t    "extern_alias_directive : EXTERN_ALIAS error",
//t    "using_directives : using_directive",
//t    "using_directives : using_directives using_directive",
//t    "using_directive : using_namespace",
//t    "using_namespace : USING namespace_or_type_expr SEMICOLON",
//t    "using_namespace : USING IDENTIFIER ASSIGN namespace_or_type_expr SEMICOLON",
//t    "using_namespace : USING error",
//t    "$$2 :",
//t    "$$3 :",
//t    "namespace_declaration : opt_attributes NAMESPACE namespace_name $$2 OPEN_BRACE $$3 opt_extern_alias_directives opt_using_directives opt_namespace_or_type_declarations CLOSE_BRACE opt_semicolon_error",
//t    "namespace_declaration : opt_attributes NAMESPACE namespace_name",
//t    "opt_semicolon_error :",
//t    "opt_semicolon_error : SEMICOLON",
//t    "opt_semicolon_error : error",
//t    "namespace_name : IDENTIFIER",
//t    "namespace_name : namespace_name DOT IDENTIFIER",
//t    "namespace_name : error",
//t    "opt_semicolon :",
//t    "opt_semicolon : SEMICOLON",
//t    "opt_comma :",
//t    "opt_comma : COMMA",
//t    "opt_using_directives :",
//t    "opt_using_directives : using_directives",
//t    "opt_extern_alias_directives :",
//t    "opt_extern_alias_directives : extern_alias_directives",
//t    "opt_namespace_or_type_declarations :",
//t    "opt_namespace_or_type_declarations : namespace_or_type_declarations",
//t    "namespace_or_type_declarations : namespace_or_type_declaration",
//t    "namespace_or_type_declarations : namespace_or_type_declarations namespace_or_type_declaration",
//t    "namespace_or_type_declaration : type_declaration",
//t    "namespace_or_type_declaration : namespace_declaration",
//t    "namespace_or_type_declaration : attribute_sections CLOSE_BRACE",
//t    "type_declaration : class_declaration",
//t    "type_declaration : struct_declaration",
//t    "type_declaration : interface_declaration",
//t    "type_declaration : enum_declaration",
//t    "type_declaration : delegate_declaration",
//t    "opt_attributes :",
//t    "opt_attributes : attribute_sections",
//t    "attribute_sections : attribute_section",
//t    "attribute_sections : attribute_sections attribute_section",
//t    "$$4 :",
//t    "attribute_section : OPEN_BRACKET $$4 attribute_section_cont",
//t    "$$5 :",
//t    "attribute_section_cont : attribute_target COLON $$5 attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_section_cont : attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_section_cont : IDENTIFIER error",
//t    "attribute_section_cont : error",
//t    "attribute_target : IDENTIFIER",
//t    "attribute_target : EVENT",
//t    "attribute_target : RETURN",
//t    "attribute_list : attribute",
//t    "attribute_list : attribute_list COMMA attribute",
//t    "$$6 :",
//t    "attribute : attribute_name $$6 opt_attribute_arguments",
//t    "attribute_name : namespace_or_type_expr",
//t    "opt_attribute_arguments :",
//t    "opt_attribute_arguments : OPEN_PARENS attribute_arguments CLOSE_PARENS",
//t    "attribute_arguments :",
//t    "attribute_arguments : positional_or_named_argument",
//t    "attribute_arguments : named_attribute_argument",
//t    "attribute_arguments : attribute_arguments COMMA positional_or_named_argument",
//t    "attribute_arguments : attribute_arguments COMMA named_attribute_argument",
//t    "positional_or_named_argument : expression",
//t    "positional_or_named_argument : named_argument",
//t    "positional_or_named_argument : error",
//t    "$$7 :",
//t    "named_attribute_argument : IDENTIFIER ASSIGN $$7 expression",
//t    "named_argument : identifier_inside_body COLON opt_named_modifier named_argument_expr",
//t    "named_argument_expr : expression_or_error",
//t    "opt_named_modifier :",
//t    "opt_named_modifier : REF",
//t    "opt_named_modifier : OUT",
//t    "opt_class_member_declarations :",
//t    "opt_class_member_declarations : class_member_declarations",
//t    "class_member_declarations : class_member_declaration",
//t    "class_member_declarations : class_member_declarations class_member_declaration",
//t    "class_member_declaration : constant_declaration",
//t    "class_member_declaration : field_declaration",
//t    "class_member_declaration : method_declaration",
//t    "class_member_declaration : property_declaration",
//t    "class_member_declaration : event_declaration",
//t    "class_member_declaration : indexer_declaration",
//t    "class_member_declaration : operator_declaration",
//t    "class_member_declaration : constructor_declaration",
//t    "class_member_declaration : primary_constructor_body",
//t    "class_member_declaration : destructor_declaration",
//t    "class_member_declaration : type_declaration",
//t    "class_member_declaration : attributes_without_members",
//t    "class_member_declaration : incomplete_member",
//t    "class_member_declaration : error",
//t    "$$8 :",
//t    "primary_constructor_body : OPEN_BRACE $$8 opt_statement_list block_end",
//t    "$$9 :",
//t    "$$10 :",
//t    "$$11 :",
//t    "$$12 :",
//t    "$$13 :",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT $$9 type_declaration_name $$10 opt_primary_parameters opt_class_base opt_type_parameter_constraints_clauses $$11 OPEN_BRACE $$12 opt_class_member_declarations CLOSE_BRACE $$13 opt_semicolon",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT error",
//t    "$$14 :",
//t    "constant_declaration : opt_attributes opt_modifiers CONST type IDENTIFIER $$14 constant_initializer opt_constant_declarators SEMICOLON",
//t    "constant_declaration : opt_attributes opt_modifiers CONST type error",
//t    "opt_constant_declarators :",
//t    "opt_constant_declarators : constant_declarators",
//t    "constant_declarators : constant_declarator",
//t    "constant_declarators : constant_declarators constant_declarator",
//t    "constant_declarator : COMMA IDENTIFIER constant_initializer",
//t    "$$15 :",
//t    "constant_initializer : ASSIGN $$15 constant_initializer_expr",
//t    "constant_initializer : error",
//t    "constant_initializer_expr : constant_expression",
//t    "constant_initializer_expr : array_initializer",
//t    "$$16 :",
//t    "field_declaration : opt_attributes opt_modifiers member_type IDENTIFIER $$16 opt_field_initializer opt_field_declarators SEMICOLON",
//t    "$$17 :",
//t    "field_declaration : opt_attributes opt_modifiers FIXED simple_type IDENTIFIER $$17 fixed_field_size opt_fixed_field_declarators SEMICOLON",
//t    "field_declaration : opt_attributes opt_modifiers FIXED simple_type error SEMICOLON",
//t    "opt_field_initializer :",
//t    "$$18 :",
//t    "opt_field_initializer : ASSIGN $$18 variable_initializer",
//t    "opt_field_declarators :",
//t    "opt_field_declarators : field_declarators",
//t    "field_declarators : field_declarator",
//t    "field_declarators : field_declarators field_declarator",
//t    "field_declarator : COMMA IDENTIFIER",
//t    "$$19 :",
//t    "field_declarator : COMMA IDENTIFIER ASSIGN $$19 variable_initializer",
//t    "opt_fixed_field_declarators :",
//t    "opt_fixed_field_declarators : fixed_field_declarators",
//t    "fixed_field_declarators : fixed_field_declarator",
//t    "fixed_field_declarators : fixed_field_declarators fixed_field_declarator",
//t    "fixed_field_declarator : COMMA IDENTIFIER fixed_field_size",
//t    "$$20 :",
//t    "fixed_field_size : OPEN_BRACKET $$20 expression CLOSE_BRACKET",
//t    "fixed_field_size : OPEN_BRACKET error",
//t    "variable_initializer : expression",
//t    "variable_initializer : array_initializer",
//t    "variable_initializer : error",
//t    "$$21 :",
//t    "method_declaration : method_header $$21 method_body_expression_block",
//t    "$$22 :",
//t    "$$23 :",
//t    "method_header : opt_attributes opt_modifiers member_type method_declaration_name OPEN_PARENS $$22 opt_formal_parameter_list CLOSE_PARENS $$23 opt_type_parameter_constraints_clauses",
//t    "$$24 :",
//t    "$$25 :",
//t    "$$26 :",
//t    "method_header : opt_attributes opt_modifiers PARTIAL VOID $$24 method_declaration_name OPEN_PARENS $$25 opt_formal_parameter_list CLOSE_PARENS $$26 opt_type_parameter_constraints_clauses",
//t    "method_header : opt_attributes opt_modifiers member_type modifiers method_declaration_name OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS",
//t    "method_header : opt_attributes opt_modifiers member_type method_declaration_name error",
//t    "method_body_expression_block : method_body",
//t    "method_body_expression_block : expression_block",
//t    "method_body : block",
//t    "method_body : SEMICOLON",
//t    "$$27 :",
//t    "expression_block : ARROW $$27 expression SEMICOLON",
//t    "opt_formal_parameter_list :",
//t    "opt_formal_parameter_list : formal_parameter_list",
//t    "formal_parameter_list : fixed_parameters",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array",
//t    "formal_parameter_list : fixed_parameters COMMA arglist_modifier",
//t    "formal_parameter_list : parameter_array COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array COMMA error",
//t    "formal_parameter_list : arglist_modifier COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA ARGLIST COMMA error",
//t    "formal_parameter_list : parameter_array",
//t    "formal_parameter_list : arglist_modifier",
//t    "formal_parameter_list : error",
//t    "fixed_parameters : fixed_parameter",
//t    "fixed_parameters : fixed_parameters COMMA fixed_parameter",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type identifier_inside_body",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type identifier_inside_body OPEN_BRACKET CLOSE_BRACKET",
//t    "fixed_parameter : attribute_sections error",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type error",
//t    "$$28 :",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type identifier_inside_body ASSIGN $$28 constant_expression",
//t    "opt_parameter_modifier :",
//t    "opt_parameter_modifier : parameter_modifiers",
//t    "parameter_modifiers : parameter_modifier",
//t    "parameter_modifiers : parameter_modifiers parameter_modifier",
//t    "parameter_modifier : REF",
//t    "parameter_modifier : OUT",
//t    "parameter_modifier : THIS",
//t    "parameter_array : opt_attributes params_modifier type IDENTIFIER",
//t    "parameter_array : opt_attributes params_modifier type IDENTIFIER ASSIGN constant_expression",
//t    "parameter_array : opt_attributes params_modifier type error",
//t    "params_modifier : PARAMS",
//t    "params_modifier : PARAMS parameter_modifier",
//t    "params_modifier : PARAMS params_modifier",
//t    "arglist_modifier : ARGLIST",
//t    "$$29 :",
//t    "$$30 :",
//t    "$$31 :",
//t    "$$32 :",
//t    "property_declaration : opt_attributes opt_modifiers member_type member_declaration_name $$29 OPEN_BRACE $$30 accessor_declarations $$31 CLOSE_BRACE $$32 opt_property_initializer",
//t    "$$33 :",
//t    "property_declaration : opt_attributes opt_modifiers member_type member_declaration_name $$33 expression_block",
//t    "opt_property_initializer :",
//t    "$$34 :",
//t    "opt_property_initializer : ASSIGN $$34 property_initializer SEMICOLON",
//t    "property_initializer : expression",
//t    "property_initializer : array_initializer",
//t    "$$35 :",
//t    "$$36 :",
//t    "indexer_declaration : opt_attributes opt_modifiers member_type indexer_declaration_name OPEN_BRACKET $$35 opt_formal_parameter_list CLOSE_BRACKET $$36 indexer_body",
//t    "indexer_body : OPEN_BRACE accessor_declarations CLOSE_BRACE",
//t    "indexer_body : expression_block",
//t    "accessor_declarations : get_accessor_declaration",
//t    "accessor_declarations : get_accessor_declaration accessor_declarations",
//t    "accessor_declarations : set_accessor_declaration",
//t    "accessor_declarations : set_accessor_declaration accessor_declarations",
//t    "accessor_declarations : error",
//t    "$$37 :",
//t    "get_accessor_declaration : opt_attributes opt_modifiers GET $$37 accessor_body",
//t    "$$38 :",
//t    "set_accessor_declaration : opt_attributes opt_modifiers SET $$38 accessor_body",
//t    "accessor_body : block",
//t    "accessor_body : SEMICOLON",
//t    "accessor_body : error",
//t    "$$39 :",
//t    "$$40 :",
//t    "$$41 :",
//t    "$$42 :",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE $$39 type_declaration_name $$40 opt_class_base opt_type_parameter_constraints_clauses $$41 OPEN_BRACE opt_interface_member_declarations CLOSE_BRACE $$42 opt_semicolon",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE error",
//t    "opt_interface_member_declarations :",
//t    "opt_interface_member_declarations : interface_member_declarations",
//t    "interface_member_declarations : interface_member_declaration",
//t    "interface_member_declarations : interface_member_declarations interface_member_declaration",
//t    "interface_member_declaration : constant_declaration",
//t    "interface_member_declaration : field_declaration",
//t    "interface_member_declaration : method_declaration",
//t    "interface_member_declaration : property_declaration",
//t    "interface_member_declaration : event_declaration",
//t    "interface_member_declaration : indexer_declaration",
//t    "interface_member_declaration : operator_declaration",
//t    "interface_member_declaration : constructor_declaration",
//t    "interface_member_declaration : type_declaration",
//t    "$$43 :",
//t    "operator_declaration : opt_attributes opt_modifiers operator_declarator $$43 method_body_expression_block",
//t    "operator_type : type_expression_or_array",
//t    "operator_type : VOID",
//t    "$$44 :",
//t    "operator_declarator : operator_type OPERATOR overloadable_operator OPEN_PARENS $$44 opt_formal_parameter_list CLOSE_PARENS",
//t    "operator_declarator : conversion_operator_declarator",
//t    "overloadable_operator : BANG",
//t    "overloadable_operator : TILDE",
//t    "overloadable_operator : OP_INC",
//t    "overloadable_operator : OP_DEC",
//t    "overloadable_operator : TRUE",
//t    "overloadable_operator : FALSE",
//t    "overloadable_operator : PLUS",
//t    "overloadable_operator : MINUS",
//t    "overloadable_operator : STAR",
//t    "overloadable_operator : DIV",
//t    "overloadable_operator : PERCENT",
//t    "overloadable_operator : BITWISE_AND",
//t    "overloadable_operator : BITWISE_OR",
//t    "overloadable_operator : CARRET",
//t    "overloadable_operator : OP_SHIFT_LEFT",
//t    "overloadable_operator : OP_SHIFT_RIGHT",
//t    "overloadable_operator : OP_EQ",
//t    "overloadable_operator : OP_NE",
//t    "overloadable_operator : OP_GT",
//t    "overloadable_operator : OP_LT",
//t    "overloadable_operator : OP_GE",
//t    "overloadable_operator : OP_LE",
//t    "overloadable_operator : IS",
//t    "$$45 :",
//t    "conversion_operator_declarator : IMPLICIT OPERATOR type OPEN_PARENS $$45 opt_formal_parameter_list CLOSE_PARENS",
//t    "$$46 :",
//t    "conversion_operator_declarator : EXPLICIT OPERATOR type OPEN_PARENS $$46 opt_formal_parameter_list CLOSE_PARENS",
//t    "conversion_operator_declarator : IMPLICIT error",
//t    "conversion_operator_declarator : EXPLICIT error",
//t    "constructor_declaration : constructor_declarator constructor_body",
//t    "$$47 :",
//t    "$$48 :",
//t    "constructor_declarator : opt_attributes opt_modifiers IDENTIFIER $$47 OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS $$48 opt_constructor_initializer",
//t    "constructor_body : block_prepared",
//t    "constructor_body : SEMICOLON",
//t    "opt_constructor_initializer :",
//t    "opt_constructor_initializer : constructor_initializer",
//t    "$$49 :",
//t    "constructor_initializer : COLON BASE OPEN_PARENS $$49 opt_argument_list CLOSE_PARENS",
//t    "$$50 :",
//t    "constructor_initializer : COLON THIS OPEN_PARENS $$50 opt_argument_list CLOSE_PARENS",
//t    "constructor_initializer : COLON error",
//t    "constructor_initializer : error",
//t    "$$51 :",
//t    "destructor_declaration : opt_attributes opt_modifiers TILDE $$51 IDENTIFIER OPEN_PARENS CLOSE_PARENS method_body",
//t    "$$52 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name $$52 opt_event_initializer opt_event_declarators SEMICOLON",
//t    "$$53 :",
//t    "$$54 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name OPEN_BRACE $$53 event_accessor_declarations $$54 CLOSE_BRACE",
//t    "event_declaration : opt_attributes opt_modifiers EVENT type error",
//t    "opt_event_initializer :",
//t    "$$55 :",
//t    "opt_event_initializer : ASSIGN $$55 event_variable_initializer",
//t    "opt_event_declarators :",
//t    "opt_event_declarators : event_declarators",
//t    "event_declarators : event_declarator",
//t    "event_declarators : event_declarators event_declarator",
//t    "event_declarator : COMMA IDENTIFIER",
//t    "$$56 :",
//t    "event_declarator : COMMA IDENTIFIER ASSIGN $$56 event_variable_initializer",
//t    "$$57 :",
//t    "event_variable_initializer : $$57 variable_initializer",
//t    "event_accessor_declarations : add_accessor_declaration remove_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration add_accessor_declaration",
//t    "event_accessor_declarations : add_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration",
//t    "event_accessor_declarations : error",
//t    "$$58 :",
//t    "add_accessor_declaration : opt_attributes opt_modifiers ADD $$58 event_accessor_block",
//t    "$$59 :",
//t    "remove_accessor_declaration : opt_attributes opt_modifiers REMOVE $$59 event_accessor_block",
//t    "event_accessor_block : opt_semicolon",
//t    "event_accessor_block : block",
//t    "attributes_without_members : attribute_sections CLOSE_BRACE",
//t    "incomplete_member : opt_attributes opt_modifiers member_type CLOSE_BRACE",
//t    "$$60 :",
//t    "$$61 :",
//t    "$$62 :",
//t    "enum_declaration : opt_attributes opt_modifiers ENUM type_declaration_name opt_enum_base $$60 OPEN_BRACE $$61 opt_enum_member_declarations $$62 CLOSE_BRACE opt_semicolon",
//t    "opt_enum_base :",
//t    "opt_enum_base : COLON type",
//t    "opt_enum_base : COLON error",
//t    "opt_enum_member_declarations :",
//t    "opt_enum_member_declarations : enum_member_declarations",
//t    "opt_enum_member_declarations : enum_member_declarations COMMA",
//t    "enum_member_declarations : enum_member_declaration",
//t    "enum_member_declarations : enum_member_declarations COMMA enum_member_declaration",
//t    "enum_member_declaration : opt_attributes IDENTIFIER",
//t    "$$63 :",
//t    "enum_member_declaration : opt_attributes IDENTIFIER $$63 ASSIGN constant_expression",
//t    "enum_member_declaration : opt_attributes IDENTIFIER error",
//t    "enum_member_declaration : attributes_without_members",
//t    "$$64 :",
//t    "$$65 :",
//t    "$$66 :",
//t    "delegate_declaration : opt_attributes opt_modifiers DELEGATE member_type type_declaration_name OPEN_PARENS $$64 opt_formal_parameter_list CLOSE_PARENS $$65 opt_type_parameter_constraints_clauses $$66 SEMICOLON",
//t    "opt_nullable :",
//t    "opt_nullable : INTERR_NULLABLE",
//t    "namespace_or_type_expr : member_name",
//t    "namespace_or_type_expr : qualified_alias_member IDENTIFIER opt_type_argument_list",
//t    "namespace_or_type_expr : qualified_alias_member IDENTIFIER generic_dimension",
//t    "member_name : simple_name_expr",
//t    "member_name : namespace_or_type_expr DOT IDENTIFIER opt_type_argument_list",
//t    "member_name : namespace_or_type_expr DOT IDENTIFIER generic_dimension",
//t    "simple_name_expr : IDENTIFIER opt_type_argument_list",
//t    "simple_name_expr : IDENTIFIER generic_dimension",
//t    "opt_type_argument_list :",
//t    "opt_type_argument_list : OP_GENERICS_LT type_arguments OP_GENERICS_GT",
//t    "opt_type_argument_list : OP_GENERICS_LT error",
//t    "type_arguments : type",
//t    "type_arguments : type_arguments COMMA type",
//t    "$$67 :",
//t    "type_declaration_name : IDENTIFIER $$67 opt_type_parameter_list",
//t    "member_declaration_name : method_declaration_name",
//t    "method_declaration_name : type_declaration_name",
//t    "method_declaration_name : explicit_interface IDENTIFIER opt_type_parameter_list",
//t    "indexer_declaration_name : THIS",
//t    "indexer_declaration_name : explicit_interface THIS",
//t    "explicit_interface : IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : qualified_alias_member IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : explicit_interface IDENTIFIER opt_type_argument_list DOT",
//t    "opt_type_parameter_list :",
//t    "opt_type_parameter_list : OP_GENERICS_LT_DECL type_parameters OP_GENERICS_GT",
//t    "type_parameters : type_parameter",
//t    "type_parameters : type_parameters COMMA type_parameter",
//t    "type_parameter : opt_attributes opt_type_parameter_variance IDENTIFIER",
//t    "type_parameter : error",
//t    "type_and_void : type_expression_or_array",
//t    "type_and_void : VOID",
//t    "member_type : type_and_void",
//t    "type : type_expression_or_array",
//t    "type : void_invalid",
//t    "simple_type : type_expression",
//t    "simple_type : void_invalid",
//t    "parameter_type : type_expression_or_array",
//t    "parameter_type : VOID",
//t    "type_expression_or_array : type_expression",
//t    "type_expression_or_array : type_expression rank_specifiers",
//t    "type_expression : namespace_or_type_expr opt_nullable",
//t    "type_expression : namespace_or_type_expr pointer_stars",
//t    "type_expression : builtin_type_expression",
//t    "void_invalid : VOID",
//t    "builtin_type_expression : builtin_types opt_nullable",
//t    "builtin_type_expression : builtin_types pointer_stars",
//t    "builtin_type_expression : VOID pointer_stars",
//t    "type_list : base_type_name",
//t    "type_list : type_list COMMA base_type_name",
//t    "base_type_name : type",
//t    "builtin_types : OBJECT",
//t    "builtin_types : STRING",
//t    "builtin_types : BOOL",
//t    "builtin_types : DECIMAL",
//t    "builtin_types : FLOAT",
//t    "builtin_types : DOUBLE",
//t    "builtin_types : integral_type",
//t    "integral_type : SBYTE",
//t    "integral_type : BYTE",
//t    "integral_type : SHORT",
//t    "integral_type : USHORT",
//t    "integral_type : INT",
//t    "integral_type : UINT",
//t    "integral_type : LONG",
//t    "integral_type : ULONG",
//t    "integral_type : CHAR",
//t    "primary_expression : type_name_expression",
//t    "primary_expression : literal",
//t    "primary_expression : array_creation_expression",
//t    "primary_expression : parenthesized_expression",
//t    "primary_expression : default_value_expression",
//t    "primary_expression : invocation_expression",
//t    "primary_expression : element_access",
//t    "primary_expression : this_access",
//t    "primary_expression : base_access",
//t    "primary_expression : post_increment_expression",
//t    "primary_expression : post_decrement_expression",
//t    "primary_expression : object_or_delegate_creation_expression",
//t    "primary_expression : anonymous_type_expression",
//t    "primary_expression : typeof_expression",
//t    "primary_expression : sizeof_expression",
//t    "primary_expression : checked_expression",
//t    "primary_expression : unchecked_expression",
//t    "primary_expression : pointer_member_access",
//t    "primary_expression : anonymous_method_expression",
//t    "primary_expression : undocumented_expressions",
//t    "type_name_expression : simple_name_expr",
//t    "type_name_expression : IDENTIFIER GENERATE_COMPLETION",
//t    "type_name_expression : member_access",
//t    "literal : boolean_literal",
//t    "literal : LITERAL",
//t    "literal : NULL",
//t    "boolean_literal : TRUE",
//t    "boolean_literal : FALSE",
//t    "open_parens_any : OPEN_PARENS",
//t    "open_parens_any : OPEN_PARENS_CAST",
//t    "close_parens : CLOSE_PARENS",
//t    "close_parens : COMPLETE_COMPLETION",
//t    "parenthesized_expression : OPEN_PARENS expression CLOSE_PARENS",
//t    "parenthesized_expression : OPEN_PARENS expression COMPLETE_COMPLETION",
//t    "member_access : primary_expression DOT identifier_inside_body opt_type_argument_list",
//t    "member_access : primary_expression DOT identifier_inside_body generic_dimension",
//t    "member_access : primary_expression INTERR_OPERATOR DOT identifier_inside_body opt_type_argument_list",
//t    "member_access : builtin_types DOT identifier_inside_body opt_type_argument_list",
//t    "member_access : BASE DOT identifier_inside_body opt_type_argument_list",
//t    "member_access : AWAIT DOT identifier_inside_body opt_type_argument_list",
//t    "member_access : qualified_alias_member identifier_inside_body opt_type_argument_list",
//t    "member_access : qualified_alias_member identifier_inside_body generic_dimension",
//t    "member_access : primary_expression DOT GENERATE_COMPLETION",
//t    "member_access : primary_expression DOT IDENTIFIER GENERATE_COMPLETION",
//t    "member_access : builtin_types DOT GENERATE_COMPLETION",
//t    "member_access : builtin_types DOT IDENTIFIER GENERATE_COMPLETION",
//t    "invocation_expression : primary_expression open_parens_any opt_argument_list close_parens",
//t    "invocation_expression : primary_expression open_parens_any argument_list error",
//t    "invocation_expression : primary_expression open_parens_any error",
//t    "opt_object_or_collection_initializer :",
//t    "opt_object_or_collection_initializer : object_or_collection_initializer",
//t    "object_or_collection_initializer : OPEN_BRACE opt_member_initializer_list close_brace_or_complete_completion",
//t    "object_or_collection_initializer : OPEN_BRACE member_initializer_list COMMA CLOSE_BRACE",
//t    "opt_member_initializer_list :",
//t    "opt_member_initializer_list : member_initializer_list",
//t    "member_initializer_list : member_initializer",
//t    "member_initializer_list : member_initializer_list COMMA member_initializer",
//t    "member_initializer_list : member_initializer_list error",
//t    "member_initializer : IDENTIFIER ASSIGN initializer_value",
//t    "member_initializer : AWAIT ASSIGN initializer_value",
//t    "member_initializer : GENERATE_COMPLETION",
//t    "member_initializer : non_assignment_expression opt_COMPLETE_COMPLETION",
//t    "member_initializer : OPEN_BRACE expression_list CLOSE_BRACE",
//t    "member_initializer : OPEN_BRACKET_EXPR expression_list CLOSE_BRACKET ASSIGN initializer_value",
//t    "member_initializer : OPEN_BRACE CLOSE_BRACE",
//t    "initializer_value : expression",
//t    "initializer_value : object_or_collection_initializer",
//t    "opt_argument_list :",
//t    "opt_argument_list : argument_list",
//t    "argument_list : argument_or_named_argument",
//t    "argument_list : argument_list COMMA argument",
//t    "argument_list : argument_list COMMA named_argument",
//t    "argument_list : argument_list COMMA error",
//t    "argument_list : COMMA error",
//t    "argument : expression",
//t    "argument : non_simple_argument",
//t    "argument_or_named_argument : argument",
//t    "argument_or_named_argument : named_argument",
//t    "non_simple_argument : REF variable_reference",
//t    "non_simple_argument : REF declaration_expression",
//t    "non_simple_argument : OUT variable_reference",
//t    "non_simple_argument : OUT declaration_expression",
//t    "non_simple_argument : ARGLIST OPEN_PARENS argument_list CLOSE_PARENS",
//t    "non_simple_argument : ARGLIST OPEN_PARENS CLOSE_PARENS",
//t    "declaration_expression : OPEN_PARENS declaration_expression CLOSE_PARENS",
//t    "declaration_expression : variable_type identifier_inside_body",
//t    "declaration_expression : variable_type identifier_inside_body ASSIGN expression",
//t    "variable_reference : expression",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "element_access : primary_expression INTERR_OPERATOR OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments error",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR error",
//t    "expression_list : expression_or_error",
//t    "expression_list : expression_list COMMA expression_or_error",
//t    "expression_list_arguments : expression_list_argument",
//t    "expression_list_arguments : expression_list_arguments COMMA expression_list_argument",
//t    "expression_list_argument : expression",
//t    "expression_list_argument : named_argument",
//t    "this_access : THIS",
//t    "base_access : BASE OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "base_access : BASE OPEN_BRACKET error",
//t    "post_increment_expression : primary_expression OP_INC",
//t    "post_decrement_expression : primary_expression OP_DEC",
//t    "object_or_delegate_creation_expression : NEW new_expr_type open_parens_any opt_argument_list CLOSE_PARENS opt_object_or_collection_initializer",
//t    "object_or_delegate_creation_expression : NEW new_expr_type object_or_collection_initializer",
//t    "array_creation_expression : NEW new_expr_type OPEN_BRACKET_EXPR expression_list CLOSE_BRACKET opt_rank_specifier opt_array_initializer",
//t    "array_creation_expression : NEW new_expr_type rank_specifiers opt_array_initializer",
//t    "array_creation_expression : NEW rank_specifier array_initializer",
//t    "array_creation_expression : NEW new_expr_type OPEN_BRACKET CLOSE_BRACKET OPEN_BRACKET_EXPR error CLOSE_BRACKET",
//t    "array_creation_expression : NEW new_expr_type error",
//t    "$$68 :",
//t    "new_expr_type : $$68 simple_type",
//t    "anonymous_type_expression : NEW OPEN_BRACE anonymous_type_parameters_opt_comma CLOSE_BRACE",
//t    "anonymous_type_expression : NEW OPEN_BRACE GENERATE_COMPLETION",
//t    "anonymous_type_parameters_opt_comma : anonymous_type_parameters_opt",
//t    "anonymous_type_parameters_opt_comma : anonymous_type_parameters COMMA",
//t    "anonymous_type_parameters_opt :",
//t    "anonymous_type_parameters_opt : anonymous_type_parameters",
//t    "anonymous_type_parameters : anonymous_type_parameter",
//t    "anonymous_type_parameters : anonymous_type_parameters COMMA anonymous_type_parameter",
//t    "anonymous_type_parameters : COMPLETE_COMPLETION",
//t    "anonymous_type_parameters : anonymous_type_parameter COMPLETE_COMPLETION",
//t    "anonymous_type_parameter : identifier_inside_body ASSIGN variable_initializer",
//t    "anonymous_type_parameter : identifier_inside_body",
//t    "anonymous_type_parameter : member_access",
//t    "anonymous_type_parameter : error",
//t    "opt_rank_specifier :",
//t    "opt_rank_specifier : rank_specifiers",
//t    "rank_specifiers : rank_specifier",
//t    "rank_specifiers : rank_specifier rank_specifiers",
//t    "rank_specifier : OPEN_BRACKET CLOSE_BRACKET",
//t    "rank_specifier : OPEN_BRACKET dim_separators CLOSE_BRACKET",
//t    "dim_separators : COMMA",
//t    "dim_separators : dim_separators COMMA",
//t    "opt_array_initializer :",
//t    "opt_array_initializer : array_initializer",
//t    "array_initializer : OPEN_BRACE CLOSE_BRACE",
//t    "array_initializer : OPEN_BRACE variable_initializer_list opt_comma CLOSE_BRACE",
//t    "variable_initializer_list : variable_initializer",
//t    "variable_initializer_list : variable_initializer_list COMMA variable_initializer",
//t    "typeof_expression : TYPEOF open_parens_any typeof_type_expression CLOSE_PARENS",
//t    "typeof_type_expression : type_and_void",
//t    "typeof_type_expression : error",
//t    "generic_dimension : GENERIC_DIMENSION",
//t    "qualified_alias_member : IDENTIFIER DOUBLE_COLON",
//t    "sizeof_expression : SIZEOF open_parens_any type CLOSE_PARENS",
//t    "sizeof_expression : SIZEOF open_parens_any type error",
//t    "checked_expression : CHECKED open_parens_any expression CLOSE_PARENS",
//t    "checked_expression : CHECKED error",
//t    "unchecked_expression : UNCHECKED open_parens_any expression CLOSE_PARENS",
//t    "unchecked_expression : UNCHECKED error",
//t    "pointer_member_access : primary_expression OP_PTR IDENTIFIER opt_type_argument_list",
//t    "$$69 :",
//t    "anonymous_method_expression : DELEGATE opt_anonymous_method_signature $$69 block",
//t    "$$70 :",
//t    "anonymous_method_expression : ASYNC DELEGATE opt_anonymous_method_signature $$70 block",
//t    "opt_anonymous_method_signature :",
//t    "opt_anonymous_method_signature : anonymous_method_signature",
//t    "$$71 :",
//t    "anonymous_method_signature : OPEN_PARENS $$71 opt_formal_parameter_list CLOSE_PARENS",
//t    "default_value_expression : DEFAULT open_parens_any type CLOSE_PARENS",
//t    "unary_expression : primary_expression",
//t    "unary_expression : BANG prefixed_unary_expression",
//t    "unary_expression : TILDE prefixed_unary_expression",
//t    "unary_expression : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
//t    "unary_expression : AWAIT prefixed_unary_expression",
//t    "unary_expression : BANG error",
//t    "unary_expression : TILDE error",
//t    "unary_expression : OPEN_PARENS_CAST type CLOSE_PARENS error",
//t    "unary_expression : AWAIT error",
//t    "prefixed_unary_expression : unary_expression",
//t    "prefixed_unary_expression : PLUS prefixed_unary_expression",
//t    "prefixed_unary_expression : MINUS prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_INC prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_DEC prefixed_unary_expression",
//t    "prefixed_unary_expression : STAR prefixed_unary_expression",
//t    "prefixed_unary_expression : BITWISE_AND prefixed_unary_expression",
//t    "prefixed_unary_expression : PLUS error",
//t    "prefixed_unary_expression : MINUS error",
//t    "prefixed_unary_expression : OP_INC error",
//t    "prefixed_unary_expression : OP_DEC error",
//t    "prefixed_unary_expression : STAR error",
//t    "prefixed_unary_expression : BITWISE_AND error",
//t    "multiplicative_expression : prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression STAR prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression DIV prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression PERCENT prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression STAR error",
//t    "multiplicative_expression : multiplicative_expression DIV error",
//t    "multiplicative_expression : multiplicative_expression PERCENT error",
//t    "additive_expression : multiplicative_expression",
//t    "additive_expression : additive_expression PLUS multiplicative_expression",
//t    "additive_expression : additive_expression MINUS multiplicative_expression",
//t    "additive_expression : additive_expression PLUS error",
//t    "additive_expression : additive_expression MINUS error",
//t    "additive_expression : additive_expression AS type",
//t    "additive_expression : additive_expression IS pattern_type_expr opt_identifier",
//t    "additive_expression : additive_expression IS pattern_expr",
//t    "additive_expression : additive_expression AS error",
//t    "additive_expression : additive_expression IS error",
//t    "additive_expression : AWAIT IS type",
//t    "additive_expression : AWAIT AS type",
//t    "pattern_type_expr : variable_type",
//t    "pattern_expr : literal",
//t    "pattern_expr : PLUS prefixed_unary_expression",
//t    "pattern_expr : MINUS prefixed_unary_expression",
//t    "pattern_expr : sizeof_expression",
//t    "pattern_expr : default_value_expression",
//t    "pattern_expr : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
//t    "pattern_expr : STAR",
//t    "pattern_expr : pattern_expr_invocation",
//t    "pattern_expr : pattern_property",
//t    "pattern_expr_invocation : type_name_expression OPEN_PARENS opt_pattern_list CLOSE_PARENS",
//t    "pattern_property : type_name_expression OPEN_BRACE pattern_property_list CLOSE_BRACE",
//t    "pattern_property_list : pattern_property_entry",
//t    "pattern_property_list : pattern_property_list COMMA pattern_property_entry",
//t    "pattern_property_entry : identifier_inside_body IS pattern",
//t    "pattern : pattern_expr",
//t    "pattern : pattern_type_expr opt_identifier",
//t    "opt_pattern_list :",
//t    "opt_pattern_list : pattern_list",
//t    "pattern_list : pattern_argument",
//t    "pattern_list : pattern_list COMMA pattern_argument",
//t    "pattern_argument : pattern",
//t    "pattern_argument : IDENTIFIER COLON pattern",
//t    "shift_expression : additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_LEFT additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_RIGHT additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_LEFT error",
//t    "shift_expression : shift_expression OP_SHIFT_RIGHT error",
//t    "relational_expression : shift_expression",
//t    "relational_expression : relational_expression OP_LT shift_expression",
//t    "relational_expression : relational_expression OP_GT shift_expression",
//t    "relational_expression : relational_expression OP_LE shift_expression",
//t    "relational_expression : relational_expression OP_GE shift_expression",
//t    "relational_expression : relational_expression OP_LT error",
//t    "relational_expression : relational_expression OP_GT error",
//t    "relational_expression : relational_expression OP_LE error",
//t    "relational_expression : relational_expression OP_GE error",
//t    "equality_expression : relational_expression",
//t    "equality_expression : equality_expression OP_EQ relational_expression",
//t    "equality_expression : equality_expression OP_NE relational_expression",
//t    "equality_expression : equality_expression OP_EQ error",
//t    "equality_expression : equality_expression OP_NE error",
//t    "and_expression : equality_expression",
//t    "and_expression : and_expression BITWISE_AND equality_expression",
//t    "and_expression : and_expression BITWISE_AND error",
//t    "exclusive_or_expression : and_expression",
//t    "exclusive_or_expression : exclusive_or_expression CARRET and_expression",
//t    "exclusive_or_expression : exclusive_or_expression CARRET error",
//t    "inclusive_or_expression : exclusive_or_expression",
//t    "inclusive_or_expression : inclusive_or_expression BITWISE_OR exclusive_or_expression",
//t    "inclusive_or_expression : inclusive_or_expression BITWISE_OR error",
//t    "conditional_and_expression : inclusive_or_expression",
//t    "conditional_and_expression : conditional_and_expression OP_AND inclusive_or_expression",
//t    "conditional_and_expression : conditional_and_expression OP_AND error",
//t    "conditional_or_expression : conditional_and_expression",
//t    "conditional_or_expression : conditional_or_expression OP_OR conditional_and_expression",
//t    "conditional_or_expression : conditional_or_expression OP_OR error",
//t    "null_coalescing_expression : conditional_or_expression",
//t    "null_coalescing_expression : conditional_or_expression OP_COALESCING null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression INTERR expression COLON expression",
//t    "conditional_expression : null_coalescing_expression INTERR expression error",
//t    "conditional_expression : null_coalescing_expression INTERR expression COLON error",
//t    "conditional_expression : null_coalescing_expression INTERR expression COLON CLOSE_BRACE",
//t    "assignment_expression : prefixed_unary_expression ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MULT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_DIV_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MOD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_ADD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SUB_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_LEFT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_RIGHT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_AND_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_OR_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_XOR_ASSIGN expression",
//t    "lambda_parameter_list : lambda_parameter",
//t    "lambda_parameter_list : lambda_parameter_list COMMA lambda_parameter",
//t    "lambda_parameter : parameter_modifier parameter_type identifier_inside_body",
//t    "lambda_parameter : parameter_type identifier_inside_body",
//t    "lambda_parameter : IDENTIFIER",
//t    "lambda_parameter : AWAIT",
//t    "opt_lambda_parameter_list :",
//t    "opt_lambda_parameter_list : lambda_parameter_list",
//t    "$$72 :",
//t    "lambda_expression_body : $$72 expression",
//t    "lambda_expression_body : block",
//t    "lambda_expression_body : error",
//t    "expression_or_error : expression",
//t    "expression_or_error : error",
//t    "$$73 :",
//t    "lambda_expression : IDENTIFIER ARROW $$73 lambda_expression_body",
//t    "$$74 :",
//t    "lambda_expression : AWAIT ARROW $$74 lambda_expression_body",
//t    "$$75 :",
//t    "lambda_expression : ASYNC identifier_inside_body ARROW $$75 lambda_expression_body",
//t    "$$76 :",
//t    "$$77 :",
//t    "lambda_expression : OPEN_PARENS_LAMBDA $$76 opt_lambda_parameter_list CLOSE_PARENS ARROW $$77 lambda_expression_body",
//t    "$$78 :",
//t    "$$79 :",
//t    "lambda_expression : ASYNC OPEN_PARENS_LAMBDA $$78 opt_lambda_parameter_list CLOSE_PARENS ARROW $$79 lambda_expression_body",
//t    "expression : assignment_expression",
//t    "expression : non_assignment_expression",
//t    "non_assignment_expression : conditional_expression",
//t    "non_assignment_expression : lambda_expression",
//t    "non_assignment_expression : query_expression",
//t    "non_assignment_expression : ARGLIST",
//t    "undocumented_expressions : REFVALUE OPEN_PARENS non_assignment_expression COMMA type CLOSE_PARENS",
//t    "undocumented_expressions : REFTYPE open_parens_any expression CLOSE_PARENS",
//t    "undocumented_expressions : MAKEREF open_parens_any expression CLOSE_PARENS",
//t    "constant_expression : expression",
//t    "boolean_expression : expression",
//t    "opt_primary_parameters :",
//t    "opt_primary_parameters : primary_parameters",
//t    "primary_parameters : OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS",
//t    "opt_primary_parameters_with_class_base :",
//t    "opt_primary_parameters_with_class_base : class_base",
//t    "opt_primary_parameters_with_class_base : primary_parameters",
//t    "opt_primary_parameters_with_class_base : primary_parameters class_base",
//t    "$$80 :",
//t    "opt_primary_parameters_with_class_base : primary_parameters class_base OPEN_PARENS $$80 opt_argument_list CLOSE_PARENS",
//t    "$$81 :",
//t    "$$82 :",
//t    "$$83 :",
//t    "$$84 :",
//t    "class_declaration : opt_attributes opt_modifiers opt_partial CLASS $$81 type_declaration_name $$82 opt_primary_parameters_with_class_base opt_type_parameter_constraints_clauses $$83 OPEN_BRACE opt_class_member_declarations CLOSE_BRACE $$84 opt_semicolon",
//t    "opt_partial :",
//t    "opt_partial : PARTIAL",
//t    "opt_modifiers :",
//t    "opt_modifiers : modifiers",
//t    "modifiers : modifier",
//t    "modifiers : modifiers modifier",
//t    "modifier : NEW",
//t    "modifier : PUBLIC",
//t    "modifier : PROTECTED",
//t    "modifier : INTERNAL",
//t    "modifier : PRIVATE",
//t    "modifier : ABSTRACT",
//t    "modifier : SEALED",
//t    "modifier : STATIC",
//t    "modifier : READONLY",
//t    "modifier : VIRTUAL",
//t    "modifier : OVERRIDE",
//t    "modifier : EXTERN",
//t    "modifier : VOLATILE",
//t    "modifier : UNSAFE",
//t    "modifier : ASYNC",
//t    "opt_class_base :",
//t    "opt_class_base : class_base",
//t    "class_base : COLON type_list",
//t    "class_base : COLON type_list error",
//t    "opt_type_parameter_constraints_clauses :",
//t    "opt_type_parameter_constraints_clauses : type_parameter_constraints_clauses",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clause",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clauses type_parameter_constraints_clause",
//t    "type_parameter_constraints_clause : WHERE IDENTIFIER COLON type_parameter_constraints",
//t    "type_parameter_constraints_clause : WHERE IDENTIFIER error",
//t    "type_parameter_constraints : type_parameter_constraint",
//t    "type_parameter_constraints : type_parameter_constraints COMMA type_parameter_constraint",
//t    "type_parameter_constraint : type",
//t    "type_parameter_constraint : NEW OPEN_PARENS CLOSE_PARENS",
//t    "type_parameter_constraint : CLASS",
//t    "type_parameter_constraint : STRUCT",
//t    "opt_type_parameter_variance :",
//t    "opt_type_parameter_variance : type_parameter_variance",
//t    "type_parameter_variance : OUT",
//t    "type_parameter_variance : IN",
//t    "$$85 :",
//t    "block : OPEN_BRACE $$85 opt_statement_list block_end",
//t    "block_end : CLOSE_BRACE",
//t    "block_end : COMPLETE_COMPLETION",
//t    "$$86 :",
//t    "block_prepared : OPEN_BRACE $$86 opt_statement_list CLOSE_BRACE",
//t    "opt_statement_list :",
//t    "opt_statement_list : statement_list",
//t    "statement_list : statement",
//t    "statement_list : statement_list statement",
//t    "statement : block_variable_declaration",
//t    "statement : valid_declaration_statement",
//t    "statement : labeled_statement",
//t    "statement : error",
//t    "interactive_statement_list : interactive_statement",
//t    "interactive_statement_list : interactive_statement_list interactive_statement",
//t    "interactive_statement : block_variable_declaration",
//t    "interactive_statement : interactive_valid_declaration_statement",
//t    "interactive_statement : labeled_statement",
//t    "valid_declaration_statement : block",
//t    "valid_declaration_statement : empty_statement",
//t    "valid_declaration_statement : expression_statement",
//t    "valid_declaration_statement : selection_statement",
//t    "valid_declaration_statement : iteration_statement",
//t    "valid_declaration_statement : jump_statement",
//t    "valid_declaration_statement : try_statement",
//t    "valid_declaration_statement : checked_statement",
//t    "valid_declaration_statement : unchecked_statement",
//t    "valid_declaration_statement : lock_statement",
//t    "valid_declaration_statement : using_statement",
//t    "valid_declaration_statement : unsafe_statement",
//t    "valid_declaration_statement : fixed_statement",
//t    "interactive_valid_declaration_statement : block",
//t    "interactive_valid_declaration_statement : empty_statement",
//t    "interactive_valid_declaration_statement : interactive_expression_statement",
//t    "interactive_valid_declaration_statement : selection_statement",
//t    "interactive_valid_declaration_statement : iteration_statement",
//t    "interactive_valid_declaration_statement : jump_statement",
//t    "interactive_valid_declaration_statement : try_statement",
//t    "interactive_valid_declaration_statement : checked_statement",
//t    "interactive_valid_declaration_statement : unchecked_statement",
//t    "interactive_valid_declaration_statement : lock_statement",
//t    "interactive_valid_declaration_statement : using_statement",
//t    "interactive_valid_declaration_statement : unsafe_statement",
//t    "interactive_valid_declaration_statement : fixed_statement",
//t    "embedded_statement : valid_declaration_statement",
//t    "embedded_statement : block_variable_declaration",
//t    "embedded_statement : labeled_statement",
//t    "embedded_statement : error",
//t    "empty_statement : SEMICOLON",
//t    "$$87 :",
//t    "labeled_statement : identifier_inside_body COLON $$87 statement",
//t    "variable_type : variable_type_simple",
//t    "variable_type : variable_type_simple rank_specifiers",
//t    "variable_type_simple : type_name_expression opt_nullable",
//t    "variable_type_simple : type_name_expression pointer_stars",
//t    "variable_type_simple : builtin_type_expression",
//t    "variable_type_simple : void_invalid",
//t    "pointer_stars : pointer_star",
//t    "pointer_stars : pointer_star pointer_stars",
//t    "pointer_star : STAR",
//t    "identifier_inside_body : IDENTIFIER",
//t    "identifier_inside_body : AWAIT",
//t    "$$88 :",
//t    "block_variable_declaration : variable_type identifier_inside_body $$88 opt_local_variable_initializer opt_variable_declarators SEMICOLON",
//t    "$$89 :",
//t    "block_variable_declaration : CONST variable_type identifier_inside_body $$89 const_variable_initializer opt_const_declarators SEMICOLON",
//t    "opt_local_variable_initializer :",
//t    "opt_local_variable_initializer : ASSIGN block_variable_initializer",
//t    "opt_local_variable_initializer : error",
//t    "opt_variable_declarators :",
//t    "opt_variable_declarators : variable_declarators",
//t    "opt_using_or_fixed_variable_declarators :",
//t    "opt_using_or_fixed_variable_declarators : variable_declarators",
//t    "variable_declarators : variable_declarator",
//t    "variable_declarators : variable_declarators variable_declarator",
//t    "variable_declarator : COMMA identifier_inside_body",
//t    "variable_declarator : COMMA identifier_inside_body ASSIGN block_variable_initializer",
//t    "const_variable_initializer :",
//t    "const_variable_initializer : ASSIGN constant_initializer_expr",
//t    "opt_const_declarators :",
//t    "opt_const_declarators : const_declarators",
//t    "const_declarators : const_declarator",
//t    "const_declarators : const_declarators const_declarator",
//t    "const_declarator : COMMA identifier_inside_body ASSIGN constant_initializer_expr",
//t    "block_variable_initializer : variable_initializer",
//t    "block_variable_initializer : STACKALLOC simple_type OPEN_BRACKET_EXPR expression CLOSE_BRACKET",
//t    "block_variable_initializer : STACKALLOC simple_type",
//t    "expression_statement : statement_expression SEMICOLON",
//t    "expression_statement : statement_expression COMPLETE_COMPLETION",
//t    "expression_statement : statement_expression CLOSE_BRACE",
//t    "interactive_expression_statement : interactive_statement_expression SEMICOLON",
//t    "interactive_expression_statement : interactive_statement_expression COMPLETE_COMPLETION",
//t    "statement_expression : expression",
//t    "interactive_statement_expression : expression",
//t    "interactive_statement_expression : error",
//t    "selection_statement : if_statement",
//t    "selection_statement : switch_statement",
//t    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
//t    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement ELSE embedded_statement",
//t    "if_statement : IF open_parens_any boolean_expression error",
//t    "$$90 :",
//t    "switch_statement : SWITCH open_parens_any expression CLOSE_PARENS OPEN_BRACE $$90 opt_switch_sections CLOSE_BRACE",
//t    "switch_statement : SWITCH open_parens_any expression error",
//t    "opt_switch_sections :",
//t    "opt_switch_sections : switch_sections",
//t    "switch_sections : switch_section",
//t    "switch_sections : switch_sections switch_section",
//t    "switch_sections : error",
//t    "switch_section : switch_labels statement_list",
//t    "switch_labels : switch_label",
//t    "switch_labels : switch_labels switch_label",
//t    "switch_label : CASE constant_expression COLON",
//t    "switch_label : CASE constant_expression error",
//t    "switch_label : DEFAULT_COLON",
//t    "iteration_statement : while_statement",
//t    "iteration_statement : do_statement",
//t    "iteration_statement : for_statement",
//t    "iteration_statement : foreach_statement",
//t    "while_statement : WHILE open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
//t    "while_statement : WHILE open_parens_any boolean_expression error",
//t    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression CLOSE_PARENS SEMICOLON",
//t    "do_statement : DO embedded_statement error",
//t    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression error",
//t    "$$91 :",
//t    "for_statement : FOR open_parens_any $$91 for_statement_cont",
//t    "$$92 :",
//t    "for_statement_cont : opt_for_initializer SEMICOLON $$92 for_condition_and_iterator_part embedded_statement",
//t    "for_statement_cont : error",
//t    "$$93 :",
//t    "for_condition_and_iterator_part : opt_for_condition SEMICOLON $$93 for_iterator_part",
//t    "for_condition_and_iterator_part : opt_for_condition close_parens_close_brace",
//t    "for_iterator_part : opt_for_iterator CLOSE_PARENS",
//t    "for_iterator_part : opt_for_iterator CLOSE_BRACE",
//t    "close_parens_close_brace : CLOSE_PARENS",
//t    "close_parens_close_brace : CLOSE_BRACE",
//t    "opt_for_initializer :",
//t    "opt_for_initializer : for_initializer",
//t    "$$94 :",
//t    "for_initializer : variable_type identifier_inside_body $$94 opt_local_variable_initializer opt_variable_declarators",
//t    "for_initializer : statement_expression_list",
//t    "opt_for_condition :",
//t    "opt_for_condition : boolean_expression",
//t    "opt_for_iterator :",
//t    "opt_for_iterator : for_iterator",
//t    "for_iterator : statement_expression_list",
//t    "statement_expression_list : statement_expression",
//t    "statement_expression_list : statement_expression_list COMMA statement_expression",
//t    "foreach_statement : FOREACH open_parens_any type error",
//t    "foreach_statement : FOREACH open_parens_any type identifier_inside_body error",
//t    "$$95 :",
//t    "foreach_statement : FOREACH open_parens_any type identifier_inside_body IN expression CLOSE_PARENS $$95 embedded_statement",
//t    "jump_statement : break_statement",
//t    "jump_statement : continue_statement",
//t    "jump_statement : goto_statement",
//t    "jump_statement : return_statement",
//t    "jump_statement : throw_statement",
//t    "jump_statement : yield_statement",
//t    "break_statement : BREAK SEMICOLON",
//t    "continue_statement : CONTINUE SEMICOLON",
//t    "continue_statement : CONTINUE error",
//t    "goto_statement : GOTO identifier_inside_body SEMICOLON",
//t    "goto_statement : GOTO CASE constant_expression SEMICOLON",
//t    "goto_statement : GOTO DEFAULT SEMICOLON",
//t    "return_statement : RETURN opt_expression SEMICOLON",
//t    "return_statement : RETURN expression error",
//t    "return_statement : RETURN error",
//t    "throw_statement : THROW opt_expression SEMICOLON",
//t    "throw_statement : THROW expression error",
//t    "throw_statement : THROW error",
//t    "yield_statement : identifier_inside_body RETURN opt_expression SEMICOLON",
//t    "yield_statement : identifier_inside_body RETURN expression error",
//t    "yield_statement : identifier_inside_body BREAK SEMICOLON",
//t    "opt_expression :",
//t    "opt_expression : expression",
//t    "try_statement : TRY block catch_clauses",
//t    "try_statement : TRY block FINALLY block",
//t    "try_statement : TRY block catch_clauses FINALLY block",
//t    "try_statement : TRY block error",
//t    "catch_clauses : catch_clause",
//t    "catch_clauses : catch_clauses catch_clause",
//t    "opt_identifier :",
//t    "opt_identifier : identifier_inside_body",
//t    "catch_clause : CATCH opt_catch_filter block",
//t    "$$96 :",
//t    "catch_clause : CATCH open_parens_any type opt_identifier CLOSE_PARENS $$96 opt_catch_filter block_prepared",
//t    "catch_clause : CATCH open_parens_any error",
//t    "catch_clause : CATCH open_parens_any type opt_identifier CLOSE_PARENS error",
//t    "opt_catch_filter :",
//t    "opt_catch_filter : IF open_parens_any expression CLOSE_PARENS",
//t    "checked_statement : CHECKED block",
//t    "unchecked_statement : UNCHECKED block",
//t    "$$97 :",
//t    "unsafe_statement : UNSAFE $$97 block",
//t    "lock_statement : LOCK open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "lock_statement : LOCK open_parens_any expression error",
//t    "$$98 :",
//t    "$$99 :",
//t    "fixed_statement : FIXED open_parens_any variable_type identifier_inside_body $$98 using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators CLOSE_PARENS $$99 embedded_statement",
//t    "$$100 :",
//t    "$$101 :",
//t    "using_statement : USING open_parens_any variable_type identifier_inside_body $$100 using_initialization CLOSE_PARENS $$101 embedded_statement",
//t    "using_statement : USING open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "using_statement : USING open_parens_any expression error",
//t    "using_initialization : using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators",
//t    "using_initialization : error",
//t    "using_or_fixed_variable_initializer :",
//t    "using_or_fixed_variable_initializer : ASSIGN variable_initializer",
//t    "query_expression : first_from_clause query_body",
//t    "query_expression : nested_from_clause query_body",
//t    "query_expression : first_from_clause COMPLETE_COMPLETION",
//t    "query_expression : nested_from_clause COMPLETE_COMPLETION",
//t    "first_from_clause : FROM_FIRST identifier_inside_body IN expression",
//t    "first_from_clause : FROM_FIRST type identifier_inside_body IN expression",
//t    "nested_from_clause : FROM identifier_inside_body IN expression",
//t    "nested_from_clause : FROM type identifier_inside_body IN expression",
//t    "$$102 :",
//t    "from_clause : FROM identifier_inside_body IN $$102 expression_or_error",
//t    "$$103 :",
//t    "from_clause : FROM type identifier_inside_body IN $$103 expression_or_error",
//t    "query_body : query_body_clauses select_or_group_clause opt_query_continuation",
//t    "query_body : select_or_group_clause opt_query_continuation",
//t    "query_body : query_body_clauses COMPLETE_COMPLETION",
//t    "query_body : query_body_clauses error",
//t    "query_body : error",
//t    "$$104 :",
//t    "select_or_group_clause : SELECT $$104 expression_or_error",
//t    "$$105 :",
//t    "$$106 :",
//t    "select_or_group_clause : GROUP $$105 expression_or_error $$106 by_expression",
//t    "by_expression : BY expression_or_error",
//t    "by_expression : error",
//t    "query_body_clauses : query_body_clause",
//t    "query_body_clauses : query_body_clauses query_body_clause",
//t    "query_body_clause : from_clause",
//t    "query_body_clause : let_clause",
//t    "query_body_clause : where_clause",
//t    "query_body_clause : join_clause",
//t    "query_body_clause : orderby_clause",
//t    "$$107 :",
//t    "let_clause : LET identifier_inside_body ASSIGN $$107 expression_or_error",
//t    "$$108 :",
//t    "where_clause : WHERE $$108 expression_or_error",
//t    "$$109 :",
//t    "$$110 :",
//t    "$$111 :",
//t    "join_clause : JOIN identifier_inside_body IN $$109 expression_or_error ON $$110 expression_or_error EQUALS $$111 expression_or_error opt_join_into",
//t    "$$112 :",
//t    "$$113 :",
//t    "$$114 :",
//t    "join_clause : JOIN type identifier_inside_body IN $$112 expression_or_error ON $$113 expression_or_error EQUALS $$114 expression_or_error opt_join_into",
//t    "opt_join_into :",
//t    "opt_join_into : INTO identifier_inside_body",
//t    "$$115 :",
//t    "orderby_clause : ORDERBY $$115 orderings",
//t    "orderings : order_by",
//t    "$$116 :",
//t    "orderings : order_by COMMA $$116 orderings_then_by",
//t    "orderings_then_by : then_by",
//t    "$$117 :",
//t    "orderings_then_by : orderings_then_by COMMA $$117 then_by",
//t    "order_by : expression",
//t    "order_by : expression ASCENDING",
//t    "order_by : expression DESCENDING",
//t    "then_by : expression",
//t    "then_by : expression ASCENDING",
//t    "then_by : expression DESCENDING",
//t    "opt_query_continuation :",
//t    "$$118 :",
//t    "opt_query_continuation : INTO identifier_inside_body $$118 query_body",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER EOF",
//t    "interactive_parsing : EVAL_USING_DECLARATIONS_UNIT_PARSER using_directives opt_COMPLETE_COMPLETION",
//t    "$$119 :",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER $$119 interactive_statement_list opt_COMPLETE_COMPLETION",
//t    "interactive_parsing : EVAL_COMPILATION_UNIT_PARSER interactive_compilation_unit",
//t    "interactive_compilation_unit : opt_extern_alias_directives opt_using_directives",
//t    "interactive_compilation_unit : opt_extern_alias_directives opt_using_directives namespace_or_type_declarations",
//t    "opt_COMPLETE_COMPLETION :",
//t    "opt_COMPLETE_COMPLETION : COMPLETE_COMPLETION",
//t    "close_brace_or_complete_completion : CLOSE_BRACE",
//t    "close_brace_or_complete_completion : COMPLETE_COMPLETION",
//t    "documentation_parsing : DOC_SEE doc_cref",
//t    "doc_cref : doc_type_declaration_name opt_doc_method_sig",
//t    "doc_cref : builtin_types opt_doc_method_sig",
//t    "doc_cref : VOID opt_doc_method_sig",
//t    "doc_cref : builtin_types DOT IDENTIFIER opt_doc_method_sig",
//t    "doc_cref : doc_type_declaration_name DOT THIS",
//t    "$$120 :",
//t    "doc_cref : doc_type_declaration_name DOT THIS OPEN_BRACKET $$120 opt_doc_parameters CLOSE_BRACKET",
//t    "doc_cref : EXPLICIT OPERATOR type opt_doc_method_sig",
//t    "doc_cref : IMPLICIT OPERATOR type opt_doc_method_sig",
//t    "doc_cref : OPERATOR overloadable_operator opt_doc_method_sig",
//t    "doc_type_declaration_name : type_declaration_name",
//t    "doc_type_declaration_name : doc_type_declaration_name DOT type_declaration_name",
//t    "opt_doc_method_sig :",
//t    "$$121 :",
//t    "opt_doc_method_sig : OPEN_PARENS $$121 opt_doc_parameters CLOSE_PARENS",
//t    "opt_doc_parameters :",
//t    "opt_doc_parameters : doc_parameters",
//t    "doc_parameters : doc_parameter",
//t    "doc_parameters : doc_parameters COMMA doc_parameter",
//t    "doc_parameter : opt_parameter_modifier parameter_type",
//t  };
//t public static string getRule (int index) {
//t    return yyRule [index];
//t }
//t}
  protected static readonly string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"EOF","NONE","ERROR",
    "FIRST_KEYWORD","ABSTRACT","AS","ADD","BASE","BOOL","BREAK","BYTE",
    "CASE","CATCH","CHAR","CHECKED","CLASS","CONST","CONTINUE","DECIMAL",
    "DEFAULT","DELEGATE","DO","DOUBLE","ELSE","ENUM","EVENT","EXPLICIT",
    "EXTERN","FALSE","FINALLY","FIXED","FLOAT","FOR","FOREACH","GOTO",
    "IF","IMPLICIT","IN","INT","INTERFACE","INTERNAL","IS","LOCK","LONG",
    "NAMESPACE","NEW","NULL","OBJECT","OPERATOR","OUT","OVERRIDE",
    "PARAMS","PRIVATE","PROTECTED","PUBLIC","READONLY","REF","RETURN",
    "REMOVE","SBYTE","SEALED","SHORT","SIZEOF","STACKALLOC","STATIC",
    "STRING","STRUCT","SWITCH","THIS","THROW","TRUE","TRY","TYPEOF",
    "UINT","ULONG","UNCHECKED","UNSAFE","USHORT","USING","VIRTUAL","VOID",
    "VOLATILE","WHERE","WHILE","ARGLIST","PARTIAL","ARROW","FROM",
    "FROM_FIRST","JOIN","ON","EQUALS","SELECT","GROUP","BY","LET",
    "ORDERBY","ASCENDING","DESCENDING","INTO","INTERR_NULLABLE",
    "EXTERN_ALIAS","REFVALUE","REFTYPE","MAKEREF","ASYNC","AWAIT",
    "INTERR_OPERATOR","GET","SET","LAST_KEYWORD","OPEN_BRACE",
    "CLOSE_BRACE","OPEN_BRACKET","CLOSE_BRACKET","OPEN_PARENS",
    "CLOSE_PARENS","DOT","COMMA","COLON","SEMICOLON","TILDE","PLUS",
    "MINUS","BANG","ASSIGN","OP_LT","OP_GT","BITWISE_AND","BITWISE_OR",
    "STAR","PERCENT","DIV","CARRET","INTERR","DOUBLE_COLON","OP_INC",
    "OP_DEC","OP_SHIFT_LEFT","OP_SHIFT_RIGHT","OP_LE","OP_GE","OP_EQ",
    "OP_NE","OP_AND","OP_OR","OP_MULT_ASSIGN","OP_DIV_ASSIGN",
    "OP_MOD_ASSIGN","OP_ADD_ASSIGN","OP_SUB_ASSIGN",
    "OP_SHIFT_LEFT_ASSIGN","OP_SHIFT_RIGHT_ASSIGN","OP_AND_ASSIGN",
    "OP_XOR_ASSIGN","OP_OR_ASSIGN","OP_PTR","OP_COALESCING",
    "OP_GENERICS_LT","OP_GENERICS_LT_DECL","OP_GENERICS_GT","LITERAL",
    "IDENTIFIER","OPEN_PARENS_LAMBDA","OPEN_PARENS_CAST",
    "GENERIC_DIMENSION","DEFAULT_COLON","OPEN_BRACKET_EXPR",
    "EVAL_STATEMENT_PARSER","EVAL_COMPILATION_UNIT_PARSER",
    "EVAL_USING_DECLARATIONS_UNIT_PARSER","DOC_SEE","GENERATE_COMPLETION",
    "COMPLETE_COMPLETION","UMINUS",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
//t  public static string yyname (int token) {
//t    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
//t    string name;
//t    if ((name = yyNames[token]) != null) return name;
//t    return "[unknown]";
//t  }

#pragma warning disable 414
  int yyExpectingState;
#pragma warning restore 414
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
//t    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

	static int[] global_yyStates;
	static object[] global_yyVals;
#pragma warning disable 649
	protected bool use_global_stacks;
#pragma warning restore 649
	object[] yyVals;					// value stack
	object yyVal;						// value stack ptr
	int yyToken;						// current input
	int yyTop;

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;		// initial size
    int yyState = 0;                   // state stack ptr
    int [] yyStates;               	// state stack 
    yyVal = null;
    yyToken = -1;
    int yyErrorFlag = 0;				// #tks to shift
	if (use_global_stacks && global_yyStates != null) {
		yyVals = global_yyVals;
		yyStates = global_yyStates;
   } else {
		yyVals = new object [yyMax];
		yyStates = new int [yyMax];
		if (use_global_stacks) {
			global_yyVals = yyVals;
			global_yyStates = yyStates;
		}
	}

    /*yyLoop:*/ for (yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        global::System.Array.Resize (ref yyStates, yyStates.Length+yyMax);
        global::System.Array.Resize (ref yyVals, yyVals.Length+yyMax);
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
//t      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ while (true) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
//t            if (debug != null)
//t              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
//t              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
//t                  if (debug != null)
//t                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
//t                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
//t              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
//t                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
//t              if (debug != null)
//t                debug.discard(yyState, yyToken, yyname(yyToken),
//t  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
//t        if (debug != null)
//t          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyV > yyTop ? null : yyVals[yyV]; // yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 1:
#line 381 "cs-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 2:
#line 382 "cs-parser.jay"
  { Lexer.CompleteOnEOF = false; }
  break;
case 6:
  case_6();
  break;
case 7:
#line 401 "cs-parser.jay"
  {
		module.AddAttributes ((Attributes) yyVals[0+yyTop], current_namespace);
	  }
  break;
case 8:
  case_8();
  break;
case 13:
  case_13();
  break;
case 14:
#line 446 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 17:
  case_17();
  break;
case 18:
  case_18();
  break;
case 19:
  case_19();
  break;
case 20:
  case_20();
  break;
case 21:
  case_21();
  break;
case 22:
  case_22();
  break;
case 23:
  case_23();
  break;
case 24:
  case_24();
  break;
case 27:
  case_27();
  break;
case 28:
  case_28();
  break;
case 29:
  case_29();
  break;
case 30:
  case_30();
  break;
case 43:
  case_43();
  break;
case 44:
#line 631 "cs-parser.jay"
  {
		current_namespace.DeclarationFound = true;
	  }
  break;
case 45:
  case_45();
  break;
case 53:
  case_53();
  break;
case 54:
  case_54();
  break;
case 55:
  case_55();
  break;
case 56:
  case_56();
  break;
case 57:
  case_57();
  break;
case 58:
  case_58();
  break;
case 59:
  case_59();
  break;
case 60:
  case_60();
  break;
case 61:
  case_61();
  break;
case 62:
  case_62();
  break;
case 63:
#line 757 "cs-parser.jay"
  { yyVal = "event"; }
  break;
case 64:
#line 758 "cs-parser.jay"
  { yyVal = "return"; }
  break;
case 65:
#line 765 "cs-parser.jay"
  {
		yyVal = new List<Attribute> (4) { (Attribute) yyVals[0+yyTop] };
	  }
  break;
case 66:
  case_66();
  break;
case 67:
#line 782 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 68:
  case_68();
  break;
case 70:
#line 801 "cs-parser.jay"
  { yyVal = null; }
  break;
case 71:
#line 805 "cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 72:
#line 810 "cs-parser.jay"
  { yyVal = null; }
  break;
case 73:
  case_73();
  break;
case 74:
  case_74();
  break;
case 75:
  case_75();
  break;
case 76:
  case_76();
  break;
case 77:
#line 852 "cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 79:
  case_79();
  break;
case 80:
#line 865 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 81:
  case_81();
  break;
case 82:
  case_82();
  break;
case 84:
#line 896 "cs-parser.jay"
  { yyVal = null; }
  break;
case 85:
#line 900 "cs-parser.jay"
  { 
		yyVal = Argument.AType.Ref;
	  }
  break;
case 86:
#line 904 "cs-parser.jay"
  { 
		yyVal = Argument.AType.Out;
	  }
  break;
case 89:
  case_89();
  break;
case 90:
  case_90();
  break;
case 104:
  case_104();
  break;
case 105:
  case_105();
  break;
case 106:
  case_106();
  break;
case 107:
#line 981 "cs-parser.jay"
  {
	  }
  break;
case 108:
  case_108();
  break;
case 109:
  case_109();
  break;
case 110:
  case_110();
  break;
case 111:
  case_111();
  break;
case 112:
  case_112();
  break;
case 113:
#line 1031 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 114:
  case_114();
  break;
case 115:
  case_115();
  break;
case 116:
  case_116();
  break;
case 119:
#line 1080 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 120:
#line 1084 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 121:
  case_121();
  break;
case 122:
#line 1100 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 123:
  case_123();
  break;
case 124:
  case_124();
  break;
case 127:
  case_127();
  break;
case 128:
  case_128();
  break;
case 129:
  case_129();
  break;
case 130:
  case_130();
  break;
case 131:
#line 1178 "cs-parser.jay"
  {
		report.Error (1641, GetLocation (yyVals[-1+yyTop]), "A fixed size buffer field must have the array size specifier after the field name");
	  }
  break;
case 133:
  case_133();
  break;
case 134:
  case_134();
  break;
case 137:
#line 1208 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 138:
#line 1212 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 139:
  case_139();
  break;
case 140:
#line 1225 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 141:
  case_141();
  break;
case 144:
#line 1244 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 145:
#line 1248 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 146:
  case_146();
  break;
case 147:
#line 1264 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 148:
  case_148();
  break;
case 149:
  case_149();
  break;
case 152:
  case_152();
  break;
case 153:
  case_153();
  break;
case 154:
  case_154();
  break;
case 155:
#line 1331 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 156:
  case_156();
  break;
case 157:
  case_157();
  break;
case 158:
#line 1371 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 159:
  case_159();
  break;
case 160:
#line 1381 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 161:
  case_161();
  break;
case 162:
  case_162();
  break;
case 163:
  case_163();
  break;
case 167:
#line 1459 "cs-parser.jay"
  { yyVal = null; }
  break;
case 168:
  case_168();
  break;
case 169:
  case_169();
  break;
case 170:
#line 1483 "cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 172:
  case_172();
  break;
case 173:
  case_173();
  break;
case 174:
  case_174();
  break;
case 175:
  case_175();
  break;
case 176:
  case_176();
  break;
case 177:
  case_177();
  break;
case 178:
  case_178();
  break;
case 179:
#line 1541 "cs-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[0+yyTop] } );
	  }
  break;
case 180:
#line 1545 "cs-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[0+yyTop])) }, true);
	  }
  break;
case 181:
  case_181();
  break;
case 182:
  case_182();
  break;
case 183:
  case_183();
  break;
case 184:
  case_184();
  break;
case 185:
  case_185();
  break;
case 186:
  case_186();
  break;
case 187:
  case_187();
  break;
case 188:
#line 1623 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 189:
  case_189();
  break;
case 190:
#line 1664 "cs-parser.jay"
  { yyVal = Parameter.Modifier.NONE; }
  break;
case 192:
#line 1672 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 193:
  case_193();
  break;
case 194:
  case_194();
  break;
case 195:
  case_195();
  break;
case 196:
  case_196();
  break;
case 197:
  case_197();
  break;
case 198:
  case_198();
  break;
case 199:
  case_199();
  break;
case 200:
  case_200();
  break;
case 201:
  case_201();
  break;
case 202:
#line 1762 "cs-parser.jay"
  {
		Error_DuplicateParameterModifier (GetLocation (yyVals[-1+yyTop]), Parameter.Modifier.PARAMS);
	  }
  break;
case 203:
  case_203();
  break;
case 204:
  case_204();
  break;
case 205:
  case_205();
  break;
case 206:
  case_206();
  break;
case 207:
  case_207();
  break;
case 208:
#line 1812 "cs-parser.jay"
  {
		current_property = null;
	  }
  break;
case 209:
  case_209();
  break;
case 210:
  case_210();
  break;
case 212:
  case_212();
  break;
case 213:
  case_213();
  break;
case 216:
#line 1874 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 217:
  case_217();
  break;
case 218:
  case_218();
  break;
case 219:
#line 1920 "cs-parser.jay"
  {
		lbag.AppendToMember (current_property, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 220:
  case_220();
  break;
case 225:
  case_225();
  break;
case 226:
  case_226();
  break;
case 227:
  case_227();
  break;
case 228:
  case_228();
  break;
case 229:
  case_229();
  break;
case 231:
  case_231();
  break;
case 232:
  case_232();
  break;
case 233:
#line 2057 "cs-parser.jay"
  {
	  }
  break;
case 234:
  case_234();
  break;
case 235:
  case_235();
  break;
case 236:
  case_236();
  break;
case 237:
  case_237();
  break;
case 238:
#line 2097 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);	  
	  }
  break;
case 241:
  case_241();
  break;
case 242:
  case_242();
  break;
case 243:
#line 2122 "cs-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 244:
#line 2126 "cs-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 249:
#line 2134 "cs-parser.jay"
  {
	  	report.Error (567, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain operators");
	  }
  break;
case 250:
#line 2138 "cs-parser.jay"
  {
	  	report.Error (526, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain contructors");
	  }
  break;
case 251:
#line 2142 "cs-parser.jay"
  {
	  	report.Error (524, GetLocation (yyVals[0+yyTop]), "Interfaces cannot declare classes, structs, interfaces, delegates, or enumerations");
	  }
  break;
case 252:
#line 2148 "cs-parser.jay"
  {
	  }
  break;
case 253:
  case_253();
  break;
case 255:
  case_255();
  break;
case 256:
  case_256();
  break;
case 257:
  case_257();
  break;
case 259:
#line 2239 "cs-parser.jay"
  { yyVal = Operator.OpType.LogicalNot; }
  break;
case 260:
#line 2240 "cs-parser.jay"
  { yyVal = Operator.OpType.OnesComplement; }
  break;
case 261:
#line 2241 "cs-parser.jay"
  { yyVal = Operator.OpType.Increment; }
  break;
case 262:
#line 2242 "cs-parser.jay"
  { yyVal = Operator.OpType.Decrement; }
  break;
case 263:
#line 2243 "cs-parser.jay"
  { yyVal = Operator.OpType.True; }
  break;
case 264:
#line 2244 "cs-parser.jay"
  { yyVal = Operator.OpType.False; }
  break;
case 265:
#line 2246 "cs-parser.jay"
  { yyVal = Operator.OpType.Addition; }
  break;
case 266:
#line 2247 "cs-parser.jay"
  { yyVal = Operator.OpType.Subtraction; }
  break;
case 267:
#line 2249 "cs-parser.jay"
  { yyVal = Operator.OpType.Multiply; }
  break;
case 268:
#line 2250 "cs-parser.jay"
  {  yyVal = Operator.OpType.Division; }
  break;
case 269:
#line 2251 "cs-parser.jay"
  { yyVal = Operator.OpType.Modulus; }
  break;
case 270:
#line 2252 "cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseAnd; }
  break;
case 271:
#line 2253 "cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseOr; }
  break;
case 272:
#line 2254 "cs-parser.jay"
  { yyVal = Operator.OpType.ExclusiveOr; }
  break;
case 273:
#line 2255 "cs-parser.jay"
  { yyVal = Operator.OpType.LeftShift; }
  break;
case 274:
#line 2256 "cs-parser.jay"
  { yyVal = Operator.OpType.RightShift; }
  break;
case 275:
#line 2257 "cs-parser.jay"
  { yyVal = Operator.OpType.Equality; }
  break;
case 276:
#line 2258 "cs-parser.jay"
  { yyVal = Operator.OpType.Inequality; }
  break;
case 277:
#line 2259 "cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThan; }
  break;
case 278:
#line 2260 "cs-parser.jay"
  { yyVal = Operator.OpType.LessThan; }
  break;
case 279:
#line 2261 "cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThanOrEqual; }
  break;
case 280:
#line 2262 "cs-parser.jay"
  { yyVal = Operator.OpType.LessThanOrEqual; }
  break;
case 281:
  case_281();
  break;
case 282:
#line 2276 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 283:
  case_283();
  break;
case 284:
#line 2299 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 285:
  case_285();
  break;
case 286:
  case_286();
  break;
case 287:
  case_287();
  break;
case 288:
  case_288();
  break;
case 289:
  case_289();
  break;
case 290:
  case_290();
  break;
case 291:
  case_291();
  break;
case 293:
#line 2423 "cs-parser.jay"
  { current_block = null; yyVal = null; }
  break;
case 296:
#line 2435 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 297:
  case_297();
  break;
case 298:
#line 2445 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 299:
  case_299();
  break;
case 300:
  case_300();
  break;
case 301:
  case_301();
  break;
case 302:
  case_302();
  break;
case 303:
  case_303();
  break;
case 304:
  case_304();
  break;
case 305:
  case_305();
  break;
case 306:
  case_306();
  break;
case 307:
  case_307();
  break;
case 308:
  case_308();
  break;
case 309:
  case_309();
  break;
case 311:
#line 2568 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 312:
  case_312();
  break;
case 315:
#line 2585 "cs-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 316:
#line 2589 "cs-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 317:
  case_317();
  break;
case 318:
#line 2602 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 319:
  case_319();
  break;
case 320:
  case_320();
  break;
case 321:
#line 2627 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 324:
  case_324();
  break;
case 325:
  case_325();
  break;
case 326:
  case_326();
  break;
case 327:
  case_327();
  break;
case 328:
  case_328();
  break;
case 329:
  case_329();
  break;
case 330:
  case_330();
  break;
case 331:
  case_331();
  break;
case 333:
  case_333();
  break;
case 334:
  case_334();
  break;
case 335:
  case_335();
  break;
case 336:
  case_336();
  break;
case 337:
  case_337();
  break;
case 338:
  case_338();
  break;
case 340:
#line 2790 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	 }
  break;
case 341:
  case_341();
  break;
case 344:
#line 2804 "cs-parser.jay"
  {
	  	lbag.AddLocation (yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 346:
  case_346();
  break;
case 347:
  case_347();
  break;
case 348:
  case_348();
  break;
case 349:
  case_349();
  break;
case 350:
  case_350();
  break;
case 352:
#line 2878 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 353:
  case_353();
  break;
case 354:
#line 2897 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;
	  }
  break;
case 355:
  case_355();
  break;
case 357:
  case_357();
  break;
case 359:
  case_359();
  break;
case 360:
  case_360();
  break;
case 362:
  case_362();
  break;
case 363:
  case_363();
  break;
case 364:
  case_364();
  break;
case 365:
  case_365();
  break;
case 367:
  case_367();
  break;
case 368:
  case_368();
  break;
case 369:
  case_369();
  break;
case 370:
  case_370();
  break;
case 371:
#line 3016 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 372:
  case_372();
  break;
case 373:
  case_373();
  break;
case 375:
  case_375();
  break;
case 376:
  case_376();
  break;
case 377:
  case_377();
  break;
case 378:
  case_378();
  break;
case 379:
  case_379();
  break;
case 380:
  case_380();
  break;
case 382:
  case_382();
  break;
case 383:
  case_383();
  break;
case 384:
  case_384();
  break;
case 385:
  case_385();
  break;
case 386:
  case_386();
  break;
case 388:
#line 3134 "cs-parser.jay"
  {
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 389:
#line 3141 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 395:
  case_395();
  break;
case 397:
#line 3171 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 398:
  case_398();
  break;
case 399:
#line 3190 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((ATypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 401:
  case_401();
  break;
case 402:
  case_402();
  break;
case 403:
#line 3211 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 404:
#line 3215 "cs-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 405:
  case_405();
  break;
case 406:
  case_406();
  break;
case 407:
  case_407();
  break;
case 408:
#line 3248 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Object, GetLocation (yyVals[0+yyTop])); }
  break;
case 409:
#line 3249 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.String, GetLocation (yyVals[0+yyTop])); }
  break;
case 410:
#line 3250 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Bool, GetLocation (yyVals[0+yyTop])); }
  break;
case 411:
#line 3251 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Decimal, GetLocation (yyVals[0+yyTop])); }
  break;
case 412:
#line 3252 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Float, GetLocation (yyVals[0+yyTop])); }
  break;
case 413:
#line 3253 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Double, GetLocation (yyVals[0+yyTop])); }
  break;
case 415:
#line 3258 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.SByte, GetLocation (yyVals[0+yyTop])); }
  break;
case 416:
#line 3259 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Byte, GetLocation (yyVals[0+yyTop])); }
  break;
case 417:
#line 3260 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Short, GetLocation (yyVals[0+yyTop])); }
  break;
case 418:
#line 3261 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UShort, GetLocation (yyVals[0+yyTop])); }
  break;
case 419:
#line 3262 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Int, GetLocation (yyVals[0+yyTop])); }
  break;
case 420:
#line 3263 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UInt, GetLocation (yyVals[0+yyTop])); }
  break;
case 421:
#line 3264 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Long, GetLocation (yyVals[0+yyTop])); }
  break;
case 422:
#line 3265 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.ULong, GetLocation (yyVals[0+yyTop])); }
  break;
case 423:
#line 3266 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Char, GetLocation (yyVals[0+yyTop])); }
  break;
case 445:
  case_445();
  break;
case 449:
#line 3309 "cs-parser.jay"
  { yyVal = new NullLiteral (GetLocation (yyVals[0+yyTop])); }
  break;
case 450:
#line 3313 "cs-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, true, GetLocation (yyVals[0+yyTop])); }
  break;
case 451:
#line 3314 "cs-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, false, GetLocation (yyVals[0+yyTop])); }
  break;
case 456:
  case_456();
  break;
case 457:
#line 3347 "cs-parser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 458:
  case_458();
  break;
case 459:
  case_459();
  break;
case 460:
  case_460();
  break;
case 461:
  case_461();
  break;
case 462:
  case_462();
  break;
case 463:
  case_463();
  break;
case 464:
  case_464();
  break;
case 465:
  case_465();
  break;
case 466:
#line 3408 "cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null,GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 467:
  case_467();
  break;
case 468:
#line 3416 "cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null, lexer.Location);
	  }
  break;
case 469:
  case_469();
  break;
case 470:
  case_470();
  break;
case 471:
  case_471();
  break;
case 472:
  case_472();
  break;
case 473:
#line 3446 "cs-parser.jay"
  { yyVal = null; }
  break;
case 475:
  case_475();
  break;
case 476:
  case_476();
  break;
case 477:
#line 3468 "cs-parser.jay"
  { yyVal = null; }
  break;
case 478:
#line 3472 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	}
  break;
case 479:
  case_479();
  break;
case 480:
  case_480();
  break;
case 481:
  case_481();
  break;
case 482:
  case_482();
  break;
case 483:
  case_483();
  break;
case 484:
#line 3510 "cs-parser.jay"
  {
		yyVal = new CompletionElementInitializer (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 485:
  case_485();
  break;
case 486:
  case_486();
  break;
case 487:
  case_487();
  break;
case 488:
  case_488();
  break;
case 491:
#line 3549 "cs-parser.jay"
  { yyVal = null; }
  break;
case 493:
  case_493();
  break;
case 494:
  case_494();
  break;
case 495:
  case_495();
  break;
case 496:
  case_496();
  break;
case 497:
  case_497();
  break;
case 498:
#line 3601 "cs-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 502:
  case_502();
  break;
case 503:
#line 3619 "cs-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref);
	  }
  break;
case 504:
  case_504();
  break;
case 505:
#line 3628 "cs-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out);
	  }
  break;
case 506:
  case_506();
  break;
case 507:
  case_507();
  break;
case 508:
  case_508();
  break;
case 509:
  case_509();
  break;
case 510:
  case_510();
  break;
case 512:
  case_512();
  break;
case 513:
  case_513();
  break;
case 514:
  case_514();
  break;
case 515:
  case_515();
  break;
case 516:
  case_516();
  break;
case 517:
  case_517();
  break;
case 518:
  case_518();
  break;
case 519:
  case_519();
  break;
case 520:
#line 3753 "cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 522:
#line 3761 "cs-parser.jay"
  {
		yyVal = new This (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 523:
  case_523();
  break;
case 524:
  case_524();
  break;
case 525:
#line 3781 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostIncrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 526:
#line 3788 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostDecrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 527:
  case_527();
  break;
case 528:
  case_528();
  break;
case 529:
  case_529();
  break;
case 530:
  case_530();
  break;
case 531:
  case_531();
  break;
case 532:
  case_532();
  break;
case 533:
  case_533();
  break;
case 534:
#line 3855 "cs-parser.jay"
  {
		++lexer.parsing_type;
	  }
  break;
case 535:
  case_535();
  break;
case 536:
  case_536();
  break;
case 537:
#line 3877 "cs-parser.jay"
  {
		yyVal = new EmptyCompletion ();
	  }
  break;
case 540:
#line 3886 "cs-parser.jay"
  { yyVal = null; }
  break;
case 542:
  case_542();
  break;
case 543:
  case_543();
  break;
case 544:
#line 3906 "cs-parser.jay"
  {
		yyVal = new EmptyCompletion ();
	  }
  break;
case 545:
#line 3910 "cs-parser.jay"
  {
	  	yyVal = yyVals[-1+yyTop];
	  }
  break;
case 546:
  case_546();
  break;
case 547:
  case_547();
  break;
case 548:
  case_548();
  break;
case 549:
  case_549();
  break;
case 553:
  case_553();
  break;
case 554:
  case_554();
  break;
case 555:
  case_555();
  break;
case 556:
#line 3970 "cs-parser.jay"
  {
		yyVal = 2;
	  }
  break;
case 557:
#line 3974 "cs-parser.jay"
  {
		yyVal = ((int) yyVals[-1+yyTop]) + 1;
	  }
  break;
case 558:
#line 3981 "cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 559:
#line 3985 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 560:
  case_560();
  break;
case 561:
  case_561();
  break;
case 562:
  case_562();
  break;
case 563:
  case_563();
  break;
case 564:
  case_564();
  break;
case 566:
  case_566();
  break;
case 567:
  case_567();
  break;
case 568:
  case_568();
  break;
case 569:
  case_569();
  break;
case 570:
  case_570();
  break;
case 571:
  case_571();
  break;
case 572:
  case_572();
  break;
case 573:
  case_573();
  break;
case 574:
  case_574();
  break;
case 575:
  case_575();
  break;
case 576:
#line 4117 "cs-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], false, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 577:
#line 4121 "cs-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
	  }
  break;
case 578:
#line 4125 "cs-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], true, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 579:
#line 4129 "cs-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
	  }
  break;
case 580:
#line 4136 "cs-parser.jay"
  {
		yyVal = ParametersCompiled.Undefined;
	  }
  break;
case 582:
#line 4144 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 583:
  case_583();
  break;
case 584:
  case_584();
  break;
case 586:
#line 4168 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.LogicalNot, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 587:
#line 4172 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.OnesComplement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 588:
  case_588();
  break;
case 589:
  case_589();
  break;
case 590:
  case_590();
  break;
case 591:
  case_591();
  break;
case 592:
  case_592();
  break;
case 593:
  case_593();
  break;
case 595:
#line 4236 "cs-parser.jay"
  { 
	  	yyVal = new Unary (Unary.Operator.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 596:
#line 4240 "cs-parser.jay"
  { 
		yyVal = new Unary (Unary.Operator.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 597:
#line 4244 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 598:
#line 4248 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 599:
#line 4252 "cs-parser.jay"
  {
		yyVal = new Indirection ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 600:
#line 4256 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.AddressOf, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 601:
  case_601();
  break;
case 602:
  case_602();
  break;
case 603:
  case_603();
  break;
case 604:
  case_604();
  break;
case 605:
  case_605();
  break;
case 606:
  case_606();
  break;
case 608:
  case_608();
  break;
case 609:
  case_609();
  break;
case 610:
  case_610();
  break;
case 611:
  case_611();
  break;
case 612:
  case_612();
  break;
case 613:
  case_613();
  break;
case 615:
  case_615();
  break;
case 616:
  case_616();
  break;
case 617:
  case_617();
  break;
case 618:
  case_618();
  break;
case 619:
#line 4364 "cs-parser.jay"
  {
		yyVal = new As ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 620:
  case_620();
  break;
case 621:
  case_621();
  break;
case 622:
  case_622();
  break;
case 623:
  case_623();
  break;
case 624:
  case_624();
  break;
case 625:
  case_625();
  break;
case 628:
#line 4420 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 629:
#line 4424 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 632:
  case_632();
  break;
case 633:
#line 4435 "cs-parser.jay"
  {
		yyVal = new WildcardPattern (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 636:
#line 4444 "cs-parser.jay"
  {
		yyVal = new RecursivePattern ((ATypeNameExpression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 637:
#line 4451 "cs-parser.jay"
  {
		yyVal = new PropertyPattern ((ATypeNameExpression) yyVals[-3+yyTop], (List<PropertyPatternMember>) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 638:
  case_638();
  break;
case 639:
  case_639();
  break;
case 640:
  case_640();
  break;
case 642:
  case_642();
  break;
case 643:
#line 4493 "cs-parser.jay"
  {
		yyVal = new Arguments (0);
	  }
  break;
case 645:
  case_645();
  break;
case 646:
  case_646();
  break;
case 647:
#line 4519 "cs-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 648:
  case_648();
  break;
case 650:
  case_650();
  break;
case 651:
  case_651();
  break;
case 652:
  case_652();
  break;
case 653:
  case_653();
  break;
case 655:
  case_655();
  break;
case 656:
  case_656();
  break;
case 657:
  case_657();
  break;
case 658:
  case_658();
  break;
case 659:
  case_659();
  break;
case 660:
  case_660();
  break;
case 661:
  case_661();
  break;
case 662:
  case_662();
  break;
case 664:
  case_664();
  break;
case 665:
  case_665();
  break;
case 666:
  case_666();
  break;
case 667:
  case_667();
  break;
case 669:
  case_669();
  break;
case 670:
  case_670();
  break;
case 672:
  case_672();
  break;
case 673:
  case_673();
  break;
case 675:
  case_675();
  break;
case 676:
  case_676();
  break;
case 678:
  case_678();
  break;
case 679:
  case_679();
  break;
case 681:
  case_681();
  break;
case 682:
  case_682();
  break;
case 684:
  case_684();
  break;
case 686:
  case_686();
  break;
case 687:
  case_687();
  break;
case 688:
  case_688();
  break;
case 689:
  case_689();
  break;
case 690:
  case_690();
  break;
case 691:
  case_691();
  break;
case 692:
  case_692();
  break;
case 693:
  case_693();
  break;
case 694:
  case_694();
  break;
case 695:
  case_695();
  break;
case 696:
  case_696();
  break;
case 697:
  case_697();
  break;
case 698:
  case_698();
  break;
case 699:
  case_699();
  break;
case 700:
  case_700();
  break;
case 701:
  case_701();
  break;
case 702:
  case_702();
  break;
case 703:
  case_703();
  break;
case 704:
  case_704();
  break;
case 705:
  case_705();
  break;
case 706:
  case_706();
  break;
case 707:
#line 4862 "cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 708:
  case_708();
  break;
case 709:
#line 4872 "cs-parser.jay"
  {
		start_block (Location.Null);
	  }
  break;
case 710:
  case_710();
  break;
case 712:
  case_712();
  break;
case 714:
  case_714();
  break;
case 715:
  case_715();
  break;
case 716:
  case_716();
  break;
case 717:
  case_717();
  break;
case 718:
  case_718();
  break;
case 719:
  case_719();
  break;
case 720:
  case_720();
  break;
case 721:
#line 4939 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 722:
  case_722();
  break;
case 723:
  case_723();
  break;
case 724:
#line 4953 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;	  
	  }
  break;
case 725:
  case_725();
  break;
case 726:
  case_726();
  break;
case 732:
#line 4978 "cs-parser.jay"
  {
		yyVal = new ArglistAccess (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 733:
  case_733();
  break;
case 734:
  case_734();
  break;
case 735:
  case_735();
  break;
case 737:
#line 5007 "cs-parser.jay"
  {
		yyVal = new BooleanExpression ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 738:
#line 5014 "cs-parser.jay"
  {
	  	yyVal = null;
	  }
  break;
case 740:
  case_740();
  break;
case 741:
#line 5035 "cs-parser.jay"
  {
	  	yyVal = null;
	  }
  break;
case 742:
#line 5039 "cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 743:
#line 5043 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 744:
#line 5047 "cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 745:
  case_745();
  break;
case 746:
  case_746();
  break;
case 747:
#line 5072 "cs-parser.jay"
  {
	  }
  break;
case 748:
  case_748();
  break;
case 749:
  case_749();
  break;
case 750:
  case_750();
  break;
case 751:
  case_751();
  break;
case 752:
#line 5124 "cs-parser.jay"
  { yyVal = null; }
  break;
case 753:
#line 5126 "cs-parser.jay"
  { yyVal = yyVals[0+yyTop]; }
  break;
case 754:
  case_754();
  break;
case 755:
#line 5139 "cs-parser.jay"
  {
		lexer.parsing_modifiers = false;		
	  }
  break;
case 757:
  case_757();
  break;
case 758:
  case_758();
  break;
case 759:
  case_759();
  break;
case 760:
  case_760();
  break;
case 761:
  case_761();
  break;
case 762:
  case_762();
  break;
case 763:
  case_763();
  break;
case 764:
  case_764();
  break;
case 765:
  case_765();
  break;
case 766:
  case_766();
  break;
case 767:
  case_767();
  break;
case 768:
  case_768();
  break;
case 769:
  case_769();
  break;
case 770:
  case_770();
  break;
case 771:
  case_771();
  break;
case 772:
  case_772();
  break;
case 775:
#line 5254 "cs-parser.jay"
  {
		current_type.SetBaseTypes ((List<FullNamedExpression>) yyVals[0+yyTop]);
	 }
  break;
case 776:
  case_776();
  break;
case 778:
#line 5268 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 779:
  case_779();
  break;
case 780:
  case_780();
  break;
case 781:
  case_781();
  break;
case 782:
  case_782();
  break;
case 783:
  case_783();
  break;
case 784:
  case_784();
  break;
case 785:
  case_785();
  break;
case 786:
  case_786();
  break;
case 787:
#line 5360 "cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Class, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 788:
#line 5364 "cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Struct, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 789:
#line 5371 "cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 790:
  case_790();
  break;
case 791:
#line 5385 "cs-parser.jay"
  {
		yyVal = new VarianceDecl (Variance.Covariant, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 792:
#line 5389 "cs-parser.jay"
  {
		yyVal = new VarianceDecl (Variance.Contravariant, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 793:
  case_793();
  break;
case 794:
#line 5414 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 795:
  case_795();
  break;
case 796:
  case_796();
  break;
case 797:
  case_797();
  break;
case 798:
  case_798();
  break;
case 803:
#line 5458 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 804:
#line 5462 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 806:
  case_806();
  break;
case 809:
#line 5486 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 810:
#line 5490 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 839:
  case_839();
  break;
case 840:
  case_840();
  break;
case 841:
  case_841();
  break;
case 842:
  case_842();
  break;
case 843:
  case_843();
  break;
case 846:
  case_846();
  break;
case 847:
  case_847();
  break;
case 848:
  case_848();
  break;
case 852:
  case_852();
  break;
case 853:
#line 5631 "cs-parser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreatePointer (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 855:
#line 5639 "cs-parser.jay"
  {
	  	yyVal = Error_AwaitAsIdentifier (yyVals[0+yyTop]);
	  }
  break;
case 856:
  case_856();
  break;
case 857:
  case_857();
  break;
case 858:
  case_858();
  break;
case 859:
  case_859();
  break;
case 861:
  case_861();
  break;
case 862:
  case_862();
  break;
case 866:
  case_866();
  break;
case 869:
  case_869();
  break;
case 870:
  case_870();
  break;
case 871:
#line 5739 "cs-parser.jay"
  {
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
	  }
  break;
case 872:
#line 5743 "cs-parser.jay"
  {
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
	  }
  break;
case 877:
  case_877();
  break;
case 879:
  case_879();
  break;
case 880:
  case_880();
  break;
case 881:
  case_881();
  break;
case 882:
#line 5788 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 883:
  case_883();
  break;
case 884:
#line 5798 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 885:
#line 5799 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 886:
  case_886();
  break;
case 887:
  case_887();
  break;
case 888:
  case_888();
  break;
case 891:
  case_891();
  break;
case 892:
  case_892();
  break;
case 893:
  case_893();
  break;
case 894:
#line 5871 "cs-parser.jay"
  {
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 895:
  case_895();
  break;
case 896:
  case_896();
  break;
case 897:
#line 5891 "cs-parser.jay"
  {
		report.Warning (1522, 1, current_block.StartLocation, "Empty switch block"); 
	  }
  break;
case 901:
#line 5901 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 903:
  case_903();
  break;
case 904:
#line 5918 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 905:
  case_905();
  break;
case 906:
  case_906();
  break;
case 907:
#line 5947 "cs-parser.jay"
  {
		yyVal = new SwitchLabel (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 912:
  case_912();
  break;
case 913:
  case_913();
  break;
case 914:
  case_914();
  break;
case 915:
  case_915();
  break;
case 916:
  case_916();
  break;
case 917:
  case_917();
  break;
case 918:
#line 6007 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 919:
  case_919();
  break;
case 920:
  case_920();
  break;
case 921:
  case_921();
  break;
case 922:
  case_922();
  break;
case 923:
#line 6048 "cs-parser.jay"
  {
		yyVal = new Tuple<Location,Location> (GetLocation (yyVals[-2+yyTop]), (Location) yyVals[0+yyTop]);
	  }
  break;
case 924:
  case_924();
  break;
case 925:
  case_925();
  break;
case 926:
  case_926();
  break;
case 928:
#line 6076 "cs-parser.jay"
  { lexer.putback ('}'); }
  break;
case 929:
#line 6080 "cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 931:
  case_931();
  break;
case 932:
  case_932();
  break;
case 934:
#line 6104 "cs-parser.jay"
  { yyVal = null; }
  break;
case 936:
#line 6109 "cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 940:
  case_940();
  break;
case 941:
  case_941();
  break;
case 942:
  case_942();
  break;
case 943:
  case_943();
  break;
case 944:
  case_944();
  break;
case 951:
  case_951();
  break;
case 952:
  case_952();
  break;
case 953:
  case_953();
  break;
case 954:
  case_954();
  break;
case 955:
  case_955();
  break;
case 956:
  case_956();
  break;
case 957:
  case_957();
  break;
case 958:
  case_958();
  break;
case 959:
  case_959();
  break;
case 960:
  case_960();
  break;
case 961:
  case_961();
  break;
case 962:
  case_962();
  break;
case 963:
  case_963();
  break;
case 964:
  case_964();
  break;
case 965:
  case_965();
  break;
case 968:
#line 6333 "cs-parser.jay"
  {
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], (List<Catch>) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), false);
	  }
  break;
case 969:
  case_969();
  break;
case 970:
  case_970();
  break;
case 971:
  case_971();
  break;
case 972:
  case_972();
  break;
case 973:
  case_973();
  break;
case 976:
  case_976();
  break;
case 977:
  case_977();
  break;
case 978:
  case_978();
  break;
case 979:
  case_979();
  break;
case 980:
  case_980();
  break;
case 982:
  case_982();
  break;
case 983:
#line 6453 "cs-parser.jay"
  {
		yyVal = new Checked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 984:
#line 6460 "cs-parser.jay"
  {
		yyVal = new Unchecked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 985:
  case_985();
  break;
case 986:
#line 6470 "cs-parser.jay"
  {
		yyVal = new Unsafe ((Block) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 987:
  case_987();
  break;
case 988:
  case_988();
  break;
case 989:
  case_989();
  break;
case 990:
  case_990();
  break;
case 991:
  case_991();
  break;
case 992:
  case_992();
  break;
case 993:
  case_993();
  break;
case 994:
  case_994();
  break;
case 995:
  case_995();
  break;
case 996:
  case_996();
  break;
case 998:
  case_998();
  break;
case 999:
#line 6574 "cs-parser.jay"
  {
		Error_MissingInitializer (lexer.Location);
	  }
  break;
case 1000:
  case_1000();
  break;
case 1001:
  case_1001();
  break;
case 1002:
  case_1002();
  break;
case 1003:
  case_1003();
  break;
case 1004:
  case_1004();
  break;
case 1005:
  case_1005();
  break;
case 1006:
  case_1006();
  break;
case 1007:
  case_1007();
  break;
case 1008:
  case_1008();
  break;
case 1009:
#line 6678 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1010:
  case_1010();
  break;
case 1011:
#line 6694 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1012:
  case_1012();
  break;
case 1013:
  case_1013();
  break;
case 1014:
  case_1014();
  break;
case 1016:
  case_1016();
  break;
case 1017:
  case_1017();
  break;
case 1018:
#line 6758 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1019:
  case_1019();
  break;
case 1020:
  case_1020();
  break;
case 1021:
  case_1021();
  break;
case 1022:
  case_1022();
  break;
case 1023:
#line 6797 "cs-parser.jay"
  {
	  	yyVal = new object[] { yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]) };
	  }
  break;
case 1024:
  case_1024();
  break;
case 1026:
  case_1026();
  break;
case 1032:
#line 6826 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1033:
  case_1033();
  break;
case 1034:
#line 6845 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1035:
  case_1035();
  break;
case 1036:
  case_1036();
  break;
case 1037:
  case_1037();
  break;
case 1038:
  case_1038();
  break;
case 1039:
  case_1039();
  break;
case 1040:
  case_1040();
  break;
case 1041:
  case_1041();
  break;
case 1042:
  case_1042();
  break;
case 1043:
  case_1043();
  break;
case 1045:
#line 6990 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 1046:
#line 6997 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1047:
  case_1047();
  break;
case 1049:
  case_1049();
  break;
case 1050:
  case_1050();
  break;
case 1052:
  case_1052();
  break;
case 1053:
  case_1053();
  break;
case 1054:
#line 7043 "cs-parser.jay"
  {
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 1055:
  case_1055();
  break;
case 1056:
  case_1056();
  break;
case 1057:
#line 7060 "cs-parser.jay"
  {
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 1058:
  case_1058();
  break;
case 1059:
  case_1059();
  break;
case 1061:
  case_1061();
  break;
case 1062:
  case_1062();
  break;
case 1065:
  case_1065();
  break;
case 1066:
  case_1066();
  break;
case 1074:
#line 7185 "cs-parser.jay"
  {
		module.DocumentationBuilder.ParsedName = (MemberName) yyVals[0+yyTop];
	  }
  break;
case 1075:
#line 7192 "cs-parser.jay"
  {
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
	  }
  break;
case 1076:
  case_1076();
  break;
case 1077:
  case_1077();
  break;
case 1078:
  case_1078();
  break;
case 1079:
#line 7215 "cs-parser.jay"
  {
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], MemberCache.IndexerNameAlias, Location.Null);
	  }
  break;
case 1080:
#line 7219 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 1081:
  case_1081();
  break;
case 1082:
  case_1082();
  break;
case 1083:
  case_1083();
  break;
case 1084:
  case_1084();
  break;
case 1086:
#line 7255 "cs-parser.jay"
  {
		yyVal = new MemberName (((MemberName) yyVals[-2+yyTop]), (MemberName) yyVals[0+yyTop]);
	  }
  break;
case 1088:
#line 7263 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 1089:
#line 7267 "cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 1090:
#line 7274 "cs-parser.jay"
  {
		yyVal = new List<DocumentationParameter> (0);
	  }
  break;
case 1092:
  case_1092();
  break;
case 1093:
  case_1093();
  break;
case 1094:
  case_1094();
  break;
#line default
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
//t          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
//t            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
//t        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: ;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: ;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

/*
 All more than 3 lines long rules are wrapped into a method
*/
void case_6()
#line 389 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			Attributes attrs = (Attributes) yyVals[0+yyTop];
			report.Error (1730, attrs.Attrs [0].Location,
				"Assembly and module attributes must precede all other elements except using clauses and extern alias declarations");

			current_namespace.UnattachedAttributes = attrs;
		}
	  }

void case_8()
#line 403 "cs-parser.jay"
{
		if (yyToken == Token.EXTERN_ALIAS)
			report.Error (439, lexer.Location, "An extern alias declaration must precede all other elements");
		else
			Error_SyntaxError (yyToken);
	  }

void case_13()
#line 423 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "alias") {
			syntax_error (lt.Location, "`alias' expected");
		} else {
			if (lang_version == LanguageVersion.ISO_1)
				FeatureIsNotAvailable (lt.Location, "external alias");

			lt = (LocatedToken) yyVals[-1+yyTop];
			if (lt.Value == QualifiedAliasMember.GlobalAlias) {
				RootNamespace.Error_GlobalNamespaceRedefined (report, lt.Location);
			}
			
			var na = new UsingExternAlias (new SimpleMemberName (lt.Value, lt.Location), GetLocation (yyVals[-3+yyTop]));
			current_namespace.AddUsing (na);
			
			lbag.AddLocation (na, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_17()
#line 456 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_18()
#line 464 "cs-parser.jay"
{
		var un = new UsingNamespace ((ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		current_namespace.AddUsing (un);
		
		lbag.AddLocation (un, GetLocation (yyVals[0+yyTop]));
	  }

void case_19()
#line 471 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-3+yyTop];
		if (lang_version != LanguageVersion.ISO_1 && lt.Value == "global") {
			report.Warning (440, 2, lt.Location,
			 "An alias named `global' will not be used when resolving `global::'. The global namespace will be used instead");
		}

		var un = new UsingAliasNamespace (new SimpleMemberName (lt.Value, lt.Location), (ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		current_namespace.AddUsing (un);
		
		lbag.AddLocation (un, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_20()
#line 484 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	 }

void case_21()
#line 497 "cs-parser.jay"
{
		Attributes attrs = (Attributes) yyVals[-2+yyTop];
		var name = (MemberName) yyVals[0+yyTop];
		if (attrs != null) {
			bool valid_global_attrs = true;
			if ((current_namespace.DeclarationFound || current_namespace != file)) {
				valid_global_attrs = false;
			} else {
				foreach (var a in attrs.Attrs) {
					if (a.ExplicitTarget == "assembly" || a.ExplicitTarget == "module")
						continue;
						
					valid_global_attrs = false;
					break;
				}
			}
			
			if (!valid_global_attrs)
				report.Error (1671, name.Location, "A namespace declaration cannot have modifiers or attributes");
		}
	
		module.AddAttributes (attrs, current_namespace);
		
		var ns = new NamespaceContainer (name, current_namespace);
		current_namespace.AddTypeContainer (ns);
		current_container = current_namespace = ns;
	  }

void case_22()
#line 525 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_23()
#line 530 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null)
			lbag.AddLocation (current_container, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		else
			lbag.AddLocation (current_container, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  
		current_container = current_namespace = current_namespace.Parent;
	  }

void case_24()
#line 539 "cs-parser.jay"
{
		report.Error (1514, lexer.Location, "Unexpected symbol `{0}', expecting `.' or `{{'", GetSymbolName (yyToken));

		var name = (MemberName) yyVals[0+yyTop];		
		var ns = new NamespaceContainer (name, current_namespace);
		lbag.AddLocation (ns, GetLocation (yyVals[-1+yyTop]));
		current_namespace.AddTypeContainer (ns);
	  }

void case_27()
#line 553 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }

void case_28()
#line 561 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName (lt.Value, lt.Location);
	  }

void case_29()
#line 566 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, lt.Location);		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_30()
#line 572 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new MemberName ("<invalid>", lexer.Location);
	  }

void case_43()
#line 610 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			TypeContainer ds = (TypeContainer)yyVals[0+yyTop];

			if ((ds.ModFlags & (Modifiers.PRIVATE | Modifiers.PROTECTED)) != 0){
				report.Error (1527, ds.Location, 
				"Namespace elements cannot be explicitly declared as private, protected or protected internal");
			}

			/* Here is a trick, for explicit attributes we don't know where they belong to until*/
			/* we parse succeeding declaration hence we parse them as normal and re-attach them*/
			/* when we know whether they are global (assembly:, module:) or local (type:).*/
			if (ds.OptAttributes != null) {
				ds.OptAttributes.ConvertGlobalAttributes (ds, current_namespace, !current_namespace.DeclarationFound && current_namespace == file);
			}
		}
		current_namespace.DeclarationFound = true;
	  }

void case_45()
#line 632 "cs-parser.jay"
{
		current_namespace.UnattachedAttributes = (Attributes) yyVals[-1+yyTop];
		report.Error (1518, lexer.Location, "Attributes must be attached to class, delegate, enum, interface or struct");
		lexer.putback ('}');
	  }

void case_53()
#line 665 "cs-parser.jay"
{
		var sect = (List<Attribute>) yyVals[0+yyTop];
		yyVal = new Attributes (sect);
	  }

void case_54()
#line 670 "cs-parser.jay"
{
		Attributes attrs = yyVals[-1+yyTop] as Attributes;
		var sect = (List<Attribute>) yyVals[0+yyTop];
		if (attrs == null)
			attrs = new Attributes (sect);
		else if (sect != null)
			attrs.AddAttributes (sect);
		yyVal = attrs;
	  }

void case_55()
#line 683 "cs-parser.jay"
{
	  	PushLocation (GetLocation (yyVals[0+yyTop]));
		lexer.parsing_attribute_section = true;
	  }

void case_56()
#line 688 "cs-parser.jay"
{
		lexer.parsing_attribute_section = false;
		yyVal = yyVals[0+yyTop];
	  }

void case_57()
#line 696 "cs-parser.jay"
{
		current_attr_target = (string) yyVals[-1+yyTop];
		if (current_attr_target == "assembly" || current_attr_target == "module") {
			Lexer.check_incorrect_doc_comment ();
		}
	  }

void case_58()
#line 703 "cs-parser.jay"
{
		/* when attribute target is invalid*/
		if (current_attr_target == string.Empty)
			yyVal = new List<Attribute> (0);
		else
			yyVal = yyVals[-2+yyTop];

		lbag.InsertLocation (yyVal, 0, PopLocation ());
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));
		}

		current_attr_target = null;
		lexer.parsing_attribute_section = false;
 	  }

void case_59()
#line 721 "cs-parser.jay"
{
		yyVal = yyVals[-2+yyTop];

		lbag.InsertLocation (yyVal, 0, PopLocation ());
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (yyVal, GetLocation(yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (yyVal, GetLocation(yyVals[0+yyTop]));
		}
	  }

void case_60()
#line 732 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		var lt = (LocatedToken) yyVals[-1+yyTop];
		var tne = new SimpleName (lt.Value, null, lt.Location);

		yyVal = new List<Attribute> () {
			new Attribute (null, tne, null, GetLocation (yyVals[-1+yyTop]), false)
		};
	  }

void case_61()
#line 743 "cs-parser.jay"
{
		if (CheckAttributeTarget (yyToken, GetTokenName (yyToken), GetLocation (yyVals[0+yyTop])).Length > 0)
			Error_SyntaxError (yyToken);

 		yyVal = null;
	  }

void case_62()
#line 753 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = CheckAttributeTarget (yyToken, lt.Value, lt.Location);
	  }

void case_66()
#line 767 "cs-parser.jay"
{
		var attrs = (List<Attribute>) yyVals[-2+yyTop];
		if (attrs != null) {
			attrs.Add ((Attribute) yyVals[0+yyTop]);
	  		lbag.AppendTo (attrs, GetLocation (yyVals[-1+yyTop]));
	  	}

		yyVal = attrs;
	  }

void case_68()
#line 784 "cs-parser.jay"
{
		--lexer.parsing_block;
		
		var tne = (ATypeNameExpression) yyVals[-2+yyTop];
		if (tne.HasTypeArguments) {
			report.Error (404, tne.Location, "Attributes cannot be generic");
		}

		yyVal = new Attribute (current_attr_target, tne, (Arguments[]) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), lexer.IsEscapedIdentifier (tne));
	  }

void case_73()
#line 812 "cs-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);
		yyVal = new Arguments [] { a, null };
	  }

void case_74()
#line 818 "cs-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);  
		yyVal = new Arguments [] { null, a };
	  }

void case_75()
#line 824 "cs-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] != null) {
			report.Error (1016, ((Argument) yyVals[0+yyTop]).Expr.Location, "Named attribute arguments must appear after the positional arguments");
			o [0] = new Arguments (4);
		}
		
		Arguments args = ((Arguments) o [0]);
		if (args.Count > 0 && !(yyVals[0+yyTop] is NamedArgument) && args [args.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
		
		args.Add ((Argument) yyVals[0+yyTop]);
	  }

void case_76()
#line 838 "cs-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] == null) {
			o [1] = new Arguments (4);
		}

		((Arguments) o [1]).Add ((Argument) yyVals[0+yyTop]);
	  }

void case_79()
#line 855 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_81()
#line 867 "cs-parser.jay"
{
	  	--lexer.parsing_block;
	  	var lt = (LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop]);	  
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }

void case_82()
#line 877 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "named argument");
			
		/* Avoid boxing in common case (no modifier)*/
		var arg_mod = yyVals[-1+yyTop] == null ? Argument.AType.None : (Argument.AType) yyVals[-1+yyTop];
			
		var lt = (LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop], arg_mod);
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }

void case_89()
#line 914 "cs-parser.jay"
{
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }

void case_90()
#line 919 "cs-parser.jay"
{
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }

void case_104()
#line 940 "cs-parser.jay"
{
		report.Error (1519, lexer.Location, "Unexpected symbol `{0}' in class, struct, or interface member declaration",
			GetSymbolName (yyToken));
		yyVal = null;
		lexer.parsing_generic_declaration = false;
	  }

void case_105()
#line 950 "cs-parser.jay"
{
		current_local_parameters = current_type.PrimaryConstructorParameters;
		if (current_local_parameters == null) {
			report.Error (9010, GetLocation (yyVals[0+yyTop]), "Primary constructor body is not allowed");
			current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		}

		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_106()
#line 961 "cs-parser.jay"
{
		current_local_parameters = null;
		var t = current_type as ClassOrStruct;
		if (t != null) {
			var b = (ToplevelBlock) yyVals[0+yyTop];
			if (t.PrimaryConstructorBlock != null) {
				report.Error (8041, b.StartLocation, "Primary constructor already has a body");
			} else {
				t.PrimaryConstructorBlock = b;
			}
		}
	  }

void case_108()
#line 983 "cs-parser.jay"
{ 
		lexer.ConstraintsParsing = true;
		valid_param_mod = ParameterModifierType.PrimaryConstructor;
		push_current_container (new Struct (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
	  }

void case_109()
#line 991 "cs-parser.jay"
{
		valid_param_mod = 0;
		lexer.ConstraintsParsing = false;

		if (yyVals[-2+yyTop] != null)
			current_type.PrimaryConstructorParameters = (ParametersCompiled) yyVals[-2+yyTop];

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support)
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-6+yyTop]));
		
		lexer.parsing_modifiers = true;
	  }

void case_110()
#line 1009 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_111()
#line 1014 "cs-parser.jay"
{
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_112()
#line 1020 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] == null) {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		} else {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		yyVal = pop_current_class ();
	  }

void case_114()
#line 1038 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		var mod = (Modifiers) yyVals[-3+yyTop];
		current_field = new Const (current_type, (FullNamedExpression) yyVals[-1+yyTop], mod, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
		current_type.AddMember (current_field);
		
		if ((mod & Modifiers.STATIC) != 0) {
			report.Error (504, current_field.Location, "The constant `{0}' cannot be marked static", current_field.GetSignatureForError ());
		}
		
		yyVal = current_field;
	  }

void case_115()
#line 1051 "cs-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_field = null;
	  }

void case_116()
#line 1064 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		current_type.AddMember (new Const (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], MemberName.Null, (Attributes) yyVals[-4+yyTop]));
	  }

void case_121()
#line 1089 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_123()
#line 1102 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_124()
#line 1107 "cs-parser.jay"
{
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
		yyVal = null;
	  }

void case_127()
#line 1122 "cs-parser.jay"
{
	  	lexer.parsing_generic_declaration = false;

		FullNamedExpression type = (FullNamedExpression) yyVals[-1+yyTop];
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (670, GetLocation (yyVals[-1+yyTop]), "Fields cannot have void type");
			
		var lt = (LocatedToken) yyVals[0+yyTop];
		current_field = new Field (current_type, type, (Modifiers) yyVals[-2+yyTop], new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-3+yyTop]);
		current_type.AddField (current_field);
		yyVal = current_field;
	  }

void case_128()
#line 1137 "cs-parser.jay"
{ 
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
			
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
		current_field = null;
	  }

void case_129()
#line 1150 "cs-parser.jay"
{ 
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "fixed size buffers");

		var lt = (LocatedToken) yyVals[0+yyTop];
		current_field = new FixedField (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop],
			new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
			
		current_type.AddField (current_field);
	  }

void case_130()
#line 1161 "cs-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
	    }

		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];	    
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
	    current_field = null;
	  }

void case_133()
#line 1184 "cs-parser.jay"
{
	  	++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_134()
#line 1190 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		current_field.Initializer = (Expression) yyVals[0+yyTop];
		lbag.AppendToMember (current_field, GetLocation (yyVals[-2+yyTop]));
		end_block (lexer.Location);
		current_local_parameters = null;
	  }

void case_139()
#line 1217 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_141()
#line 1227 "cs-parser.jay"
{
		--lexer.parsing_block;
		var lt = (LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_146()
#line 1253 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];	  
		yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_148()
#line 1266 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_149()
#line 1272 "cs-parser.jay"
{
		report.Error (443, lexer.Location, "Value or constant expected");
		yyVal = null;
	  }

void case_152()
#line 1282 "cs-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }

void case_153()
#line 1291 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.NotAllowed;

		/* Was added earlier in the case of body being eof for full ast*/
	  }

void case_154()
#line 1298 "cs-parser.jay"
{
		Method method = (Method) yyVals[-2+yyTop];
		method.Block = (ToplevelBlock) yyVals[0+yyTop];
		async_block = false;
		
		if (method.Block == null) {
			method.ParameterInfo.CheckParameters (method);

			if ((method.ModFlags & Modifiers.ASYNC) != 0) {
				report.Error (1994, method.Location, "`{0}': The async modifier can only be used with methods that have a body",
					method.GetSignatureForError ());
			}
		} else {
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, method.Location, "`{0}': interface members cannot have a definition",
					method.GetSignatureForError ());
			}
		}

		current_local_parameters = null;

		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_156()
#line 1333 "cs-parser.jay"
{
		valid_param_mod = 0;
		MemberName name = (MemberName) yyVals[-4+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];

		var method = Method.Create (current_type, (FullNamedExpression) yyVals[-5+yyTop], (Modifiers) yyVals[-6+yyTop],
				     name, current_local_parameters, (Attributes) yyVals[-7+yyTop]);

		current_type.AddMember (method);

		async_block = (method.ModFlags & Modifiers.ASYNC) != 0;

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (method, mod_locations, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));

		yyVal = method;

		lexer.ConstraintsParsing = true;
	  }

void case_157()
#line 1355 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null) {
			var method = (Method) yyVals[-1+yyTop];
			method.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);
		}

		yyVal = yyVals[-1+yyTop];
	  }

void case_159()
#line 1374 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
	  	valid_param_mod = ParameterModifierType.All;
	  }

void case_161()
#line 1383 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;

		MemberName name = (MemberName) yyVals[-6+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		var modifiers = (Modifiers) yyVals[-10+yyTop];
		modifiers |= Modifiers.PARTIAL;

		var method = Method.Create (current_type, new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-8+yyTop])),
				     modifiers, name, current_local_parameters, (Attributes) yyVals[-11+yyTop]);

		current_type.AddMember (method);

		async_block = (method.ModFlags & Modifiers.ASYNC) != 0;

		if (yyVals[0+yyTop] != null)
			method.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		StoreModifierLocation (Modifiers.PARTIAL, GetLocation (yyVals[-9+yyTop]));
		lbag.AddMember (method, mod_locations, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = method;
	  }

void case_162()
#line 1414 "cs-parser.jay"
{
		MemberName name = (MemberName) yyVals[-3+yyTop];
		report.Error (1585, name.Location, 
			"Member modifier `{0}' must precede the member type and name", ModifiersExtensions.Name ((Modifiers) yyVals[-4+yyTop]));

		var method = Method.Create (current_type, (FullNamedExpression) yyVals[-5+yyTop],
					    0, name, (ParametersCompiled) yyVals[-1+yyTop], (Attributes) yyVals[-7+yyTop]);

		current_type.AddMember (method);

		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_163()
#line 1435 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.Undefined;

		MemberName name = (MemberName) yyVals[-1+yyTop];
		var method = Method.Create (current_type, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-3+yyTop],
									name, current_local_parameters, (Attributes) yyVals[-4+yyTop]);

		current_type.AddMember (method);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_168()
#line 1464 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_6) {
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "expression bodied members");
		}

		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	 }

void case_169()
#line 1473 "cs-parser.jay"
{
		lexer.parsing_block = 0;
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		var b = end_block (GetLocation (yyVals[0+yyTop]));
		b.IsCompilerGenerated = true;
		yyVal = b;
	 }

void case_172()
#line 1489 "cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
	  	yyVal = new ParametersCompiled (pars_list.ToArray ());
	  }

void case_173()
#line 1494 "cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = new ParametersCompiled (pars_list.ToArray ()); 
	  }

void case_174()
#line 1501 "cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[0+yyTop])));
		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_175()
#line 1507 "cs-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[-2+yyTop] } );			
	  }

void case_176()
#line 1514 "cs-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_177()
#line 1524 "cs-parser.jay"
{
		report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[-2+yyTop])) }, true);
	  }

void case_178()
#line 1530 "cs-parser.jay"
{
		report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_181()
#line 1547 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_182()
#line 1555 "cs-parser.jay"
{
		parameters_bucket.Clear ();
		Parameter p = (Parameter) yyVals[0+yyTop];
		parameters_bucket.Add (p);
		
		default_parameter_used = p.HasDefaultValue;
		yyVal = parameters_bucket;
	  }

void case_183()
#line 1564 "cs-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter) yyVals[0+yyTop];
		if (p != null) {
			if (p.HasExtensionMethodModifier)
				report.Error (1100, p.Location, "The parameter modifier `this' can only be used on the first parameter");
			else if (!p.HasDefaultValue && default_parameter_used)
				report.Error (1737, p.Location, "Optional parameter cannot precede required parameters");

			default_parameter_used |= p.HasDefaultValue;
			pars.Add (p);
			
			lbag.AddLocation (p, GetLocation (yyVals[-1+yyTop]));
		}
		
		yyVal = yyVals[-2+yyTop];
	  }

void case_184()
#line 1588 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], lt.Location);
	  }

void case_185()
#line 1596 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		report.Error (1552, lt.Location, "Array type specifier, [], must appear before parameter name");
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Parameter.Modifier) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop], lt.Location);
	  }

void case_186()
#line 1602 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  	Location l = GetLocation (yyVals[0+yyTop]);
		yyVal = new Parameter (null, null, Parameter.Modifier.NONE, (Attributes) yyVals[-1+yyTop], l);
	  }

void case_187()
#line 1611 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  	Location l = GetLocation (yyVals[0+yyTop]);
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], null, (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], l);
	  }

void case_189()
#line 1625 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		if (lang_version <= LanguageVersion.V_3) {
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "optional parameter");
		}
		
		Parameter.Modifier mod = (Parameter.Modifier) yyVals[-5+yyTop];
		if (mod != Parameter.Modifier.NONE) {
			switch (mod) {
			case Parameter.Modifier.REF:
			case Parameter.Modifier.OUT:
				report.Error (1741, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
				
			case Parameter.Modifier.This:
				report.Error (1743, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
			default:
				throw new NotImplementedException (mod.ToString ());
			}
				
			mod = Parameter.Modifier.NONE;
		}
		
		if ((valid_param_mod & ParameterModifierType.DefaultValue) == 0)
			report.Error (1065, GetLocation (yyVals[-2+yyTop]), "Optional parameter is not valid in this context");
		
		var lt = (LocatedToken) yyVals[-3+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-4+yyTop], lt.Value, mod, (Attributes) yyVals[-6+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
		
		if (yyVals[0+yyTop] != null)
			((Parameter) yyVal).DefaultValue = new DefaultParameterValueExpression ((Expression) yyVals[0+yyTop]);
	  }

void case_193()
#line 1674 "cs-parser.jay"
{
		Parameter.Modifier p2 = (Parameter.Modifier)yyVals[0+yyTop];
  		Parameter.Modifier mod = (Parameter.Modifier)yyVals[-1+yyTop] | p2;
  		if (((Parameter.Modifier)yyVals[-1+yyTop] & p2) == p2) {
  			Error_DuplicateParameterModifier (lexer.Location, p2);
  		} else {
	  		switch (mod & ~Parameter.Modifier.This) {
  				case Parameter.Modifier.REF:
					report.Error (1101, lexer.Location, "The parameter modifiers `this' and `ref' cannot be used altogether");
  					break;
   				case Parameter.Modifier.OUT:
					report.Error (1102, lexer.Location, "The parameter modifiers `this' and `out' cannot be used altogether");
  					break;
  				default:
 					report.Error (1108, lexer.Location, "A parameter cannot have specified more than one modifier");
 					break;
 			}
  		}
  		yyVal = mod;
	  }

void case_194()
#line 1698 "cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Ref) == 0)
	  		Error_ParameterModifierNotValid ("ref", GetLocation (yyVals[0+yyTop]));
	  		
	  	yyVal = Parameter.Modifier.REF;
	  }

void case_195()
#line 1705 "cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Out) == 0)
	  		Error_ParameterModifierNotValid ("out", GetLocation (yyVals[0+yyTop]));
	  
	  	yyVal = Parameter.Modifier.OUT;
	  }

void case_196()
#line 1712 "cs-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.This) == 0)
	  		Error_ParameterModifierNotValid ("this", GetLocation (yyVals[0+yyTop]));

	  	if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "extension methods");
	  			
		yyVal = Parameter.Modifier.This;
	  }

void case_197()
#line 1725 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Attributes) yyVals[-3+yyTop], lt.Location);
	  }

void case_198()
#line 1730 "cs-parser.jay"
{
		report.Error (1751, GetLocation (yyVals[-4+yyTop]), "Cannot specify a default value for a parameter array");
		
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Attributes) yyVals[-5+yyTop], lt.Location);		
	  }

void case_199()
#line 1737 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-1+yyTop], null, (Attributes) yyVals[-3+yyTop], Location.Null);
	  }

void case_200()
#line 1746 "cs-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.Params) == 0)
			report.Error (1670, (GetLocation (yyVals[0+yyTop])), "The `params' modifier is not allowed in current context");
	  }

void case_201()
#line 1751 "cs-parser.jay"
{
		Parameter.Modifier mod = (Parameter.Modifier)yyVals[0+yyTop];
		if ((mod & Parameter.Modifier.This) != 0) {
			report.Error (1104, GetLocation (yyVals[-1+yyTop]), "The parameter modifiers `this' and `params' cannot be used altogether");
		} else {
			report.Error (1611, GetLocation (yyVals[-1+yyTop]), "The params parameter cannot be declared as ref or out");
		}	  
	  }

void case_203()
#line 1767 "cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Arglist) == 0)
	  		report.Error (1669, GetLocation (yyVals[0+yyTop]), "__arglist is not valid in this context");
	  }

void case_204()
#line 1778 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		if (doc_support)
			tmpComment = Lexer.consume_doc_comment ();
	  }

void case_205()
#line 1784 "cs-parser.jay"
{
		var type = (FullNamedExpression) yyVals[-3+yyTop];
		current_property = new Property (current_type, type, (Modifiers) yyVals[-4+yyTop],
			(MemberName) yyVals[-2+yyTop], (Attributes) yyVals[-5+yyTop]);
			
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (547, GetLocation (yyVals[-3+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		current_type.AddMember (current_property);
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[0+yyTop]));
		
		lexer.PropertyParsing = true;
	  }

void case_206()
#line 1798 "cs-parser.jay"
{
		lexer.PropertyParsing = false;
		
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();				
	  }

void case_207()
#line 1805 "cs-parser.jay"
{
		lbag.AppendToMember (current_property, GetLocation (yyVals[0+yyTop]));
		lexer.parsing_modifiers = true;
	  }

void case_209()
#line 1817 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		if (doc_support)
			tmpComment = Lexer.consume_doc_comment ();
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_210()
#line 1824 "cs-parser.jay"
{
		var type = (FullNamedExpression) yyVals[-3+yyTop];
		var property = new Property (current_type, type, (Modifiers) yyVals[-4+yyTop],
			(MemberName) yyVals[-2+yyTop], (Attributes) yyVals[-5+yyTop]);

		property.Get = new Property.GetMethod (property, Modifiers.COMPILER_GENERATED, null, property.Location);
		property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];

		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, property.Get.Block.StartLocation,
				"`{0}': interface members cannot have a definition", property.GetSignatureForError ());
		}

		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (547, GetLocation (yyVals[-3+yyTop]), "`{0}': property or indexer cannot have void type", property.GetSignatureForError ());

		current_type.AddMember (property);

		current_local_parameters = null;
	  }

void case_212()
#line 1849 "cs-parser.jay"
{
		++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_213()
#line 1855 "cs-parser.jay"
{
		--lexer.parsing_block;
		((Property)current_property).Initializer = (Expression) yyVals[-1+yyTop];
		lbag.AppendToMember (current_property, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		end_block (GetLocation (yyVals[0+yyTop]));
		current_local_parameters = null;
	  }

void case_217()
#line 1876 "cs-parser.jay"
{
		valid_param_mod = 0;
		var type = (FullNamedExpression) yyVals[-5+yyTop];
		Indexer indexer = new Indexer (current_type, type, (MemberName) yyVals[-4+yyTop], (Modifiers) yyVals[-6+yyTop], (ParametersCompiled) yyVals[-1+yyTop], (Attributes) yyVals[-7+yyTop]);
			
		current_property = indexer;

  		current_type.AddIndexer (indexer);
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
  		
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (620, GetLocation (yyVals[-5+yyTop]), "`{0}': indexer return type cannot be `void'", indexer.GetSignatureForError ());  		

		if (indexer.ParameterInfo.IsEmpty) {
			report.Error (1551, GetLocation (yyVals[-3+yyTop]), "Indexers must have at least one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		lexer.PropertyParsing = true;
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];
	  }

void case_218()
#line 1902 "cs-parser.jay"
{
 		lexer.PropertyParsing = false;
		current_local_parameters = null;

		if (current_property.AccessorFirst != null && current_property.AccessorFirst.Block == null)
			((Indexer) current_property).ParameterInfo.CheckParameters (current_property);
	  
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();
			
		current_property = null;		
	  }

void case_220()
#line 1922 "cs-parser.jay"
{
		current_property.Get = new Indexer.GetIndexerMethod (current_property, Modifiers.COMPILER_GENERATED, current_local_parameters, null, current_property.Location);
		current_property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];
	  }

void case_225()
#line 1934 "cs-parser.jay"
{
	  	if (yyToken == Token.CLOSE_BRACE) {
	  		report.Error (548, lexer.Location, "`{0}': property or indexer must have at least one accessor", current_property.GetSignatureForError ());
		} else {
			if (yyToken == Token.SEMICOLON)
				report.Error (1597, lexer.Location, "Semicolon after method or accessor block is not valid");
			else
				report.Error (1014, GetLocation (yyVals[0+yyTop]), "A get or set accessor expected");
		}
	  }

void case_226()
#line 1948 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
	  
		if (current_property.Get != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
		
		if (current_property is Indexer) {
			current_property.Get = new Indexer.GetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop], ((Indexer)current_property).ParameterInfo.Clone (),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Get = new Property.GetMethod (current_property,
				(Modifiers) yyVals[-1+yyTop], (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}	
	  
		current_local_parameters = current_property.Get.ParameterInfo;	  
		lbag.AddMember (current_property.Get, mod_locations);
		lexer.PropertyParsing = false;
	  }

void case_227()
#line 1970 "cs-parser.jay"
{
	  	if (yyVals[0+yyTop] != null) {
	  		current_property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];			
	  	
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Get.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Get.GetSignatureForError ());
			}		
		}
	  
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support)
			if (Lexer.doc_state == XmlCommentState.Error)
				Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_228()
#line 1991 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
		
		if (current_property.Set != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
	  
		if (current_property is Indexer) {
			current_property.Set = new Indexer.SetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop],
				ParametersCompiled.MergeGenerated (compiler,
				((Indexer)current_property).ParameterInfo, true, new Parameter (
					current_property.TypeExpression, "value", Parameter.Modifier.NONE, null, GetLocation (yyVals[0+yyTop])),
					null),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Set = new Property.SetMethod (current_property, (Modifiers) yyVals[-1+yyTop], 
				ParametersCompiled.CreateImplicitParameter (current_property.TypeExpression, GetLocation (yyVals[0+yyTop])),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}
		
		current_local_parameters = current_property.Set.ParameterInfo;	
		lbag.AddMember (current_property.Set, mod_locations);
		lexer.PropertyParsing = false;
	  }

void case_229()
#line 2018 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {		
			current_property.Set.Block = (ToplevelBlock) yyVals[0+yyTop];
		
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Set.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Set.GetSignatureForError ());
			}
		}
		
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support
			&& Lexer.doc_state == XmlCommentState.Error)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_231()
#line 2040 "cs-parser.jay"
{
		/* TODO: lbag*/
	  	yyVal = null;
	  }

void case_232()
#line 2045 "cs-parser.jay"
{
	  	Error_SyntaxError (1043, yyToken, "Invalid accessor body");
	  	yyVal = null;
	  }

void case_234()
#line 2059 "cs-parser.jay"
{
		lexer.ConstraintsParsing = true;
		push_current_container (new Interface (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-2+yyTop]));		
	  }

void case_235()
#line 2066 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support) {
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }

void case_236()
#line 2080 "cs-parser.jay"
{
		--lexer.parsing_declaration;	  
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_237()
#line 2086 "cs-parser.jay"
{
		if (yyVals[0+yyTop] == null) {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		} else {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		yyVal = pop_current_class ();
	  }

void case_241()
#line 2107 "cs-parser.jay"
{
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }

void case_242()
#line 2112 "cs-parser.jay"
{
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }

void case_253()
#line 2150 "cs-parser.jay"
{
		OperatorDeclaration decl = (OperatorDeclaration) yyVals[-2+yyTop];
		if (decl != null) {
			Operator op = new Operator (
				current_type, decl.optype, decl.ret_type, (Modifiers) yyVals[-3+yyTop], 
				current_local_parameters,
				(ToplevelBlock) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop], decl.location);
				
			if (op.Block == null)
				op.ParameterInfo.CheckParameters (op);

			if (doc_support) {
				op.DocComment = tmpComment;
				Lexer.doc_state = XmlCommentState.Allowed;
			}

			/* Note again, checking is done in semantic analysis*/
			current_type.AddOperator (op);

			lbag.AddMember (op, mod_locations, lbag.GetLocations (decl));
		}
		
		current_local_parameters = null;
	  }

void case_255()
#line 2179 "cs-parser.jay"
{
		report.Error (590, GetLocation (yyVals[0+yyTop]), "User-defined operators cannot return void");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_256()
#line 2187 "cs-parser.jay"
{
		valid_param_mod = ParameterModifierType.DefaultValue;
		if ((Operator.OpType) yyVals[-1+yyTop] == Operator.OpType.Is)
			valid_param_mod |= ParameterModifierType.Out;
	  }

void case_257()
#line 2193 "cs-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		Operator.OpType op = (Operator.OpType) yyVals[-4+yyTop];
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];
		
		int p_count = current_local_parameters.Count;
		if (p_count == 1) {
			if (op == Operator.OpType.Addition)
				op = Operator.OpType.UnaryPlus;
			else if (op == Operator.OpType.Subtraction)
				op = Operator.OpType.UnaryNegation;
		}
		
		if (IsUnaryOperator (op)) {
			if (p_count == 2) {
				report.Error (1020, loc, "Overloadable binary operator expected");
			} else if (p_count != 1) {
				report.Error (1535, loc, "Overloaded unary operator `{0}' takes one parameter",
					Operator.GetName (op));
			}
		} else if (op == Operator.OpType.Is) {
			/* TODO: Special checks for is operator*/
		} else {
			if (p_count == 1) {
				report.Error (1019, loc, "Overloadable unary operator expected");
			} else if (p_count != 2) {
				report.Error (1534, loc, "Overloaded binary operator `{0}' takes two parameters",
					Operator.GetName (op));
			}
		}
		
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (op, (FullNamedExpression) yyVals[-6+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_281()
#line 2264 "cs-parser.jay"
{
		if (lang_version != LanguageVersion.Experimental)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "is user operator");

		yyVal = Operator.OpType.Is;
	  }

void case_283()
#line 2278 "cs-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  

		if (current_local_parameters.Count != 1) {
			report.Error (1535, loc, "Overloaded unary operator `implicit' takes one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_285()
#line 2301 "cs-parser.jay"
{
		valid_param_mod = 0;
		
		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  

		if (current_local_parameters.Count != 1) {
			report.Error (1535, loc, "Overloaded unary operator `explicit' takes one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Explicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_286()
#line 2320 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_287()
#line 2326 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	yyVal = new OperatorDeclaration (Operator.OpType.Explicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_288()
#line 2336 "cs-parser.jay"
{ 
		Constructor c = (Constructor) yyVals[-1+yyTop];
		c.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (doc_support)
			c.DocComment = ConsumeStoredComment ();

		current_local_parameters = null;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_289()
#line 2353 "cs-parser.jay"
{
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		valid_param_mod = ParameterModifierType.All;
	  }

void case_290()
#line 2362 "cs-parser.jay"
{
		valid_param_mod = 0;
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];
		
		var lt = (LocatedToken) yyVals[-4+yyTop];
		var mods = (Modifiers) yyVals[-5+yyTop];
		var c = new Constructor (current_type, lt.Value, mods, (Attributes) yyVals[-6+yyTop], current_local_parameters, lt.Location);

		if (lt.Value != current_container.MemberName.Name) {
			report.Error (1520, c.Location, "Class, struct, or interface method must have a return type");
		} else if ((mods & Modifiers.STATIC) != 0) {
			if (!current_local_parameters.IsEmpty) {
				report.Error (132, c.Location, "`{0}': The static constructor must be parameterless",
					c.GetSignatureForError ());
			}

			if ((mods & Modifiers.AccessibilityMask) != 0){
				report.Error (515, c.Location,
					"`{0}': static constructor cannot have an access modifier",
					c.GetSignatureForError ());
			}
		} else {
			if (current_type.Kind == MemberKind.Struct && current_local_parameters.IsEmpty) {
				if (lang_version < LanguageVersion.V_6)
					FeatureIsNotAvailable (GetLocation (yyVals[-4+yyTop]), "struct parameterless instance constructor");

				if ((mods & Modifiers.PUBLIC) == 0) {
					report.Error (8075, c.Location, "`{0}': Structs parameterless instance constructor must be public", c.GetSignatureForError ());
				}
			}
		}

		current_type.AddConstructor (c);
		lbag.AddMember (c, mod_locations, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = c;

		/**/
		/* start block here, so possible anonymous methods inside*/
		/* constructor initializer can get correct parent block*/
		/**/
	  	start_block (lexer.Location);
	  }

void case_291()
#line 2405 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			var c = (Constructor) yyVals[-1+yyTop];
			c.Initializer = (ConstructorInitializer) yyVals[0+yyTop];
			
			if (c.IsStatic) {
				report.Error (514, c.Location,
					"`{0}': static constructor cannot have an explicit `this' or `base' constructor call",
					c.GetSignatureForError ());
			}
		}

		yyVal = yyVals[-1+yyTop];
	  }

void case_297()
#line 2437 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		yyVal = new ConstructorBaseInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_299()
#line 2447 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		yyVal = new ConstructorThisInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_300()
#line 2453 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);	  
		yyVal = new ConstructorThisInitializer (null, GetLocation (yyVals[0+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_301()
#line 2459 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_302()
#line 2467 "cs-parser.jay"
{
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
		
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_303()
#line 2476 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-3+yyTop];
		if (lt.Value != current_container.MemberName.Name){
			report.Error (574, lt.Location, "Name of destructor must match name of class");
		} else if (current_container.Kind != MemberKind.Class){
			report.Error (575, lt.Location, "Only class types can contain destructor");
		}
		
		Destructor d = new Destructor (current_type, (Modifiers) yyVals[-6+yyTop],
			ParametersCompiled.EmptyReadOnlyParameters, (Attributes) yyVals[-7+yyTop], lt.Location);
		if (doc_support)
			d.DocComment = ConsumeStoredComment ();
		  
		d.Block = (ToplevelBlock) yyVals[0+yyTop];
		current_type.AddMember (d);
		lbag.AddMember (d, mod_locations, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[-1+yyTop]));

		current_local_parameters = null;
	  }

void case_304()
#line 2501 "cs-parser.jay"
{
		current_event_field = new EventField (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], (MemberName) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop]);
		current_type.AddMember (current_event_field);
		
		if (current_event_field.MemberName.ExplicitInterface != null) {
			report.Error (71, current_event_field.Location, "`{0}': An explicit interface implementation of an event must use property syntax",
			current_event_field.GetSignatureForError ());
		}
		
		yyVal = current_event_field;
	  }

void case_305()
#line 2515 "cs-parser.jay"
{
		if (doc_support) {
			current_event_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AddMember (current_event_field, mod_locations, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_event_field = null;
	  }

void case_306()
#line 2528 "cs-parser.jay"
{
		current_event = new EventProperty (current_type, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-4+yyTop], (MemberName) yyVals[-1+yyTop], (Attributes) yyVals[-5+yyTop]);
		current_type.AddMember (current_event);
		lbag.AddMember (current_event, mod_locations, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		
		lexer.EventParsing = true;
	  }

void case_307()
#line 2536 "cs-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface)
			report.Error (69, GetLocation (yyVals[-2+yyTop]), "Event in interface cannot have add or remove accessors");
	  
		lexer.EventParsing = false;
	  }

void case_308()
#line 2543 "cs-parser.jay"
{
		if (doc_support) {
			current_event.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AppendToMember (current_event, GetLocation (yyVals[-1+yyTop]));
	  	current_event = null;	
		current_local_parameters = null;
	  }

void case_309()
#line 2556 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		current_type.AddMember (new EventField (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], MemberName.Null, (Attributes) yyVals[-4+yyTop]));
	  }

void case_312()
#line 2570 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		current_event_field.Initializer = (Expression) yyVals[0+yyTop];
	  }

void case_317()
#line 2594 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_319()
#line 2604 "cs-parser.jay"
{
		--lexer.parsing_block;
		var lt = (LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_320()
#line 2613 "cs-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (68, lexer.Location, "`{0}': event in interface cannot have an initializer",
				current_event_field.GetSignatureForError ());
		}
		
	  	if ((current_event_field.ModFlags & Modifiers.ABSTRACT) != 0) {
			report.Error (74, lexer.Location, "`{0}': abstract event cannot have an initializer",
				current_event_field.GetSignatureForError ());
	  	}		
	  }

void case_324()
#line 2634 "cs-parser.jay"
{
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_325()
#line 2639 "cs-parser.jay"
{
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_326()
#line 2644 "cs-parser.jay"
{ 
		report.Error (1055, GetLocation (yyVals[0+yyTop]), "An add or remove accessor expected");
		yyVal = null;
	  }

void case_327()
#line 2652 "cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Add = new EventProperty.AddDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Add.ParameterInfo;
		
		lbag.AddMember (current_event.Add, mod_locations);
		lexer.EventParsing = false;		
	  }

void case_328()
#line 2664 "cs-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Add.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Add.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Add.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_329()
#line 2680 "cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Remove = new EventProperty.RemoveDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Remove.ParameterInfo;

		lbag.AddMember (current_event.Remove, mod_locations);
		lexer.EventParsing = false;		
	  }

void case_330()
#line 2692 "cs-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Remove.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Remove.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Remove.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_331()
#line 2708 "cs-parser.jay"
{
		report.Error (73, lexer.Location, "An add or remove accessor must have a body");
		yyVal = null;
	  }

void case_333()
#line 2717 "cs-parser.jay"
{
		current_type.UnattachedAttributes = (Attributes) yyVals[-1+yyTop];
		report.Error (1519, GetLocation (yyVals[-1+yyTop]), "An attribute is missing member declaration");
		lexer.putback ('}');
	  }

void case_334()
#line 2728 "cs-parser.jay"
{
		report.Error (1519, lexer.Location, "Unexpected symbol `}' in class, struct, or interface member declaration");
 
		lexer.putback ('}');

	  	lexer.parsing_generic_declaration = false;
		FullNamedExpression type = (FullNamedExpression) yyVals[-1+yyTop];
		current_field = new Field (current_type, type, (Modifiers) yyVals[-2+yyTop], MemberName.Null, (Attributes) yyVals[-3+yyTop]);
		current_type.AddField (current_field);
		yyVal = current_field;
	  }

void case_335()
#line 2746 "cs-parser.jay"
{
		if (doc_support)
			enumTypeComment = Lexer.consume_doc_comment ();
	  }

void case_336()
#line 2751 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;

		MemberName name = (MemberName) yyVals[-3+yyTop];
		if (name.IsGeneric) {
			report.Error (1675, name.Location, "Enums cannot have type parameters");
		}
		
		push_current_container (new Enum (current_container, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-5+yyTop], name, (Attributes) yyVals[-6+yyTop]), null);
	  }

void case_337()
#line 2763 "cs-parser.jay"
{
		lexer.parsing_modifiers = true;
	  
	  	/* here will be evaluated after CLOSE_BLACE is consumed.*/
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_338()
#line 2771 "cs-parser.jay"
{
		if (doc_support)
			current_container.DocComment = enumTypeComment;
			
		--lexer.parsing_declaration;

/*			if (doc_support)*/
/*				em.DocComment = ev.DocComment;*/

		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-1+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_341()
#line 2792 "cs-parser.jay"
{
	 	Error_TypeExpected (GetLocation (yyVals[-1+yyTop]));
		yyVal = null;
	 }

void case_346()
#line 2810 "cs-parser.jay"
{
	  	lbag.AddLocation (yyVals[-2+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	yyVal = yyVals[0+yyTop];
	  }

void case_347()
#line 2818 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-1+yyTop]);
	  	((Enum) current_type).AddEnumMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }

void case_348()
#line 2831 "cs-parser.jay"
{
	  	++lexer.parsing_block;
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
	  }

void case_349()
#line 2839 "cs-parser.jay"
{ 
		--lexer.parsing_block;
		
		var lt = (LocatedToken) yyVals[-3+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
	  	em.Initializer = new ConstInitializer (em, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	((Enum) current_type).AddEnumMember (em);
		
		if (doc_support)
			em.DocComment = ConsumeStoredComment ();

		yyVal = em;
	  }

void case_350()
#line 2853 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		var lt = (LocatedToken) yyVals[-1+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-2+yyTop]);
	  	((Enum) current_type).AddEnumMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }

void case_353()
#line 2880 "cs-parser.jay"
{
		valid_param_mod = 0;

		ParametersCompiled p = (ParametersCompiled) yyVals[-1+yyTop];

		Delegate del = new Delegate (current_container, (FullNamedExpression) yyVals[-5+yyTop], (Modifiers) yyVals[-7+yyTop], (MemberName) yyVals[-4+yyTop], p, (Attributes) yyVals[-8+yyTop]);

		p.CheckParameters (del);

		current_container.AddTypeContainer (del);

		current_delegate = del;
		lexer.ConstraintsParsing = true;
	  }

void case_355()
#line 2899 "cs-parser.jay"
{
		if (doc_support) {
			current_delegate.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  
		if (yyVals[-2+yyTop] != null)
			current_delegate.SetConstraints ((List<Constraints>) yyVals[-2+yyTop]);
		lbag.AddMember (current_delegate, mod_locations, GetLocation (yyVals[-10+yyTop]), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));

		yyVal = current_delegate;

		current_delegate = null;
	  }

void case_357()
#line 2918 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "nullable types");
	  
	  	yyVal = ComposedTypeSpecifier.CreateNullable (GetLocation (yyVals[0+yyTop]));
	  }

void case_359()
#line 2929 "cs-parser.jay"
{
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_360()
#line 2937 "cs-parser.jay"
{
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_362()
#line 2949 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_363()
#line 2955 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_364()
#line 2964 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);
	  }

void case_365()
#line 2969 "cs-parser.jay"
{  
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }

void case_367()
#line 2981 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");	  
	  
		yyVal = yyVals[-1+yyTop];
	  }

void case_368()
#line 2988 "cs-parser.jay"
{
		Error_TypeExpected (lexer.Location);
		yyVal = new TypeArguments ();
	  }

void case_369()
#line 2996 "cs-parser.jay"
{
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_370()
#line 3002 "cs-parser.jay"
{
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_372()
#line 3018 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters)yyVals[0+yyTop], lt.Location);
	  }

void case_373()
#line 3027 "cs-parser.jay"
{
	  	MemberName mn = (MemberName)yyVals[0+yyTop];
	  	if (mn.TypeParameters != null)
	  		syntax_error (mn.Location, string.Format ("Member `{0}' cannot declare type arguments",
	  			mn.GetSignatureForError ()));
	  }

void case_375()
#line 3038 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters) yyVals[0+yyTop], (ATypeNameExpression) yyVals[-2+yyTop], lt.Location);
	  }

void case_376()
#line 3047 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		yyVal = new MemberName (TypeDefinition.DefaultIndexerName, GetLocation (yyVals[0+yyTop]));
	  }

void case_377()
#line 3052 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		yyVal = new MemberName (TypeDefinition.DefaultIndexerName, null, (ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_378()
#line 3060 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_379()
#line 3066 "cs-parser.jay"
{
		var lt1 = (LocatedToken) yyVals[-3+yyTop];
		var lt2 = (LocatedToken) yyVals[-2+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[-1+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_380()
#line 3074 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberAccess ((ATypeNameExpression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_382()
#line 3084 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");
	  
		yyVal = yyVals[-1+yyTop];
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_383()
#line 3095 "cs-parser.jay"
{
		var tparams = new TypeParameters ();
		tparams.Add ((TypeParameter)yyVals[0+yyTop]);
		yyVal = tparams;
	  }

void case_384()
#line 3101 "cs-parser.jay"
{
		var tparams = (TypeParameters) yyVals[-2+yyTop];
		tparams.Add ((TypeParameter)yyVals[0+yyTop]);
		yyVal = tparams;
		lbag.AddLocation (yyVals[0+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_385()
#line 3111 "cs-parser.jay"
{
		var lt = (LocatedToken)yyVals[0+yyTop];
		yyVal = new TypeParameter (new MemberName (lt.Value, lt.Location), (Attributes)yyVals[-2+yyTop], (VarianceDecl) yyVals[-1+yyTop]);
  	  }

void case_386()
#line 3116 "cs-parser.jay"
{
  	  	if (GetTokenName (yyToken) == "type")
			report.Error (81, GetLocation (yyVals[0+yyTop]), "Type parameter declaration must be an identifier not a type");
		else
			Error_SyntaxError (yyToken);
			
  	  	yyVal = new TypeParameter (MemberName.Null, null, null);
  	  }

void case_395()
#line 3160 "cs-parser.jay"
{
		report.Error (1536, GetLocation (yyVals[0+yyTop]), "Invalid parameter type `void'");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_398()
#line 3176 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			yyVal = new ComposedCast ((ATypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			var sn = yyVals[-1+yyTop] as SimpleName;
			if (sn != null && sn.Name == "var")
				yyVal = new VarExpr (sn.Location);
			else
				yyVal = yyVals[-1+yyTop];
		}
	  }

void case_401()
#line 3196 "cs-parser.jay"
{
		Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_402()
#line 3204 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null)
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_405()
#line 3220 "cs-parser.jay"
{
		var types = new List<FullNamedExpression> (2);
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_406()
#line 3226 "cs-parser.jay"
{
		var types = (List<FullNamedExpression>) yyVals[-2+yyTop];
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_407()
#line 3235 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast) {
			report.Error (1521, GetLocation (yyVals[0+yyTop]), "Invalid base type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
		}
		yyVal = yyVals[0+yyTop];
	  }

void case_445()
#line 3299 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
	       yyVal = new CompletionSimpleName (MemberName.MakeName (lt.Value, null), lt.Location);
	  }

void case_456()
#line 3340 "cs-parser.jay"
{
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_458()
#line 3352 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_459()
#line 3358 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_460()
#line 3364 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_6)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "null propagating operator");

		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new ConditionalMemberAccess ((Expression) yyVals[-4+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_461()
#line 3373 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_462()
#line 3379 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_463()
#line 3385 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new SimpleName ("await", ((LocatedToken) yyVals[-3+yyTop]).Location), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_464()
#line 3391 "cs-parser.jay"
{
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_465()
#line 3399 "cs-parser.jay"
{
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_467()
#line 3409 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
	  }

void case_469()
#line 3417 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
 	  }

void case_470()
#line 3425 "cs-parser.jay"
{
		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_471()
#line 3430 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_472()
#line 3437 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Invocation ((Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_475()
#line 3452 "cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] == null) {
	  		yyVal = new CollectionOrObjectInitializers (GetLocation (yyVals[-2+yyTop]));
	  	} else {
	  		yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  	}
 		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_476()
#line 3461 "cs-parser.jay"
{
	  	yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_479()
#line 3477 "cs-parser.jay"
{
	  	var a = new List<Expression> ();
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_480()
#line 3483 "cs-parser.jay"
{
	  	var a = (List<Expression>)yyVals[-2+yyTop];
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_481()
#line 3488 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_482()
#line 3496 "cs-parser.jay"
{
	  	var lt = (LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_483()
#line 3502 "cs-parser.jay"
{
	  	var lt = (LocatedToken) Error_AwaitAsIdentifier (yyVals[-2+yyTop]);
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_485()
#line 3511 "cs-parser.jay"
{
		CompletionSimpleName csn = yyVals[-1+yyTop] as CompletionSimpleName;
		if (csn == null)
			yyVal = new CollectionElementInitializer ((Expression)yyVals[-1+yyTop]);
		else
			yyVal = new CompletionElementInitializer (csn.Prefix, csn.Location);
	  }

void case_486()
#line 3519 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] == null)
			yyVal = new CollectionElementInitializer (GetLocation (yyVals[-2+yyTop]));
		else
	  		yyVal = new CollectionElementInitializer ((List<Expression>)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));

		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_487()
#line 3528 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_6)
			FeatureIsNotAvailable (GetLocation (yyVals[-4+yyTop]), "dictionary initializer");

		yyVal = new DictionaryElementInitializer ((List<Expression>)yyVals[-3+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_488()
#line 3536 "cs-parser.jay"
{
	  	report.Error (1920, GetLocation (yyVals[-1+yyTop]), "An element initializer cannot be empty");
		yyVal = new CollectionElementInitializer (GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_493()
#line 3555 "cs-parser.jay"
{ 
		Arguments list = new Arguments (4);
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_494()
#line 3561 "cs-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		if (list [list.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) list [list.Count - 1]);
		
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_495()
#line 3570 "cs-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		NamedArgument a = (NamedArgument) yyVals[0+yyTop];
		for (int i = 0; i < list.Count; ++i) {
			NamedArgument na = list [i] as NamedArgument;
			if (na != null && na.Name == a.Name)
				report.Error (1740, na.Location, "Named argument `{0}' specified multiple times",
					na.Name);
		}
		
		list.Add (a);
		yyVal = list;
	  }

void case_496()
#line 3584 "cs-parser.jay"
{
	  	if (lexer.putback_char == -1)
	  		lexer.putback (')'); /* TODO: Wrong but what can I do*/
		Error_SyntaxError (yyToken);
		yyVal = yyVals[-2+yyTop];
	  }

void case_497()
#line 3591 "cs-parser.jay"
{
	  	report.Error (839, GetLocation (yyVals[-1+yyTop]), "An argument is missing");
	  	yyVal = null;
	  }

void case_502()
#line 3612 "cs-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_504()
#line 3621 "cs-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_506()
#line 3630 "cs-parser.jay"
{
		yyVal = new Argument (new Arglist ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_507()
#line 3635 "cs-parser.jay"
{
		yyVal = new Argument (new Arglist (GetLocation (yyVals[-2+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_508()
#line 3643 "cs-parser.jay"
{
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_509()
#line 3660 "cs-parser.jay"
{
		if (lang_version != LanguageVersion.Experimental)
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "declaration expression");

		var lt = (LocatedToken) yyVals[0+yyTop];
		var lv = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (lv);
		yyVal = new DeclarationExpression ((FullNamedExpression) yyVals[-1+yyTop], lv);
	  }

void case_510()
#line 3670 "cs-parser.jay"
{
		if (lang_version != LanguageVersion.Experimental)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "declaration expression");

		var lt = (LocatedToken) yyVals[-2+yyTop];
		var lv = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (lv);
		yyVal = new DeclarationExpression ((FullNamedExpression) yyVals[-3+yyTop], lv) {
			Initializer = (Expression) yyVals[0+yyTop]
		};
	  }

void case_512()
#line 3689 "cs-parser.jay"
{
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_513()
#line 3694 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_6)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "null propagating operator");

		yyVal = new ElementAccess ((Expression) yyVals[-4+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop])) {
			ConditionalAccess = true
		};

		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_514()
#line 3705 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_515()
#line 3710 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_516()
#line 3718 "cs-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_517()
#line 3724 "cs-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_518()
#line 3733 "cs-parser.jay"
{
		Arguments args = new Arguments (4);
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }

void case_519()
#line 3739 "cs-parser.jay"
{
		Arguments args = (Arguments) yyVals[-2+yyTop];
		if (args [args.Count - 1] is NamedArgument && !(yyVals[0+yyTop] is NamedArgument))
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
	  
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;	  
	  }

void case_523()
#line 3766 "cs-parser.jay"
{
	  	yyVal = new ElementAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_524()
#line 3771 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = new ElementAccess (null, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_527()
#line 3793 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			if (lang_version <= LanguageVersion.ISO_2)
				FeatureIsNotAvailable (GetLocation (yyVals[-5+yyTop]), "object initializers");
				
			yyVal = new NewInitialize ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		} else {
			yyVal = new New ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], GetLocation (yyVals[-5+yyTop]));
		}
		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_528()
#line 3806 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "collection initializers");
	  
		yyVal = new NewInitialize ((FullNamedExpression) yyVals[-1+yyTop], null, (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_529()
#line 3818 "cs-parser.jay"
{
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], (List<Expression>) yyVals[-3+yyTop],
				new ComposedTypeSpecifier (((List<Expression>) yyVals[-3+yyTop]).Count, GetLocation (yyVals[-4+yyTop])) {
	  				Next = (ComposedTypeSpecifier) yyVals[-1+yyTop]
			  	}, (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_530()
#line 3826 "cs-parser.jay"
{
	  	if (yyVals[0+yyTop] == null)
	  		report.Error (1586, GetLocation (yyVals[-3+yyTop]), "Array creation must have array size or array initializer");

		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-2+yyTop], (ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }

void case_531()
#line 3833 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "implicitly typed arrays");
	  
		yyVal = new ImplicitlyTypedArrayCreation ((ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_532()
#line 3840 "cs-parser.jay"
{
		report.Error (178, GetLocation (yyVals[-1+yyTop]), "Invalid rank specifier, expecting `,' or `]'");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], null, GetLocation (yyVals[-6+yyTop]));
	  }

void case_533()
#line 3845 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		/* It can be any of new expression, create the most common one*/
		yyVal = new New ((FullNamedExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_535()
#line 3857 "cs-parser.jay"
{
		--lexer.parsing_type;
		yyVal = yyVals[0+yyTop];
	  }

void case_536()
#line 3865 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "anonymous types");

		yyVal = new NewAnonymousType ((List<AnonymousTypeParameter>) yyVals[-1+yyTop], current_container, GetLocation (yyVals[-3+yyTop]));
		
		/* TODO: lbag comma location*/
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_542()
#line 3892 "cs-parser.jay"
{
	  	var a = new List<AnonymousTypeParameter> (4);
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_543()
#line 3898 "cs-parser.jay"
{
	  	var a = (List<AnonymousTypeParameter>) yyVals[-2+yyTop];
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_546()
#line 3915 "cs-parser.jay"
{
		var lt = (LocatedToken)yyVals[-2+yyTop];
	  	yyVal = new AnonymousTypeParameter ((Expression)yyVals[0+yyTop], lt.Value, lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_547()
#line 3921 "cs-parser.jay"
{
		var lt = (LocatedToken)yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (new SimpleName (lt.Value, lt.Location),
	  		lt.Value, lt.Location);
	  }

void case_548()
#line 3927 "cs-parser.jay"
{
	  	MemberAccess ma = (MemberAccess) yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (ma, ma.Name, ma.Location);
	  }

void case_549()
#line 3932 "cs-parser.jay"
{
		report.Error (746, lexer.Location,
			"Invalid anonymous type member declarator. Anonymous type members must be a member assignment, simple name or member access expression");
		yyVal = null;
	  }

void case_553()
#line 3947 "cs-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_554()
#line 3955 "cs-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_555()
#line 3960 "cs-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension ((int)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_560()
#line 3990 "cs-parser.jay"
{
		var ai = new ArrayInitializer (0, GetLocation (yyVals[-1+yyTop]));
		ai.VariableDeclaration = current_variable;
		lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		yyVal = ai;
	  }

void case_561()
#line 3997 "cs-parser.jay"
{
		var ai = new ArrayInitializer ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
		ai.VariableDeclaration = current_variable;
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (ai, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		}
		yyVal = ai;
	  }

void case_562()
#line 4011 "cs-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_563()
#line 4017 "cs-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_564()
#line 4026 "cs-parser.jay"
{
		yyVal = new TypeOf ((FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_566()
#line 4035 "cs-parser.jay"
{
	 	Error_TypeExpected (lexer.Location);
	 	yyVal = null;
	 }

void case_567()
#line 4043 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "generics");

		yyVal = yyVals[0+yyTop];
	  }

void case_568()
#line 4053 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (lt.Location, "namespace alias qualifier");

		yyVal = lt;		
	  }

void case_569()
#line 4064 "cs-parser.jay"
{ 
		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_570()
#line 4069 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_571()
#line 4079 "cs-parser.jay"
{
		yyVal = new CheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_572()
#line 4084 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new CheckedExpr (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_573()
#line 4093 "cs-parser.jay"
{
		yyVal = new UnCheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_574()
#line 4098 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new UnCheckedExpr (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_575()
#line 4107 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new Indirection ((Expression) yyVals[-3+yyTop], GetLocation (yyVals[-2+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }

void case_583()
#line 4146 "cs-parser.jay"
{
		valid_param_mod = 0;
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_584()
#line 4154 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "default value expression");

		yyVal = new DefaultValueExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_588()
#line 4174 "cs-parser.jay"
{
		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_589()
#line 4179 "cs-parser.jay"
{
		if (!async_block) {
			 if (current_anonymous_method is LambdaExpression) {
				report.Error (4034, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing lambda expression is marked with the `async' modifier");
			} else if (current_anonymous_method != null) {
				report.Error (4035, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing anonymous method is marked with the `async' modifier");
			} else if (interactive_async != null) {
				current_block.Explicit.RegisterAsyncAwait ();
				interactive_async = true;
			} else {
				report.Error (4033, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing method is marked with the `async' modifier");
			}
		} else {
			current_block.Explicit.RegisterAsyncAwait ();
		}
		
		yyVal = new Await ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_590()
#line 4201 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.LogicalNot, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_591()
#line 4207 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.OnesComplement, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_592()
#line 4213 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_593()
#line 4220 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Await (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_601()
#line 4258 "cs-parser.jay"
{ 
		Error_SyntaxError (yyToken);

	  	yyVal = new Unary (Unary.Operator.UnaryPlus, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_602()
#line 4264 "cs-parser.jay"
{ 
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.UnaryNegation, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_603()
#line 4270 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_604()
#line 4276 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_605()
#line 4282 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Indirection (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_606()
#line 4288 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.AddressOf, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_608()
#line 4298 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_609()
#line 4303 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_610()
#line 4308 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_611()
#line 4313 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_612()
#line 4320 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Division, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_613()
#line 4327 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_615()
#line 4338 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_616()
#line 4343 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_617()
#line 4348 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_618()
#line 4355 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_620()
#line 4366 "cs-parser.jay"
{
		var is_expr = new Is ((Expression) yyVals[-3+yyTop], (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		if (yyVals[0+yyTop] != null) {
			if (lang_version != LanguageVersion.Experimental)
				FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "type pattern matching");

			var lt = (LocatedToken) yyVals[0+yyTop];
			is_expr.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
			current_block.AddLocalName (is_expr.Variable);
		}

		yyVal = is_expr;
	  }

void case_621()
#line 4380 "cs-parser.jay"
{
		var is_expr = new Is ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
		if (lang_version != LanguageVersion.Experimental)
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "pattern matching");

		yyVal = is_expr;
	  }

void case_622()
#line 4388 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new As ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_623()
#line 4394 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Is ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_624()
#line 4400 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new Is (new SimpleName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_625()
#line 4405 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new As (new SimpleName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_632()
#line 4428 "cs-parser.jay"
{
		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_638()
#line 4456 "cs-parser.jay"
{
		var list = new List<PropertyPatternMember> ();
		list.Add ((PropertyPatternMember) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_639()
#line 4462 "cs-parser.jay"
{
		var list = (List<PropertyPatternMember>) yyVals[-2+yyTop];
		list.Add ((PropertyPatternMember) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_640()
#line 4471 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new PropertyPatternMember (lt.Value, (Expression) yyVals[0+yyTop], lt.Location);
	  }

void case_642()
#line 4480 "cs-parser.jay"
{
	  	if (yyVals[0+yyTop] != null) {
			var lt = (LocatedToken) yyVals[0+yyTop];
			var variable = new LocalVariable (current_block, lt.Value, lt.Location);
			current_block.AddLocalName (variable);
		}
	  }

void case_645()
#line 4499 "cs-parser.jay"
{
		Arguments args = new Arguments (4);
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }

void case_646()
#line 4505 "cs-parser.jay"
{
		Arguments args = (Arguments) yyVals[-2+yyTop];
		if (args [args.Count - 1] is NamedArgument && !(yyVals[0+yyTop] is NamedArgument))
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);

		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }

void case_648()
#line 4521 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop]);
	  }

void case_650()
#line 4530 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_651()
#line 4535 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_652()
#line 4540 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_653()
#line 4547 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_655()
#line 4558 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThan, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_656()
#line 4563 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThan, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_657()
#line 4568 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThanOrEqual, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_658()
#line 4573 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_659()
#line 4578 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LessThan, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_660()
#line 4585 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.GreaterThan, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_661()
#line 4592 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LessThanOrEqual, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_662()
#line 4599 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_664()
#line 4610 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Equality, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_665()
#line 4615 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Inequality, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_666()
#line 4620 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Equality, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_667()
#line 4627 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Inequality, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_669()
#line 4638 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_670()
#line 4643 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_672()
#line 4654 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_673()
#line 4659 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_675()
#line 4670 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_676()
#line 4675 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_678()
#line 4686 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_679()
#line 4691 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LogicalAnd, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_681()
#line 4702 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_682()
#line 4707 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LogicalOr, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_684()
#line 4718 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "null coalescing operator");
			
		yyVal = new Nullable.NullCoalescingOperator ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_686()
#line 4730 "cs-parser.jay"
{
		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_687()
#line 4735 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-3+yyTop]), (Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_688()
#line 4741 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_689()
#line 4748 "cs-parser.jay"
{
		Error_SyntaxError (Token.CLOSE_BRACE);

		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
		lexer.putback ('}');
	  }

void case_690()
#line 4759 "cs-parser.jay"
{
		yyVal = new SimpleAssign ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_691()
#line 4764 "cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_692()
#line 4769 "cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_693()
#line 4774 "cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_694()
#line 4779 "cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_695()
#line 4784 "cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_696()
#line 4789 "cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_697()
#line 4794 "cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_698()
#line 4799 "cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_699()
#line 4804 "cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_700()
#line 4809 "cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_701()
#line 4817 "cs-parser.jay"
{
		var pars = new List<Parameter> (4);
		pars.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = pars;
	  }

void case_702()
#line 4824 "cs-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter)yyVals[0+yyTop];
		if (pars[0].GetType () != p.GetType ()) {
			report.Error (748, p.Location, "All lambda parameters must be typed either explicitly or implicitly");
		}
		
		pars.Add (p);
		yyVal = pars;
	  }

void case_703()
#line 4838 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], null, lt.Location);
	  }

void case_704()
#line 4844 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, Parameter.Modifier.NONE, null, lt.Location);
	  }

void case_705()
#line 4850 "cs-parser.jay"
{
	  	var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new ImplicitLambdaParameter (lt.Value, lt.Location);
	  }

void case_706()
#line 4855 "cs-parser.jay"
{
	  	var lt = (LocatedToken) Error_AwaitAsIdentifier (yyVals[0+yyTop]);
		yyVal = new ImplicitLambdaParameter (lt.Value, lt.Location);
	  }

void case_708()
#line 4863 "cs-parser.jay"
{ 
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
		yyVal = new ParametersCompiled (pars_list.ToArray ());
	  }

void case_710()
#line 4874 "cs-parser.jay"
{
		Block b = end_block (Location.Null);
		b.IsCompilerGenerated = true;
		b.AddStatement (new ContextualReturn ((Expression) yyVals[0+yyTop]));
		yyVal = b;
	  }

void case_712()
#line 4882 "cs-parser.jay"
{
	  	/* Handles only cases like foo = x.FirstOrDefault (l => );*/
	  	/* where we must restore current_variable*/
		Block b = end_block (Location.Null);
		b.IsCompilerGenerated = true;

		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_714()
#line 4896 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_715()
#line 4904 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];	
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), false, lt.Location);
	  }

void case_716()
#line 4910 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_717()
#line 4915 "cs-parser.jay"
{
		var lt = (LocatedToken) Error_AwaitAsIdentifier (yyVals[-1+yyTop]);
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), false, lt.Location);
	  }

void case_718()
#line 4921 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_719()
#line 4926 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), true, lt.Location);
	  }

void case_720()
#line 4932 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_722()
#line 4941 "cs-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], false, GetLocation (yyVals[-4+yyTop]));
	  }

void case_723()
#line 4946 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_725()
#line 4955 "cs-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], true, GetLocation (yyVals[-5+yyTop]));
	  }

void case_726()
#line 4960 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_733()
#line 4983 "cs-parser.jay"
{
		yyVal = new RefValueExpr ((Expression) yyVals[-3+yyTop], (FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_734()
#line 4988 "cs-parser.jay"
{
		yyVal = new RefTypeExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_735()
#line 4993 "cs-parser.jay"
{
		yyVal = new MakeRefExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));	  
	  }

void case_740()
#line 5020 "cs-parser.jay"
{
		yyVal = yyVals[-1+yyTop];

		/* Cannot use opt_formal_parameter_list because it can be shared instance for empty parameters*/
	  	lbag.AppendToMember (current_container, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));

		if (lang_version != LanguageVersion.Experimental)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "primary constructor");
	  }

void case_745()
#line 5049 "cs-parser.jay"
{
		++lexer.parsing_block;
		current_type.PrimaryConstructorBaseArgumentsStart = GetLocation (yyVals[0+yyTop]);
	  }

void case_746()
#line 5054 "cs-parser.jay"
{
		lbag.AppendToMember (current_container, GetLocation (yyVals[0+yyTop]));
		current_type.PrimaryConstructorBaseArguments = (Arguments) yyVals[-1+yyTop];
		--lexer.parsing_block;

		yyVal = yyVals[-5+yyTop];
	  }

void case_748()
#line 5074 "cs-parser.jay"
{
		lexer.ConstraintsParsing = true;

		Class c = new Class (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]);
		if (((c.ModFlags & Modifiers.STATIC) != 0) && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (c.Location, "static classes");
		}
			
		push_current_container (c, yyVals[-3+yyTop]);
		valid_param_mod = ParameterModifierType.PrimaryConstructor;
	  }

void case_749()
#line 5087 "cs-parser.jay"
{
		valid_param_mod = 0;
		lexer.ConstraintsParsing = false;

		if (yyVals[-1+yyTop] != null)
			current_type.PrimaryConstructorParameters = (ParametersCompiled) yyVals[-1+yyTop];

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);
		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-5+yyTop]));

		if (doc_support) {
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }

void case_750()
#line 5106 "cs-parser.jay"
{
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_751()
#line 5112 "cs-parser.jay"
{
		if (yyVals[0+yyTop] == null) {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		} else {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		yyVal = pop_current_class ();
	  }

void case_754()
#line 5131 "cs-parser.jay"
{
	    mod_locations = null;
		yyVal = ModifierNone;
		lexer.parsing_modifiers = false;
	  }

void case_757()
#line 5145 "cs-parser.jay"
{ 
		var m1 = (Modifiers) yyVals[-1+yyTop];
		var m2 = (Modifiers) yyVals[0+yyTop];

		if ((m1 & m2) != 0) {
			report.Error (1004, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"Duplicate `{0}' modifier", ModifiersExtensions.Name (m2));
		} else if ((m2 & Modifiers.AccessibilityMask) != 0 && (m1 & Modifiers.AccessibilityMask) != 0 &&
			((m2 | m1 & Modifiers.AccessibilityMask) != (Modifiers.PROTECTED | Modifiers.INTERNAL))) {
			report.Error (107, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"More than one protection modifier specified");
		}
		
		yyVal = m1 | m2;
	  }

void case_758()
#line 5164 "cs-parser.jay"
{
		yyVal = Modifiers.NEW;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		
		if (current_container.Kind == MemberKind.Namespace)
			report.Error (1530, GetLocation (yyVals[0+yyTop]), "Keyword `new' is not allowed on namespace elements");
	  }

void case_759()
#line 5172 "cs-parser.jay"
{
		yyVal = Modifiers.PUBLIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_760()
#line 5177 "cs-parser.jay"
{
		yyVal = Modifiers.PROTECTED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_761()
#line 5182 "cs-parser.jay"
{
		yyVal = Modifiers.INTERNAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_762()
#line 5187 "cs-parser.jay"
{
		yyVal = Modifiers.PRIVATE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_763()
#line 5192 "cs-parser.jay"
{
		yyVal = Modifiers.ABSTRACT;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_764()
#line 5197 "cs-parser.jay"
{
		yyVal = Modifiers.SEALED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_765()
#line 5202 "cs-parser.jay"
{
		yyVal = Modifiers.STATIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_766()
#line 5207 "cs-parser.jay"
{
		yyVal = Modifiers.READONLY;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_767()
#line 5212 "cs-parser.jay"
{
		yyVal = Modifiers.VIRTUAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_768()
#line 5217 "cs-parser.jay"
{
		yyVal = Modifiers.OVERRIDE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_769()
#line 5222 "cs-parser.jay"
{
		yyVal = Modifiers.EXTERN;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_770()
#line 5227 "cs-parser.jay"
{
		yyVal = Modifiers.VOLATILE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_771()
#line 5232 "cs-parser.jay"
{
		yyVal = Modifiers.UNSAFE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_772()
#line 5239 "cs-parser.jay"
{
		yyVal = Modifiers.ASYNC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_776()
#line 5256 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		current_type.SetBaseTypes ((List<FullNamedExpression>) yyVals[-1+yyTop]);
	  }

void case_779()
#line 5273 "cs-parser.jay"
{
		var constraints = new List<Constraints> (1);
		constraints.Add ((Constraints) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_780()
#line 5279 "cs-parser.jay"
{
		var constraints = (List<Constraints>) yyVals[-1+yyTop];
		Constraints new_constraint = (Constraints)yyVals[0+yyTop];

		foreach (Constraints c in constraints) {
			if (new_constraint.TypeParameter.Value == c.TypeParameter.Value) {
				report.Error (409, new_constraint.Location,
					"A constraint clause has already been specified for type parameter `{0}'",
					new_constraint.TypeParameter.Value);
			}
		}

		constraints.Add (new_constraint);
		yyVal = constraints;
	  }

void case_781()
#line 5298 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), (List<FullNamedExpression>) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_782()
#line 5304 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_783()
#line 5314 "cs-parser.jay"
{
		var constraints = new List<FullNamedExpression> (1);
		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_784()
#line 5320 "cs-parser.jay"
{
		var constraints = (List<FullNamedExpression>) yyVals[-2+yyTop];
		var prev = constraints [constraints.Count - 1] as SpecialContraintExpr;
		if (prev != null && (prev.Constraint & SpecialConstraint.Constructor) != 0) {			
			report.Error (401, GetLocation (yyVals[-1+yyTop]), "The `new()' constraint must be the last constraint specified");
		}
		
		prev = yyVals[0+yyTop] as SpecialContraintExpr;
		if (prev != null) {
			if ((prev.Constraint & (SpecialConstraint.Class | SpecialConstraint.Struct)) != 0) {
				report.Error (449, prev.Location, "The `class' or `struct' constraint must be the first constraint specified");			
			} else {
			 	prev = constraints [0] as SpecialContraintExpr;
			 	if (prev != null && (prev.Constraint & SpecialConstraint.Struct) != 0) {			
					report.Error (451, GetLocation (yyVals[0+yyTop]), "The `new()' constraint cannot be used with the `struct' constraint");
				}
			}
		}

		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_785()
#line 5346 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast)
			report.Error (706, GetLocation (yyVals[0+yyTop]), "Invalid constraint type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
	  
	  	yyVal = yyVals[0+yyTop];
	  }

void case_786()
#line 5353 "cs-parser.jay"
{
		yyVal = new SpecialContraintExpr (SpecialConstraint.Constructor, GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_790()
#line 5373 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (lexer.Location, "generic type variance");
		
		yyVal = yyVals[0+yyTop];
	  }

void case_793()
#line 5407 "cs-parser.jay"
{
		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_795()
#line 5419 "cs-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_796()
#line 5424 "cs-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (lexer.Location);
	  }

void case_797()
#line 5433 "cs-parser.jay"
{
		++lexer.parsing_block;
		current_block.StartLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_798()
#line 5438 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_806()
#line 5465 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_839()
#line 5529 "cs-parser.jay"
{
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_840()
#line 5534 "cs-parser.jay"
{
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_841()
#line 5539 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_842()
#line 5547 "cs-parser.jay"
{
		/* Uses lexer.Location because semicolon location is not kept in quick mode*/
		yyVal = new EmptyStatement (lexer.Location);
	  }

void case_843()
#line 5555 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		LabeledStatement labeled = new LabeledStatement (lt.Value, current_block, lt.Location);
		lbag.AddLocation (labeled, GetLocation (yyVals[0+yyTop]));
		current_block.AddLabel (labeled);
		current_block.AddStatement (labeled);
	  }

void case_846()
#line 5568 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] is VarExpr)
			yyVals[-1+yyTop] = new SimpleName ("var", ((VarExpr) yyVals[-1+yyTop]).Location);
	  
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_847()
#line 5584 "cs-parser.jay"
{ 
		/* Ok, the above "primary_expression" is there to get rid of*/
		/* both reduce/reduce and shift/reduces in the grammar, it should*/
		/* really just be "type_name".  If you use type_name, a reduce/reduce*/
		/* creeps up.  If you use namespace_or_type_name (which is all we need*/
		/* really) two shift/reduces appear.*/
		/* */

		/* So the super-trick is that primary_expression*/
		/* can only be either a SimpleName or a MemberAccess. */
		/* The MemberAccess case arises when you have a fully qualified type-name like :*/
		/* Foo.Bar.Blah i;*/
		/* SimpleName is when you have*/
		/* Blah i;*/
		
		var expr = (ATypeNameExpression) yyVals[-1+yyTop];
		if (yyVals[0+yyTop] == null) {
			if (expr.Name == "var" && expr is SimpleName)
				yyVal = new VarExpr (expr.Location);
			else
				yyVal = yyVals[-1+yyTop];
		} else {
			yyVal = new ComposedCast (expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		}
	  }

void case_848()
#line 5610 "cs-parser.jay"
{
		var expr = (ATypeNameExpression) yyVals[-1+yyTop];
		yyVal = new ComposedCast (expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_852()
#line 5621 "cs-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_856()
#line 5644 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariable ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_857()
#line 5651 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		if (yyVals[-2+yyTop] != null)
			lbag.AddLocation (yyVal, PopLocation (), GetLocation (yyVals[0+yyTop]));
		else
			lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_858()
#line 5660 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockConstant ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_859()
#line 5667 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_861()
#line 5677 "cs-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		PushLocation (GetLocation (yyVals[-1+yyTop]));
		yyVal = current_variable;
	  }

void case_862()
#line 5683 "cs-parser.jay"
{
	  	if (yyToken == Token.OPEN_BRACKET_EXPR) {
			report.Error (650, lexer.Location,
				"Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type");
		} else {
			Error_SyntaxError (yyToken);
		}
	  }

void case_866()
#line 5701 "cs-parser.jay"
{
		foreach (var d in current_variable.Declarators) {
			if (d.Initializer == null)
				Error_MissingInitializer (d.Variable.Location);
		}
	  }

void case_869()
#line 5716 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclarator (li, null);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-1+yyTop]));
	  }

void case_870()
#line 5725 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_877()
#line 5758 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		var d = new BlockVariableDeclarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_879()
#line 5771 "cs-parser.jay"
{
		yyVal = new StackAlloc ((Expression) yyVals[-3+yyTop], (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_880()
#line 5776 "cs-parser.jay"
{
		report.Error (1575, GetLocation (yyVals[-1+yyTop]), "A stackalloc expression requires [] after type");
		yyVal = new StackAlloc ((Expression) yyVals[0+yyTop], null, GetLocation (yyVals[-1+yyTop]));		
	  }

void case_881()
#line 5784 "cs-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_883()
#line 5790 "cs-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		report.Error (1002, GetLocation (yyVals[0+yyTop]), "; expected");
		lexer.putback ('}');
	  }

void case_886()
#line 5808 "cs-parser.jay"
{
		ExpressionStatement s = yyVals[0+yyTop] as ExpressionStatement;
		if (s == null) {
			var expr = yyVals[0+yyTop] as Expression;
			yyVal = new StatementErrorExpression (expr);
		} else {
			yyVal = new StatementExpression (s);
		}
	  }

void case_887()
#line 5821 "cs-parser.jay"
{
		Expression expr = (Expression) yyVals[0+yyTop];
		yyVal = new StatementExpression (new OptionalAssign (expr, lexer.Location));
	  }

void case_888()
#line 5826 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_891()
#line 5840 "cs-parser.jay"
{ 
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		yyVal = new If ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_892()
#line 5849 "cs-parser.jay"
{
		yyVal = new If ((BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
		
		if (yyVals[-2+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[-2+yyTop]));
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_893()
#line 5859 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new If ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_895()
#line 5873 "cs-parser.jay"
{
		yyVal = new Switch ((Expression) yyVals[-5+yyTop], (ExplicitBlock) current_block.Explicit, GetLocation (yyVals[-7+yyTop]));	
		end_block (GetLocation (yyVals[0+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]));
	  }

void case_896()
#line 5879 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		yyVal = new Switch ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));	
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_903()
#line 5910 "cs-parser.jay"
{
	  	var label = (SwitchLabel) yyVals[0+yyTop];
	  	label.SectionStart = true;
		current_block.AddStatement (label);
	  }

void case_905()
#line 5923 "cs-parser.jay"
{
	 	yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	 	lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	 }

void case_906()
#line 5928 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_912()
#line 5959 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new While ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_913()
#line 5967 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new While ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_914()
#line 5977 "cs-parser.jay"
{
		yyVal = new Do ((Statement) yyVals[-5+yyTop], (BooleanExpression) yyVals[-2+yyTop], GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_915()
#line 5982 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Do ((Statement) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]), Location.Null);
	  }

void case_916()
#line 5987 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		yyVal = new Do ((Statement) yyVals[-4+yyTop], (BooleanExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_917()
#line 5997 "cs-parser.jay"
{
		start_block (GetLocation (yyVals[0+yyTop]));
		current_block.IsCompilerGenerated = true;
		For f = new For (GetLocation (yyVals[-1+yyTop]));
		current_block.AddStatement (f);
		yyVal = f;
	  }

void case_919()
#line 6013 "cs-parser.jay"
{
		((For) yyVals[-2+yyTop]).Initializer = (Statement) yyVals[-1+yyTop];

		/* Pass the "For" object to the iterator_part4*/
		oob_stack.Push (yyVals[-2+yyTop]);
	  }

void case_920()
#line 6021 "cs-parser.jay"
{
		var locations = (Tuple<Location,Location>) yyVals[-1+yyTop];
		oob_stack.Pop ();
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		For f = ((For) yyVals[-5+yyTop]);
		f.Statement = (Statement) yyVals[0+yyTop];
		lbag.AddStatement (f, current_block.StartLocation, GetLocation (yyVals[-3+yyTop]), GetLocation (locations.Item1), GetLocation (locations.Item2));

		yyVal = end_block (GetLocation (yyVals[-3+yyTop]));
	  }

void case_921()
#line 6034 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = end_block (current_block.StartLocation);
	  }

void case_922()
#line 6042 "cs-parser.jay"
{
		For f = (For) oob_stack.Peek ();
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
	  }

void case_924()
#line 6052 "cs-parser.jay"
{
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol `}'");
		For f = (For) oob_stack.Peek ();
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
		yyVal = new Tuple<Location,Location> (GetLocation (yyVals[0+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_925()
#line 6061 "cs-parser.jay"
{
	  	For f = (For) oob_stack.Peek ();
		f.Iterator = (Statement) yyVals[-1+yyTop];
		yyVal = GetLocation (yyVals[0+yyTop]);
	  }

void case_926()
#line 6066 "cs-parser.jay"
{
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol expected ')'");
		For f = (For) oob_stack.Peek ();
		f.Iterator = (Statement) yyVals[-1+yyTop];
		yyVal = GetLocation (yyVals[0+yyTop]);
	  }

void case_931()
#line 6086 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariable ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_932()
#line 6093 "cs-parser.jay"
{
		yyVal = current_variable;
		if (yyVals[-1+yyTop] != null)
			lbag.AddLocation (current_variable, PopLocation ());

		current_variable = null;
	  }

void case_940()
#line 6120 "cs-parser.jay"
{
	  	var sl = yyVals[-2+yyTop] as StatementList;
	  	if (sl == null) {
	  		sl = new StatementList ((Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop]);
			lbag.AddStatement (sl, GetLocation (yyVals[-1+yyTop]));
	  	} else {
	  		sl.Add ((Statement) yyVals[0+yyTop]);
	  		lbag.AppendTo (sl, GetLocation (yyVals[-1+yyTop]));
	  	}
	  		
		yyVal = sl;
	  }

void case_941()
#line 6136 "cs-parser.jay"
{
		report.Error (230, GetLocation (yyVals[-3+yyTop]), "Type and identifier are both required in a foreach statement");

		start_block (GetLocation (yyVals[-2+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		Foreach f = new Foreach ((Expression) yyVals[-1+yyTop], null, null, null, null, GetLocation (yyVals[-3+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-2+yyTop]));
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_942()
#line 6149 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	
		start_block (GetLocation (yyVals[-3+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		var lt = (LocatedToken) yyVals[-1+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		
		Foreach f = new Foreach ((Expression) yyVals[-2+yyTop], li, null, null, null, GetLocation (yyVals[-4+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-3+yyTop]));
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_943()
#line 6166 "cs-parser.jay"
{
		start_block (GetLocation (yyVals[-5+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		var lt = (LocatedToken) yyVals[-3+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		yyVal = li;
	  }

void case_944()
#line 6176 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		Foreach f = new Foreach ((Expression) yyVals[-6+yyTop], (LocalVariable) yyVals[-1+yyTop], (Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], current_block, GetLocation (yyVals[-8+yyTop]));
		lbag.AddStatement (f, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		end_block (GetLocation (yyVals[-2+yyTop]));
		
		yyVal = f;
	  }

void case_951()
#line 6199 "cs-parser.jay"
{
		yyVal = new Break (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_952()
#line 6207 "cs-parser.jay"
{
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_953()
#line 6212 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
	  }

void case_954()
#line 6220 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new Goto (lt.Value, GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_955()
#line 6226 "cs-parser.jay"
{
		yyVal = new GotoCase ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_956()
#line 6231 "cs-parser.jay"
{
		yyVal = new GotoDefault (GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_957()
#line 6239 "cs-parser.jay"
{
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_958()
#line 6244 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_959()
#line 6249 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Return (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_960()
#line 6257 "cs-parser.jay"
{
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_961()
#line 6262 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_962()
#line 6267 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Throw (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_963()
#line 6275 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_964()
#line 6291 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		var lt = (LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_965()
#line 6309 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.ParametersBlock.TopBlock.IsIterator = true;
		yyVal = new YieldBreak (lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_969()
#line 6335 "cs-parser.jay"
{
		yyVal = new TryFinally ((Statement) yyVals[-2+yyTop], (ExplicitBlock) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_970()
#line 6340 "cs-parser.jay"
{
		yyVal = new TryFinally (new TryCatch ((Block) yyVals[-3+yyTop], (List<Catch>) yyVals[-2+yyTop], Location.Null, true), (ExplicitBlock) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_971()
#line 6345 "cs-parser.jay"
{
		Error_SyntaxError (1524, yyToken);
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]), false);
	  }

void case_972()
#line 6353 "cs-parser.jay"
{
		var l = new List<Catch> (2);

		l.Add ((Catch) yyVals[0+yyTop]);
		yyVal = l;
	  }

void case_973()
#line 6360 "cs-parser.jay"
{
		var l = (List<Catch>) yyVals[-1+yyTop];
		
		Catch c = (Catch) yyVals[0+yyTop];
		var prev_catch = l [l.Count - 1];
		if (prev_catch.IsGeneral && prev_catch.Filter == null) {
			report.Error (1017, c.loc, "Try statement already has an empty catch block");
		}
		
		l.Add (c);
		yyVal = l;
	  }

void case_976()
#line 6381 "cs-parser.jay"
{
	  	var c = new Catch ((ExplicitBlock) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  	c.Filter = (CatchFilterExpression) yyVals[-1+yyTop];
	  	yyVal = c;
	  }

void case_977()
#line 6387 "cs-parser.jay"
{
		start_block (GetLocation (yyVals[-3+yyTop]));
		var c = new Catch ((ExplicitBlock) current_block, GetLocation (yyVals[-4+yyTop]));
		c.TypeExpression = (FullNamedExpression) yyVals[-2+yyTop];

		if (yyVals[-1+yyTop] != null) {
			var lt = (LocatedToken) yyVals[-1+yyTop];
			c.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
			current_block.AddLocalName (c.Variable);
		}
		
		lbag.AddLocation (c, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = c;
	  }

void case_978()
#line 6402 "cs-parser.jay"
{
	  	((Catch) yyVals[-2+yyTop]).Filter = (CatchFilterExpression) yyVals[-1+yyTop];
		yyVal = yyVals[-2+yyTop];
	  }

void case_979()
#line 6407 "cs-parser.jay"
{
	  	if (yyToken == Token.CLOSE_PARENS) {
			report.Error (1015, lexer.Location,
				"A type that derives from `System.Exception', `object', or `string' expected");
		} else {
			Error_SyntaxError (yyToken);
		}
		
		yyVal = new Catch (null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_980()
#line 6418 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		/* Required otherwise missing block could not be detected because*/
		/* start_block is run early*/
		var c = new Catch (null, GetLocation (yyVals[-5+yyTop]));
		c.TypeExpression = (FullNamedExpression) yyVals[-3+yyTop];

		if (yyVals[-2+yyTop] != null) {
			var lt = (LocatedToken) yyVals[-2+yyTop];
			c.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
		}

		lbag.AddLocation (c, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-1+yyTop]));

		yyVal = c;
	  }

void case_982()
#line 6440 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.V_5)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "exception filter");

	  	yyVal = new CatchFilterExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_985()
#line 6465 "cs-parser.jay"
{
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_987()
#line 6475 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Lock ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_988()
#line 6483 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Lock ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_989()
#line 6493 "cs-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.FixedVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Fixed.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_990()
#line 6503 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_991()
#line 6508 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Fixed f = new Fixed ((Fixed.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		current_block.AddStatement (f);
		lbag.AddStatement (f, GetLocation (yyVals[-8+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_992()
#line 6521 "cs-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.UsingVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Using.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_993()
#line 6531 "cs-parser.jay"
{
		yyVal = current_variable;	  
		current_variable = null;
	  }

void case_994()
#line 6536 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Using u = new Using ((Using.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-8+yyTop]));
		current_block.AddStatement (u);
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_995()
#line 6545 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Using ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_996()
#line 6553 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new Using ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_998()
#line 6564 "cs-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  }

void case_1000()
#line 6576 "cs-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		yyVal = current_variable;
	  }

void case_1001()
#line 6587 "cs-parser.jay"
{
		lexer.query_parsing = false;
			
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_1002()
#line 6599 "cs-parser.jay"
{
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_1003()
#line 6610 "cs-parser.jay"
{
	        lexer.query_parsing = false;
		yyVal = yyVals[-1+yyTop];

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_1004()
#line 6617 "cs-parser.jay"
{
	        yyVal = yyVals[-1+yyTop];
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_1005()
#line 6626 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		var clause = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (clause, GetLocation (yyVals[-1+yyTop]));
		yyVal = new Linq.QueryExpression (clause);
	  }

void case_1006()
#line 6636 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		var clause = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
		};
		lbag.AddLocation (clause, GetLocation (yyVals[-1+yyTop]));
		yyVal = new Linq.QueryExpression (clause);
	  }

void case_1007()
#line 6651 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		var clause = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (clause, GetLocation (yyVals[-1+yyTop]));
		yyVal = new Linq.QueryExpression (clause);
	  }

void case_1008()
#line 6661 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		var clause = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
		};
		lbag.AddLocation (clause, GetLocation (yyVals[-1+yyTop]));
		yyVal = new Linq.QueryExpression (clause);
	  }

void case_1010()
#line 6680 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_1012()
#line 6696 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);

		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop])) {
			IdentifierType = (FullNamedExpression)yyVals[-4+yyTop]
		};
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_1013()
#line 6715 "cs-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[-1+yyTop];
		
		if (yyVals[0+yyTop] != null)
			head.Next = (Linq.AQueryClause)yyVals[0+yyTop];
				
		if (yyVals[-2+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-2+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_1014()
#line 6730 "cs-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[0+yyTop];

		if (yyVals[-1+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-1+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_1016()
#line 6743 "cs-parser.jay"
{
		report.Error (742, GetLocation (yyVals[0+yyTop]), "Unexpected symbol `{0}'. A query body must end with select or group clause", GetSymbolName (yyToken));
		yyVal = yyVals[-1+yyTop];
	  }

void case_1017()
#line 6748 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_1019()
#line 6760 "cs-parser.jay"
{
		yyVal = new Linq.Select ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_1020()
#line 6767 "cs-parser.jay"
{
	  	if (linq_clause_blocks == null)
	  		linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  	linq_clause_blocks.Push ((Linq.QueryBlock)current_block);
	  }

void case_1021()
#line 6775 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_1022()
#line 6782 "cs-parser.jay"
{
		var obj = (object[]) yyVals[0+yyTop];

		yyVal = new Linq.GroupBy ((Linq.QueryBlock)current_block, (Expression)yyVals[-2+yyTop], linq_clause_blocks.Pop (), (Expression)obj[0], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, (Location) obj[1]);
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_1024()
#line 6799 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new object[2] { null, Location.Null };
	  }

void case_1026()
#line 6808 "cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-1+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }

void case_1033()
#line 6828 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
	  	yyVal = new Linq.Let ((Linq.QueryBlock) current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  	
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_1035()
#line 6847 "cs-parser.jay"
{
		yyVal = new Linq.Where ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_1036()
#line 6857 "cs-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_1037()
#line 6865 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_1038()
#line 6873 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_1039()
#line 6881 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();

		var lt = (LocatedToken) yyVals[-10+yyTop];	
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-11+yyTop]));
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]));
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
			
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location);

			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-11+yyTop]));	
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		}

		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);
	  }

void case_1040()
#line 6919 "cs-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_1041()
#line 6927 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_1042()
#line 6935 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_1043()
#line 6943 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();
		
		var lt = (LocatedToken) yyVals[-10+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;		
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};
			lbag.AddLocation (yyVal, GetLocation (yyVals[-10+yyTop]), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]));
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
		
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location); /* TODO:*/
			
			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};			
		}
		
		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);		
	  }

void case_1047()
#line 6999 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		yyVal = yyVals[0+yyTop];
	  }

void case_1049()
#line 7010 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_1050()
#line 7017 "cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	  }

void case_1052()
#line 7026 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock ((Linq.QueryBlock) current_block, lexer.Location);	 
	 }

void case_1053()
#line 7033 "cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	 }

void case_1055()
#line 7045 "cs-parser.jay"
{
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1056()
#line 7050 "cs-parser.jay"
{
		yyVal = new Linq.OrderByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1058()
#line 7062 "cs-parser.jay"
{
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1059()
#line 7067 "cs-parser.jay"
{
		yyVal = new Linq.ThenByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1061()
#line 7077 "cs-parser.jay"
{
		/* query continuation block is not linked with query block but with block*/
		/* before. This means each query can use same range variable names for*/
		/* different identifiers.*/

		current_block.SetEndLocation (GetLocation (yyVals[-1+yyTop]));
		current_block = current_block.Parent;
	
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);		
	  }

void case_1062()
#line 7093 "cs-parser.jay"
{
		var current_block = linq_clause_blocks.Pop ();	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
  		yyVal = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, null, rv, GetLocation (yyVals[-3+yyTop])) {
  			next = (Linq.AQueryClause)yyVals[0+yyTop]
  		};
	  }

void case_1065()
#line 7120 "cs-parser.jay"
{ 
		current_container = current_type = new Class (current_container, new MemberName ("<InteractiveExpressionClass>"), Modifiers.PUBLIC, null);

		/* (ref object retval)*/
		Parameter [] mpar = new Parameter [1];
		mpar [0] = new Parameter (new TypeExpression (compiler.BuiltinTypes.Object, Location.Null), "$retval", Parameter.Modifier.REF, null, Location.Null);

		ParametersCompiled pars = new ParametersCompiled (mpar);
		var mods = Modifiers.PUBLIC | Modifiers.STATIC;
		if (settings.Unsafe)
			mods |= Modifiers.UNSAFE;

		current_local_parameters = pars;
		var method = new InteractiveMethod (
			current_type,
			new TypeExpression (compiler.BuiltinTypes.Void, Location.Null),
			mods,
			pars);
			
		current_type.AddMember (method);			
		oob_stack.Push (method);

		interactive_async = false;

		++lexer.parsing_block;
		start_block (lexer.Location);
	  }

void case_1066()
#line 7148 "cs-parser.jay"
{
		--lexer.parsing_block;
		var method = (InteractiveMethod) oob_stack.Pop ();
		method.Block = (ToplevelBlock) end_block(lexer.Location);

		if (interactive_async == true) {
			method.ChangeToAsync ();
		}

		InteractiveResult = (Class) pop_current_class ();
		current_local_parameters = null;
	  }

void case_1076()
#line 7194 "cs-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-1+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		yyVal = null;
	  }

void case_1077()
#line 7200 "cs-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		yyVal = null;
	  }

void case_1078()
#line 7206 "cs-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-3+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value);
	  }

void case_1081()
#line 7221 "cs-parser.jay"
{
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-6+yyTop], MemberCache.IndexerNameAlias, Location.Null);
	  }

void case_1082()
#line 7226 "cs-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Explicit;
		yyVal = null;
	  }

void case_1083()
#line 7234 "cs-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Implicit;
		yyVal = null;
	  }

void case_1084()
#line 7242 "cs-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop];
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = (Operator.OpType) yyVals[-1+yyTop];
		yyVal = null;
	  }

void case_1092()
#line 7280 "cs-parser.jay"
{
		var parameters = new List<DocumentationParameter> ();
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }

void case_1093()
#line 7286 "cs-parser.jay"
{
		var parameters = yyVals[-2+yyTop] as List<DocumentationParameter>;
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }

void case_1094()
#line 7295 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != null)
			yyVal = new DocumentationParameter ((Parameter.Modifier) yyVals[-1+yyTop], (FullNamedExpression) yyVals[0+yyTop]);
		else
			yyVal = new DocumentationParameter ((FullNamedExpression) yyVals[0+yyTop]);
	  }

#line default
   static readonly short [] yyLhs  = {              -1,
    0,    4,    0,    0,    1,    1,    1,    1,    2,    2,
   11,   11,   12,   12,   13,   13,   14,   15,   15,   15,
   19,   20,   17,   17,   22,   22,   22,   18,   18,   18,
   23,   23,   24,   24,    7,    7,    6,    6,   21,   21,
    8,    8,   25,   25,   25,   26,   26,   26,   26,   26,
    9,    9,   10,   10,   34,   32,   37,   33,   33,   33,
   33,   35,   35,   35,   36,   36,   41,   38,   39,   40,
   40,   42,   42,   42,   42,   42,   43,   43,   43,   47,
   44,   46,   50,   49,   49,   49,   52,   52,   53,   53,
   54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
   54,   54,   54,   54,   68,   63,   73,   75,   78,   79,
   80,   28,   28,   83,   55,   55,   84,   84,   85,   85,
   86,   88,   82,   82,   87,   87,   93,   56,   97,   56,
   56,   92,  100,   92,   94,   94,  101,  101,  102,  103,
  102,   98,   98,  104,  104,  105,  106,   96,   96,   99,
   99,   99,  109,   57,  112,  113,  107,  114,  115,  116,
  107,  107,  107,  108,  108,  118,  118,  121,  119,  111,
  111,  122,  122,  122,  122,  122,  122,  122,  122,  122,
  122,  123,  123,  126,  126,  126,  126,  129,  126,  127,
  127,  130,  130,  131,  131,  131,  124,  124,  124,  132,
  132,  132,  125,  134,  136,  137,  139,   58,  140,   58,
  138,  142,  138,  141,  141,  144,  146,   60,  145,  145,
  135,  135,  135,  135,  135,  150,  147,  151,  148,  149,
  149,  149,  152,  153,  154,  156,   29,   29,  155,  155,
  157,  157,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  160,   61,  161,  161,  164,  159,  159,  163,  163,
  163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
  163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
  163,  166,  165,  167,  165,  165,  165,   62,  170,  172,
  168,  169,  169,  171,  171,  176,  174,  177,  174,  174,
  174,  178,   64,  180,   59,  183,  184,   59,   59,  179,
  186,  179,  181,  181,  187,  187,  188,  189,  188,  190,
  185,  182,  182,  182,  182,  182,  194,  191,  195,  192,
  193,  193,   65,   66,  197,  199,  200,   30,  196,  196,
  196,  198,  198,  198,  201,  201,  202,  203,  202,  202,
  202,  204,  205,  206,   31,  207,  207,   16,   16,   16,
  208,  208,  208,  212,  212,  210,  210,  210,  213,  213,
  215,   72,  133,  110,  110,  143,  143,  216,  216,  216,
  214,  214,  217,  217,  218,  218,  220,  220,   91,   81,
   81,   95,   95,  128,  128,  162,  162,  222,  222,  222,
  221,  225,  225,  225,  227,  227,  228,  226,  226,  226,
  226,  226,  226,  226,  229,  229,  229,  229,  229,  229,
  229,  229,  229,  230,  230,  230,  230,  230,  230,  230,
  230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
  230,  230,  230,  231,  231,  231,  232,  232,  232,  252,
  252,  253,  253,  254,  254,  234,  234,  251,  251,  251,
  251,  251,  251,  251,  251,  251,  251,  251,  251,  236,
  236,  236,  256,  256,  257,  257,  258,  258,  260,  260,
  260,  261,  261,  261,  261,  261,  261,  261,  262,  262,
  175,  175,  255,  255,  255,  255,  255,  267,  267,  266,
  266,  268,  268,  268,  268,  268,  268,  270,  270,  270,
  269,  237,  237,  237,  237,  265,  265,  272,  272,  273,
  273,  238,  239,  239,  240,  241,  242,  242,  233,  233,
  233,  233,  233,  278,  274,  243,  243,  279,  279,  280,
  280,  281,  281,  281,  281,  282,  282,  282,  282,  275,
  275,  223,  223,  277,  277,  283,  283,  276,  276,   90,
   90,  284,  284,  244,  285,  285,  211,  209,  245,  245,
  246,  246,  247,  247,  248,  287,  249,  288,  249,  286,
  286,  290,  289,  235,  291,  291,  291,  291,  291,  291,
  291,  291,  291,  292,  292,  292,  292,  292,  292,  292,
  292,  292,  292,  292,  292,  292,  293,  293,  293,  293,
  293,  293,  293,  294,  294,  294,  294,  294,  294,  294,
  294,  294,  294,  294,  294,  295,  297,  297,  297,  297,
  297,  297,  297,  297,  297,  298,  299,  301,  301,  302,
  303,  303,  300,  300,  304,  304,  305,  305,  306,  306,
  306,  306,  306,  307,  307,  307,  307,  307,  307,  307,
  307,  307,  308,  308,  308,  308,  308,  309,  309,  309,
  310,  310,  310,  311,  311,  311,  312,  312,  312,  313,
  313,  313,  314,  314,  315,  315,  315,  315,  315,  316,
  316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
  317,  317,  318,  318,  318,  318,  319,  319,  321,  320,
  320,  320,   51,   51,  323,  322,  324,  322,  325,  322,
  326,  327,  322,  328,  329,  322,   45,   45,  263,  263,
  263,  263,  250,  250,  250,   89,  331,   74,   74,  332,
  333,  333,  333,  333,  335,  333,  336,  337,  338,  339,
   27,   71,   71,   70,   70,  117,  117,  340,  340,  340,
  340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
  340,  340,   76,   76,  334,  334,   77,   77,  341,  341,
  342,  342,  343,  343,  344,  344,  344,  344,  219,  219,
  345,  345,  346,  120,   69,   69,  347,  173,   67,   67,
  348,  348,  349,  349,  349,  349,  353,  353,  354,  354,
  354,  351,  351,  351,  351,  351,  351,  351,  351,  351,
  351,  351,  351,  351,  355,  355,  355,  355,  355,  355,
  355,  355,  355,  355,  355,  355,  355,  369,  369,  369,
  369,  356,  370,  352,  271,  271,  371,  371,  371,  371,
  224,  224,  372,   48,   48,  374,  350,  377,  350,  373,
  373,  373,  375,  375,  381,  381,  380,  380,  382,  382,
  376,  376,  378,  378,  383,  383,  384,  379,  379,  379,
  357,  357,  357,  368,  368,  385,  386,  386,  358,  358,
  387,  387,  387,  390,  388,  388,  389,  389,  391,  391,
  391,  392,  393,  393,  394,  394,  394,  359,  359,  359,
  359,  395,  395,  396,  396,  396,  400,  397,  403,  399,
  399,  406,  402,  402,  405,  405,  407,  407,  401,  401,
  410,  409,  409,  404,  404,  408,  408,  412,  411,  411,
  398,  398,  413,  398,  360,  360,  360,  360,  360,  360,
  414,  415,  415,  416,  416,  416,  417,  417,  417,  418,
  418,  418,  419,  419,  419,  420,  420,  361,  361,  361,
  361,  421,  421,  296,  296,  422,  424,  422,  422,  422,
  423,  423,  362,  363,  425,  366,  364,  364,  427,  428,
  367,  430,  431,  365,  365,  365,  429,  429,  426,  426,
  330,  330,  330,  330,  432,  432,  434,  434,  436,  435,
  437,  435,  433,  433,  433,  433,  433,  441,  439,  442,
  444,  439,  443,  443,  438,  438,  445,  445,  445,  445,
  445,  450,  446,  451,  447,  452,  453,  454,  448,  456,
  457,  458,  448,  455,  455,  460,  449,  459,  463,  459,
  462,  465,  462,  461,  461,  461,  464,  464,  464,  440,
  466,  440,    3,    3,  467,    3,    3,  468,  468,  264,
  264,  259,  259,    5,  469,  469,  469,  469,  469,  473,
  469,  469,  469,  469,  470,  470,  471,  474,  471,  472,
  472,  475,  475,  476,
  };
   static readonly short [] yyLen = {           2,
    2,    0,    3,    1,    2,    4,    3,    1,    0,    1,
    1,    2,    4,    2,    1,    2,    1,    3,    5,    2,
    0,    0,   11,    3,    0,    1,    1,    1,    3,    1,
    0,    1,    0,    1,    0,    1,    0,    1,    0,    1,
    1,    2,    1,    1,    2,    1,    1,    1,    1,    1,
    0,    1,    1,    2,    0,    3,    0,    6,    3,    2,
    1,    1,    1,    1,    1,    3,    0,    3,    1,    0,
    3,    0,    1,    1,    3,    3,    1,    1,    1,    0,
    4,    4,    1,    0,    1,    1,    0,    1,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    0,    4,    0,    0,    0,    0,
    0,   17,    5,    0,    9,    5,    0,    1,    1,    2,
    3,    0,    3,    1,    1,    1,    0,    8,    0,    9,
    6,    0,    0,    3,    0,    1,    1,    2,    2,    0,
    5,    0,    1,    1,    2,    3,    0,    4,    2,    1,
    1,    1,    0,    3,    0,    0,   10,    0,    0,    0,
   12,    8,    5,    1,    1,    1,    1,    0,    4,    0,
    1,    1,    3,    3,    3,    5,    3,    5,    1,    1,
    1,    1,    3,    4,    6,    2,    4,    0,    7,    0,
    1,    1,    2,    1,    1,    1,    4,    6,    4,    1,
    2,    2,    1,    0,    0,    0,    0,   12,    0,    6,
    0,    0,    4,    1,    1,    0,    0,   10,    3,    1,
    1,    2,    1,    2,    1,    0,    5,    0,    5,    1,
    1,    1,    0,    0,    0,    0,   15,    5,    0,    1,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    0,    5,    1,    1,    0,    7,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    0,    7,    0,    7,    2,    2,    2,    0,    0,
    9,    1,    1,    0,    1,    0,    6,    0,    6,    2,
    1,    0,    8,    0,    9,    0,    0,   10,    5,    0,
    0,    3,    0,    1,    1,    2,    2,    0,    5,    0,
    2,    2,    2,    1,    1,    1,    0,    5,    0,    5,
    1,    1,    2,    4,    0,    0,    0,   12,    0,    2,
    2,    0,    1,    2,    1,    3,    2,    0,    5,    3,
    1,    0,    0,    0,   13,    0,    1,    1,    3,    3,
    1,    4,    4,    2,    2,    0,    3,    2,    1,    3,
    0,    3,    1,    1,    3,    1,    2,    3,    4,    4,
    0,    3,    1,    3,    3,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    2,    2,    1,
    1,    2,    2,    2,    1,    3,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    3,    3,    4,    4,    5,
    4,    4,    4,    3,    3,    3,    4,    3,    4,    4,
    4,    3,    0,    1,    3,    4,    0,    1,    1,    3,
    2,    3,    3,    1,    2,    3,    5,    2,    1,    1,
    0,    1,    1,    3,    3,    3,    2,    1,    1,    1,
    1,    2,    2,    2,    2,    4,    3,    3,    2,    4,
    1,    4,    5,    4,    3,    1,    3,    1,    3,    1,
    1,    1,    4,    3,    2,    2,    6,    3,    7,    4,
    3,    7,    3,    0,    2,    4,    3,    1,    2,    0,
    1,    1,    3,    1,    2,    3,    1,    1,    1,    0,
    1,    1,    2,    2,    3,    1,    2,    0,    1,    2,
    4,    1,    3,    4,    1,    1,    1,    2,    4,    4,
    4,    2,    4,    2,    4,    0,    4,    0,    5,    0,
    1,    0,    4,    4,    1,    2,    2,    4,    2,    2,
    2,    4,    2,    1,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    1,    3,    3,    3,
    3,    3,    3,    1,    3,    3,    3,    3,    3,    4,
    3,    3,    3,    3,    3,    1,    1,    2,    2,    1,
    1,    4,    1,    1,    1,    4,    4,    1,    3,    3,
    1,    2,    0,    1,    1,    3,    1,    3,    1,    3,
    3,    3,    3,    1,    3,    3,    3,    3,    3,    3,
    3,    3,    1,    3,    3,    3,    3,    1,    3,    3,
    1,    3,    3,    1,    3,    3,    1,    3,    3,    1,
    3,    3,    1,    3,    1,    5,    4,    5,    5,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    1,    3,    3,    2,    1,    1,    0,    1,    0,    2,
    1,    1,    1,    1,    0,    4,    0,    4,    0,    5,
    0,    0,    7,    0,    0,    8,    1,    1,    1,    1,
    1,    1,    6,    4,    4,    1,    1,    0,    1,    3,
    0,    1,    1,    2,    0,    6,    0,    0,    0,    0,
   15,    0,    1,    0,    1,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    0,    1,    2,    3,    0,    1,    1,    2,
    4,    3,    1,    3,    1,    3,    1,    1,    0,    1,
    1,    1,    0,    4,    1,    1,    0,    4,    0,    1,
    1,    2,    1,    1,    1,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    0,    4,    1,    2,    2,    2,    1,    1,
    1,    2,    1,    1,    1,    0,    6,    0,    7,    0,
    2,    1,    0,    1,    0,    1,    1,    2,    2,    4,
    0,    2,    0,    1,    1,    2,    4,    1,    5,    2,
    2,    2,    2,    2,    2,    1,    1,    1,    1,    1,
    5,    7,    4,    0,    8,    4,    0,    1,    1,    2,
    1,    2,    1,    2,    3,    3,    1,    1,    1,    1,
    1,    5,    4,    7,    3,    6,    0,    4,    0,    5,
    1,    0,    4,    2,    2,    2,    1,    1,    0,    1,
    0,    5,    1,    0,    1,    0,    1,    1,    1,    3,
    4,    5,    0,    9,    1,    1,    1,    1,    1,    1,
    2,    2,    2,    3,    4,    3,    3,    3,    2,    3,
    3,    2,    4,    4,    3,    0,    1,    3,    4,    5,
    3,    1,    2,    0,    1,    3,    0,    8,    3,    6,
    0,    4,    2,    2,    0,    3,    5,    4,    0,    0,
   10,    0,    0,    9,    5,    4,    2,    1,    0,    2,
    2,    2,    2,    2,    4,    5,    4,    5,    0,    5,
    0,    6,    3,    2,    2,    2,    1,    0,    3,    0,
    0,    5,    2,    1,    1,    2,    1,    1,    1,    1,
    1,    0,    5,    0,    3,    0,    0,    0,   12,    0,
    0,    0,   13,    0,    2,    0,    3,    1,    0,    4,
    1,    0,    4,    1,    2,    2,    1,    2,    2,    0,
    0,    4,    2,    3,    0,    4,    2,    2,    3,    0,
    1,    1,    1,    2,    2,    2,    2,    4,    3,    0,
    7,    4,    4,    3,    1,    3,    0,    0,    4,    0,
    1,    1,    3,    2,
  };
   static readonly short [] yyDefRed = {            0,
    8,    0,    0,    0,    0,    0,    0,    0,    2,    4,
    0,    0,   11,   14,    0, 1063,    0,    0, 1067,    0,
    0,   15,   17,  410,  416,  423,  411,  413,    0,  412,
    0,  419,  421,  408,    0,  415,  417,  409,  420,  422,
  418,    0,  371, 1085,    0,  414, 1074,    0,   10,    1,
    0,    0,    0,   12,    0,  888,    0,    0,    0,    0,
    0,    0,    0,    0,  451,    0,    0,    0,    0,    0,
    0,    0,  449,    0,    0,    0,  522,    0,  450,    0,
    0,    0,  985,    0,    0,    0,  732,    0,    0,    0,
    0,    0,    0,    0,  793,    0,  842,    0,    0,    0,
    0,    0,    0,    0,    0,  448,    0,  721,    0,  887,
    0,  825,    0,  444,  850,  849,    0,    0,    0,  425,
  426,  427,  428,  429,  430,  431,  432,  433,  434,  435,
  436,  437,  438,  439,  440,  441,  442,  443,  446,  447,
  728,    0,  594,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  729,  727,  730,  731,  809,
  811,    0,  807,  810,  826,  828,  829,  830,  831,  832,
  833,  834,  835,  836,  837,  827,    0,    0,  889,  890,
  908,  909,  910,  911,  945,  946,  947,  948,  949,  950,
    0,    0,    0,   20,    0,    0,  358,    0,  361, 1071,
   16, 1064,    0,    0,  264,  281,  263,  260,  265,  266,
  259,  278,  277,  270,  271,  267,  269,  268,  272,  261,
  262,  273,  274,  280,  279,  275,  276,    0, 1088, 1077,
    0,    0, 1076,    0, 1075,    3,   55,    0,    0,    0,
   44,   41,   43,   46,   47,   48,   49,   50,   53,   13,
    0,    0,    0,  951,  572,  452,  453,  983,    0,    0,
    0,    0,    0,    0,    0,    0,  953,  952,    0,  582,
  576,  581,  841,  886,  812,  839,  838,  840,  813,  814,
  815,  816,  817,  818,  819,  820,  821,  822,  823,  824,
    0,    0,    0,  917,    0,    0,    0,  855,  854,    0,
    0,    0,    0,    0,    0,    0,    0,  959,    0,    0,
    0,    0,  424,    0,    0,    0,  962,    0,    0,    0,
    0,  574,  984,    0,    0,    0,  853,  404,    0,    0,
    0,    0,    0,    0,  390,  391,    0,  400,    0,    0,
    0,    0,    0,    0,    0,  724,    0,  593,    0,    0,
  717,    0,    0,  589,    0,    0,  591,  587,  601,  595,
  602,  596,  590,  586,  606,  600,  605,  599,  603,  597,
  604,  598,  715,  568,    0,  567,  445,  364,  365,    0,
    0,    0,    0,    0,  843,    0,  357,    0,  402,  403,
    0,    0,  525,  526,    0,    0,    0,  847,  848,  856,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1066,  808,  846,    0,  884,  885, 1017,
 1034,    0,    0, 1018, 1020,    0, 1046, 1003, 1001, 1027,
    0,    0, 1025, 1028, 1029, 1030, 1031, 1004, 1002,    0,
    0,    0,    0,   18,    0,    0,    0, 1084,    0,    0,
  372,    0,    0, 1086,    0,    0,   42,  763,  769,  761,
    0,  758,  768,  762,  760,  759,  766,  764,  765,  771,
  767,  770,  772,    0,    0,  756,   45,   54,  524,    0,
  520,  521,    0,    0,  518,    0,  858,    0,    0,    0,
  915,    0,  883,  881,  882,    0,    0,    0,  736,    0,
  956,  954,  737,    0,    0,  549,    0,    0,  537,  544,
    0,    0,    0,  538,    0,    0,  554,  556,    0,  533,
    0,    0,    0,    0,    0,  528,    0,  531,  535,  393,
  392,  958,  957,    0,    0,  961,  960,  971,    0,    0,
    0,  972,  566,    0,  387,  565,    0,    0,  986,    0,
    0,  852,    0,  398,  399,    0,    0,  397,    0,    0,
    0,  607,    0,    0,  578,    0,  719,  625,  624,    0,
    0,  806,    0,    0,  801,  803,  804,  805,  456,  457,
    0,  368,  369,    0,  195,  194,  196,    0,  706,    0,
    0,    0,  394,    0,  701,    0,    0,  965,    0,    0,
    0,  464,  465,    0,  468,    0,    0,    0,    0,  466,
    0,    0,  515,    0,  472,    0,    0,    0,    0,  498,
  501,    0,    0,  493,  500,  499,    0,  690,  691,  692,
  693,  694,  695,  696,  697,  698,  700,  699,  611,  608,
  613,  610,  612,  609,  622,  619,  623,    0,    0,  633,
    0,    0,    0,    0,    0,  626,    0,  621,  634,  635,
  617,    0,  618,    0,  652,    0,    0,  653,    0,  659,
    0,  660,    0,  661,    0,  662,    0,  666,    0,  667,
    0,  670,    0,  673,    0,  676,    0,  679,    0,  682,
    0,  684,    0,  553,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1016, 1015,    0, 1026,    0, 1014,    0,
    0,  359,  360, 1082, 1083,    0,    0,  192,    0,    0,
 1092,  386,    0,    0,    0,  383, 1078, 1080,   61,   63,
   64,    0,    0,   56,    0,    0,   65,   67,   30,   28,
    0,    0,    0,  753,    0,  757,  462,    0,  523,    0,
  571,    0,  584,  181,  203,    0,    0,    0,  171,    0,
    0,    0,  182,  577,    0,  989,  921,    0,  939,  918,
    0,  930,    0,  941,    0,  955,  893,    0,  988,    0,
    0,  536,    0,  545,  555,  557,    0,    0,    0,    0,
  484,    0,    0,  479,    0,    0,  714,  713,  516,    0,
  559,  530,    0,    0,  152,  560,  150,  151,  562,    0,
  570,  569,  896,    0,    0,    0,    0,  969,    0,  973,
  564,  573,  996,    0,  992,  913,    0, 1007,    0, 1005,
    0,    0,  734,  735,    0,    0,    0,  712,  711,  718,
    0,  463,  795,  796,  794,  802,  716,    0,  367,  704,
    0,    0,    0,  592,  588,  964,  963,  844,  469,  461,
    0,    0,  467,  458,  459,  575,  514,  512,    0,  511,
  504,  505,    0,  502,  503,    0,  497,  454,  455,  470,
  471,    0,  862,    0,    0,  628,  629,    0,    0,    0,
  975,  620,  687,    0, 1035, 1009,    0, 1036,    0, 1019,
 1021, 1032,    0, 1047,    0, 1013, 1061,   19,  362,  363,
 1094,  193, 1089,    0,  792,  791,    0,  790,    0,  382,
    0,   60,   57,    0,    0,    0,    0,    0,    0,  389,
    0,  747,    0,    0,   86,   85,    0,  519,    0,    0,
    0,    0,    0,  186,  583,    0,    0,    0,    0,    0,
  931,  919,    0,  942,    0,    0,  987,  546,  543,    0,
  488,    0,    0,    0, 1072, 1073,  475,  481,    0,  485,
    0,    0,    0,    0,    0,    0,  894,    0,  979,    0,
  976,  970,  995,    0,  912, 1008, 1006,    0,  579,    0,
  720,  710,  370,  703,  702,  722,  460,  513,    0,    0,
  507,    0,  496,  495,  494,    0,  878,  861,    0,    0,
    0,  867,    0,    0,    0,  638,    0,    0,  641,    0,
  647,    0,  645,  688,  689,  686,    0, 1011,    0, 1040,
    0,    0, 1055, 1056, 1049,    0, 1093,  385,  384,    0,
    0,   66,   59,    0,   68,   29,   22,    0,    0,  335,
    0,  238,    0,  113,    0,   82,   83,  872,  125,  126,
    0,    0,    0,  875,  201,  202,    0,    0,    0,    0,
  174,  183,  175,  177,  916,    0,    0,    0,    0,    0,
  940,    0,    0,  489,  490,  483,  486,  482,    0,  476,
  480,    0,  551,    0,  517,  527,  474,  563,  561,    0,
    0,    0,  998,    0,    0,  733,  725,    0,  508,    0,
  506,    0,    0,  857,  868,  632,    0,  637,    0,    0,
  642,  636,    0, 1010,    0,    0,    0, 1024,    0, 1022,
 1033,    0, 1062, 1081,    0,   79,    0,    0,   73,   74,
   77,   78,    0,  352,  341,  340,    0,  748,  234,  108,
    0,  859,  876,  187,    0,  199,    0,    0,    0,  914,
 1000,    0,    0,    0,  935,    0,    0,  943,  892,    0,
  532,  529,  901,    0,  907,    0,    0,  899,    0,  903,
  982,    0,  997,  993,    0,  723,  510,    0,    0,  640,
  639,  648,  646, 1012, 1037,    0, 1023,    0,    0, 1051,
    0,   80,   71,    0,    0,    0,  336,    0,    0,    0,
    0,    0,  188,    0,  178,  176,  990,  932,  920,  928,
  927,  922,  924,    0,  487,    0,  895,  900,    0,  904,
  980,    0,    0,  726,    0,  870,    0, 1041, 1058, 1059,
 1052,   58,    0,   75,   76,    0,    0,    0,    0,    0,
    0,    0,  742,    0,  774,    0,  739,  877,  185,    0,
  198,    0,    0,  944,  906,  905,    0,  994,  879,    0,
    0,    0,   81,    0,    0,  353,    0,    0,  351,  337,
    0,  345,    0,  407,    0,  405,    0,    0,  749,    0,
  779,  235,    0,  189,  991,  923,    0,    0,  937,  797,
  978, 1038,    0, 1053,    0,    0,    0,  333,    0,    0,
  740,  776,    0,  745,    0,    0,  780,    0,  109,  926,
  925,    0,    0, 1042,   27,   26,   23,  354,  350,    0,
    0,  346,  406,    0,  782,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   32,  338,    0,  787,    0,  788,
  785,    0,  783,  104,  105,    0,  101,    0,    0,   89,
   91,   92,   93,   94,   95,   96,   97,   98,   99,  100,
  102,  103,  153,    0,    0,  251,  243,  244,  245,  246,
  247,  248,  249,  250,    0,    0,  241,  110,  798,    0,
 1039,    0,  355,  349,  746,    0,    0,    0,    0,  750,
   90,    0,  293,  288,  292,    0,  236,  242,    0, 1045,
 1043,  786,  784,    0,    0,    0,    0,    0,    0,    0,
    0,  302,    0,    0,  252,    0,    0,  258,    0,  168,
  167,  154,  164,  165,  166,    0,    0,    0,  106,    0,
    0,  287,    0,    0,  286,    0,  158,    0,    0,  376,
  334,    0,  374,    0,    0,    0,    0,    0,    0,    0,
    0,  751,    0,  237,  111,  116,  114,  309,    0,  373,
    0,    0,    0,    0,  129,    0,    0,    0,    0,    0,
    0,  163,  155,    0,    0,    0,  216,    0,  377,    0,
  253,    0,    0,    0,    0,  306,    0,  284,  131,    0,
  282,    0,    0,    0,  133,    0,  378,    0,    0,  205,
  210,    0,    0,    0,  375,  256,  169,  112,  124,  122,
    0,    0,  311,    0,    0,    0,    0,    0,  159,    0,
  290,    0,    0,    0,    0,  137,    0,    0,    0,    0,
  379,  380,    0,    0,    0,    0,    0,  119,  326,    0,
  307,    0,    0,  320,    0,    0,    0,  315,    0,  149,
    0,    0,    0,    0,  144,    0,    0,  303,    0,  134,
    0,  128,  138,  156,  162,  225,    0,  206,    0,    0,
  217,    0,  123,    0,  115,  120,    0,    0,    0,  322,
    0,  323,  312,    0,    0,  305,  316,  285,    0,    0,
  130,  145,  283,    0,  301,    0,  291,  295,  140,    0,
    0,    0,  222,  224,    0,  257,  121,  327,  329,  308,
    0,    0,  321,  318,  148,  146,  160,  300,    0,    0,
    0,  157,  226,  228,  207,    0,  220,  218,    0,    0,
  320,    0,  296,  298,  141,    0,    0,    0,    0,  331,
  332,  328,  330,  319,  161,    0,    0,  232,  231,  230,
  227,  229,  212,  208,  219,    0,    0,    0,  297,  299,
  214,  215,    0,  213,
  };
  protected static readonly short [] yyDgoto  = {             7,
    8,   50,    9,   51,   10,   11,   52,  238,  776,  777,
   12,   13,   53,   22,   23,  332,  241,  761,  948, 1163,
 1295, 1347, 1670,  945,  242,  243,  244,  245,  246,  247,
  248,  249,  754,  475,  755,  756, 1061,  757,  758, 1065,
  946, 1158, 1159, 1160,  274,  641, 1263,  111,  957, 1076,
  819, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386,
 1387, 1388, 1389, 1390, 1391, 1392,  593, 1418,  865,  494,
  765, 1473, 1075, 1276, 1230, 1274, 1309, 1359, 1429, 1514,
 1304, 1541, 1515, 1566, 1567, 1568, 1078, 1564, 1079,  828,
  949, 1526, 1500, 1554,  549, 1547, 1520, 1583, 1027, 1552,
 1555, 1556, 1651, 1584, 1585, 1581, 1393, 1452, 1422, 1474,
  778, 1528, 1630, 1497, 1587, 1662,  495, 1453, 1454,  275,
 1483,  779,  780,  781,  782,  783,  736,  611, 1280,  737,
  738,  963, 1476, 1505, 1598, 1559, 1632, 1684, 1668, 1506,
 1693, 1688, 1477, 1532, 1658, 1635, 1599, 1600, 1681, 1666,
 1667, 1073, 1229, 1338, 1405, 1457, 1406, 1407, 1445, 1480,
 1446,  335,  228, 1563, 1448, 1548, 1545, 1394, 1424, 1469,
 1627, 1589, 1321, 1628,  642, 1676, 1677, 1468, 1544, 1517,
 1576, 1571, 1542, 1608, 1613, 1574, 1577, 1578, 1661, 1614,
 1572, 1573, 1672, 1659, 1660, 1070, 1167, 1300, 1268, 1329,
 1301, 1302, 1350, 1226, 1326, 1363,  389,  197,  113,  378,
  379,  114,  604,  471,  231, 1492,  745,  746,  937,  950,
  115,  337,  436,  328,  338,  312, 1305, 1306,   46,  118,
  313,  120,  121,  122,  123,  124,  125,  126,  127,  128,
  129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
  139,  140,  259,  900,  824, 1116, 1105,  812,  987,  813,
  814, 1106,  141,  202,  820,  644,  645,  646,  891,  892,
  142,  504,  505,  305, 1114,  822,  437,  307,  533,  534,
  535,  536,  539,  830,  567,  271,  510,  855,  272,  509,
  143,  144,  145,  146, 1038,  912, 1039,  679,  680, 1040,
 1035, 1036, 1041, 1042, 1043,  147,  148,  149,  150,  151,
  152,  153,  154,  155,  156,  157,  614,  615,  616,  860,
  861,  158,  601,  590,  857,  380, 1128,  586, 1205,  159,
  524, 1271, 1272, 1275, 1354, 1071, 1228, 1336, 1449,  496,
 1310, 1311, 1372, 1373,  938,  355, 1342,  594,  595,  276,
  277,  278,  162,  163,  164,  279,  280,  281,  282,  283,
  284,  285,  286,  287,  288,  289,  290,  176,  291,  621,
  177,  329,  905,  647, 1030,  960,  772, 1082, 1028, 1031,
 1183, 1032, 1083, 1084,  292,  178,  179,  180, 1196, 1120,
 1197, 1198, 1199, 1200,  181,  182,  183,  184,  790,  517,
  791, 1186, 1100, 1187, 1316, 1283, 1243, 1317,  792, 1099,
  793, 1319, 1244,  185,  186,  187,  188,  189,  190,  314,
  561,  562,  837, 1252,  325, 1098,  970, 1282, 1125, 1004,
 1253,  191,  449,  192,  450, 1047, 1145,  451,  452,  729,
  720,  721, 1150, 1051,  453,  454,  455,  456,  457, 1052,
  715, 1049, 1257, 1343, 1411, 1147, 1291, 1362,  924,  723,
  925, 1219, 1152, 1220, 1292, 1056,   17,   19,   47,   48,
  230,  739,  941,  469,  740,  741,
  };
  protected static readonly short [] yySindex = {         -138,
    0, -188, -130, -211,   16,19272,    0,  154,    0,    0,
   16, -211,    0,    0,   32,    0, 8669,   16,    0, -178,
 -261,    0,    0,    0,    0,    0,    0,    0,  265,    0,
  309,    0,    0,    0,12017,    0,    0,    0,    0,    0,
    0,  134,    0,    0,  813,    0,    0,  862,    0,    0,
  154,  364,   16,    0,  319,    0, -266,  346, -159,18762,
   25,  196,  373, 8827,    0,  196,  196,  196,   95,  196,
  196,  798,    0,10976,  196,  196,    0,11134,    0,  415,
  196,  -97,    0,  196,  433,  196,    0,19355,19355,  430,
  196,  196,   46,11294,    0,17679,    0,12324,12456,12588,
12720,12852,12984,13116,13248,    0,  285,    0, 9911,    0,
  201,    0,  135,    0,    0,    0,  545,  348,   81,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  135,    0, 1437,  854,  166,   39,  655,  491,  457,
  469,  619,  625, -274,  702,    0,    0,    0,    0,    0,
    0, 4272,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  686,  -11,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 -147,  809,  364,    0,  458,  390,    0,  695,    0,    0,
    0,    0, 9911, 9911,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  134,    0,    0,
  721,  726,    0, -242,    0,    0,    0,  364,16161,  705,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  864,  135,17816,    0,    0,    0,    0,    0,17679, -126,
 -115,  880,  819,  479,  348,  135,    0,    0, 9911,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 -176, -276,18762,    0, 9911,17679,  853,    0,    0,  868,
17679,17679, 7196,  715, -194,  831, 9911,    0,11294,  285,
 1004,  904,    0,  888, 9911,17679,    0, 1026,  911, -135,
 4684,    0,    0,17679,  415,17131,    0,    0,  433,17679,
  514,  560,  939,  135,    0,    0,  686,    0,   81, 1015,
  135,17679,17679,17679,  373,    0,  970,    0, 9911, 9911,
    0,12192,  135,    0, 8985, -251,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 4844,    0,    0,    0,    0,19111,
  514,  951,  950,17679,    0,  462,    0,  218,    0,    0,
  202,  270,    0,    0,  925,11426, 9301,    0,    0,    0,
17679,17679,17679,17679,17679,17679,17679,17679,17679,17679,
17679,13380,13512,13644, 5004,15888,13776,13908,14040,14172,
14304,14436,14568,14700,14832,14964,15096,15228,15360,15492,
15624,18227,17679,    0,    0,    0,  686,    0,    0,    0,
    0,19355,19355,    0,    0,  135,    0,    0,    0,    0,
 1154,  975,    0,    0,    0,    0,    0,    0,    0,  364,
  705,  938,  948,    0,  462,  134,  134,    0,  706,  186,
    0,  134, 1007,    0, -143,16161,    0,    0,    0,    0,
 -137,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  363,19841,    0,    0,    0,    0,  963,
    0,    0, 1005,  751,    0, 1011,    0, 1013,  181,  415,
    0,  196,    0,    0,    0,  135,10210, -142,    0, 1003,
    0,    0,    0,   87,  119,    0,  819,  479,    0,    0,
 1006,    0, 1018,    0, 1014,  960,    0,    0,  815,    0,
 9575,  826,11584,  831,16994,    0, 9736,    0,    0,    0,
    0,    0,    0,  145,  158,    0,    0,    0,   52,  415,
  369,    0,    0,  433,    0,    0, 1019, 1021,    0,  159,
  135,    0,  165,    0,    0,17679, 1097,    0,17679, 1102,
 1022,    0, 1027, 1028,    0,19111,    0,    0,    0,  175,
  963,    0, -262, 8985,    0,    0,    0,    0,    0,    0,
  175,    0,    0,  212,    0,    0,    0,  433,    0,  514,
  135,10069,    0, 1024,    0, 1029,15756,    0, 1148, 1031,
 8985,    0,    0,  976,    0,  963,  135,17816,  980,    0,
  462,  963,    0,  169,    0,17268,17268, 1034, 1157,    0,
    0,   72,  -89,    0,    0,    0,   93,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,18352,18352,    0,
 9911,  578,    0,    0,    0,    0,  135,    0,    0,    0,
    0,  854,    0,  854,    0,12060,  166,    0,  166,    0,
   39,    0,   39,    0,   39,    0,   39,    0,  655,    0,
  655,    0,  491,    0,  457,    0,  469,    0,  619,    0,
  625,    0,  117,    0,11584, 1124,  135, 1126,  135,11584,
11584, 1043,17679,    0,    0,  975,    0,  135,    0,  575,
  462,    0,    0,    0,    0,10069,  706,    0, 1054, 1053,
    0,    0,  651,  364,  353,    0,    0,    0,    0,    0,
    0, -101, 1055,    0, 1058, 1056,    0,    0,    0,    0,
 1062,10227, 1020,    0,  516,    0,    0,  295,    0,17816,
    0, 1048,    0,    0,    0,  700,  187, 1064,    0, 1063,
 1065, 1067,    0,    0,17679,    0,    0,  135,    0,    0,
 1066,    0, 1069,    0, -144,    0,    0, 8827,    0, 8827,
10368,    0,16094,    0,    0,    0,10528,10660,  231,11584,
    0,  142,  105,    0, 1016, 1023,    0,    0,    0,  833,
    0,    0, 1072, 1073,    0,    0,    0,    0,    0, 1076,
    0,    0,    0, 1084,  196, 5162,  415,    0,  415,    0,
    0,    0,    0, 8827,    0,    0, 8827,    0,17679,    0,
17679, 9911,    0,    0,  415, 1081,  175,    0,    0,    0,
17679,    0,    0,    0,    0,    0,    0, 9911,    0,    0,
  135,19111, 1113,    0,    0,    0,    0,    0,    0,    0,
  963,  840,    0,    0,    0,    0,    0,    0,17268,    0,
    0,    0,  135,    0,    0,16857,    0,    0,    0,    0,
    0, 9894,    0,10052, 1082,    0,    0, 1086,  135,18477,
    0,    0,    0,10818,    0,    0, 1167,    0, 1168,    0,
    0,    0,  744,    0, 1090,    0,    0,    0,    0,    0,
    0,    0,    0,  706,    0,    0, 1049,    0,  186,    0,
  706,    0,    0,  938, 1098, 1101, 1057, 1106, 1020,    0,
 1103,    0, 1222, 1225,    0,    0,11584,    0,17405, 1109,
  700,10069, 9911,    0,    0,  540, 1230, 1231,  180, 1107,
    0,    0,17679,    0,17679, 1208,    0,    0,    0,17542,
    0, -243,17542,  849,    0,    0,    0,    0, 9438,    0,
 1234,  686,11584, 1123,10368, 1127,    0,17679,    0,  135,
    0,    0,    0,   94,    0,    0,    0, 1129,    0, 1156,
    0,    0,    0,    0,    0,    0,    0,    0, 1132, 1136,
    0,  879,    0,    0,    0, 9911,    0,    0,  135, 1134,
 1082,    0,18352, 1216,  688,    0,  389,  135,    0, 1146,
    0, 1145,    0,    0,    0,    0,11584,    0,11584,    0,
 -169,11584,    0,    0,    0,  665,    0,    0,    0, 1153,
  938,    0,    0,11742,    0,    0,    0, 1155, 5324,    0,
 1020,    0, 1020,    0, 1020,    0,    0,    0,    0,    0,
  135, 1152, 1109,    0,    0,    0, -119, -125, 1162, 1166,
    0,    0,    0,    0,    0, 1171,10368, 1082,   93,17679,
    0, 1172, 8827,    0,    0,    0,    0,    0, 1169,    0,
    0, 1159,    0,  831,    0,    0,    0,    0,    0, -191,
 1181, 1182,    0, 1082, 1183,    0,    0,  175,    0,17679,
    0, 1120, 1177,    0,    0,    0,18583,    0,  135,18583,
    0,    0,18477,    0,11584, 1214,11584,    0,11584,    0,
    0,17679,    0,    0, 1056,    0,  384,  891,    0,    0,
    0,    0, -211,    0,    0,    0, 1194,    0,    0,    0,
 1184,    0,    0,    0,  603,    0, 1186, 1316, 1319,    0,
    0, 1082, 1203, 1082,    0, 8827,  752,    0,    0,17542,
    0,    0,    0,17679,    0, 1211, -151,    0, 8509,    0,
    0, 1326,    0,    0,  175,    0,    0,17679,10052,    0,
    0,    0,    0,    0,    0, 1236,    0,  851, 1212,    0,
 1215,    0,    0,11742,   16,  181,    0,  850, 1213, 1218,
17405, 1228,    0,17679,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 8827,    0,  125,    0,    0, 8985,    0,
    0, 1300, 8827,    0, 1229,    0,11584,    0,    0,    0,
    0,    0,17679,    0,    0,  364, 1235,  364,  181, 9911,
 1213, 1264,    0, 1264,    0, 1213,    0,    0,    0,17679,
    0, 8827,17679,    0,    0,    0, 1239,    0,    0, 1262,
11584,17679,    0,  364, 1244,    0, 1196,  843,    0,    0,
 1241,    0, 1245,    0,  113,    0, 1248, 1207,    0, 1264,
    0,    0, 1264,    0,    0,    0,  754, 1069,    0,    0,
    0,    0, 1274,    0,   80, 1264, 1373,    0, 1261,  364,
    0,    0, 9911,    0,  127, 1263,    0, 1265,    0,    0,
    0, 8985,11584,    0,    0,    0,    0,    0,    0, 1250,
 1258,    0,    0,16994,    0,19317,  171,  364, 1268, 1269,
 1281,11584, 1266,17679,    0,    0, 1267,    0, 1270,    0,
    0, 1271,    0,    0,    0,19841,    0, 1272,  171,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  672,19841,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1276,  364,    0,    0,    0,  135,
    0, 1281,    0,    0,    0, 1279,19317, 8985,18934,    0,
    0,  518,    0,    0,    0,18966,    0,    0,  171,    0,
    0,    0,    0, -262, 9911, 9911,  387, 9911,  438,  433,
 1302,    0,  514, 2067,    0, 1342,    0,    0, 1258,    0,
    0,    0,    0,    0,    0, 1697, 1258, 1284,    0, -123,
  -94,    0, 9911,  -91,    0, 9911,    0, 1243, 1282,    0,
    0,  370,    0, -183, 4361,    0, 1278, 1246, -233,  518,
12017,    0,17679,    0,    0,    0,    0,    0,  370,    0,
 1287, 1247, 1286, 1292,    0, 1291, 1251, 1301,  181, 1298,
 1290,    0,    0, 1309, 1317, 1344,    0,  963,    0,  857,
    0, 1320, 1311, 1258,   97,    0, 1307,    0,    0, 1323,
    0, 1324, 1322, 1328,    0, 1327,    0,  181,  181,    0,
    0,  181, 1325, 1329,    0,    0,    0,    0,    0,    0,
 1331,  188,    0, 1332,  181, 1448, 1333,  181,    0,  691,
    0,10368, 1294, 1334, 1327,    0, 1336, 1341,  199, 1345,
    0,    0,  181,17405, 1296, 1343, 1331,    0,    0,19841,
    0,  364,  364,    0, 1303, 1347, 1332,    0, 1346,    0,
17679, 1308, 1352, 1333,    0, 1365,  181,    0,  144,    0,
 1359,    0,    0,    0,    0,    0,19841,    0,  199,  199,
    0, 1369,    0,   97,    0,    0,  102, 1374,19841,    0,
19841,    0,    0,10368, 1362,    0,    0,    0, 1376, 1323,
    0,    0,    0, 1378,    0,  257,    0,    0,    0, 1264,
  872, 1380,    0,    0,  495,    0,    0,    0,    0,    0,
 1442, 1489,    0,    0,    0,    0,    0,    0, 1387, 1388,
10368,    0,    0,    0,    0,  199,    0,    0,  701,  701,
    0, 1264,    0,    0,    0, -181, -181, 1379, 1394,    0,
    0,    0,    0,    0,    0,16994,16994,    0,    0,    0,
    0,    0,    0,    0,    0, 1391, 1392,17405,    0,    0,
    0,    0, 1389,    0,
  };
  protected static readonly short [] yyRindex = {          355,
    0,    0, 9143,  355,    0,    0,    0, 1767,    0,    0,
 3887, 1497,    0,    0,    0,    0,    0, 3887,    0,    0,
   44,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1768,    0,    0, 1768,    0,    0, 1768,    0,    0,
 1767, 3958, 2288,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1402,    0,    0,    0,    0,    0,    0,    0,
    0,10835,    0, 1395,    0,    0,    0, 1395,    0,    0,
    0,    0,    0,    0, 3555,    0,    0,    0,    0,    0,
    0,    0,    0,  307,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 5803,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 6517, 5897, 6113,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 6622, 6799, 4451, 7283, 1541, 7766, 1784,
 7973, 8111, 8249, 8387,  946,    0,    0,    0,    0,    0,
    0,   44,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 6694,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 4001,    0,  618,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1768,    0,    0,
  228,    0,    0,    0,    0,    0,    0, 4064,  459, 4107,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 4683,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1404,    0,    0,    0,    0,    0,    0, 4843,
 1398,    0,    0,    0,    0,    0,    0, 1398,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 3004,    0,
  416, 3135,    0,    0,    0,    0, 3282,    0, 3135,    0,
    0,    0,    0,    0, 1402,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  219,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1403,
 3407,    0,    0, 1395,    0, 4683,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  251,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2383,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 3513,    0,    0,    0,    0,    0,    0,    0, 4150,
 4193,    0,    0,    0, 2850, 1768, 1768,    0, 9318,   76,
    0, 1768, 1777,    0,    0,  252,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  528,18694,    0,    0,    0,    0, 4683,
    0,    0,    0,    0,    0,    0,    0,    0,19034,    0,
    0,    0,    0,    0,    0,    0, 1406,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  326, 1164,    0,    0,
  344,  912,    0,    0, 1410,  704,    0,    0,    0,    0,
  279,    0,    0, 5323, 1411,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1412,    0,
 2553,    0,    0,  435,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1403,    0,    0,    0,17953,
 4683,    0,    0,  281,    0,    0,    0,    0,    0,    0,
17953,    0,    0,    0,    0,    0,    0,  -41,    0,  550,
    0,    0,    0, 1413,    0,    0,    0,    0, 1398,    0,
    0,    0,    0, 4523,    0, 4683,    0,    0, 4362,    0,
 4683, 5483,    0,    0,    0,    0,    0, -190,    0,    0,
    0,    0,  272,    0,    0,    0,  893,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 6054, 6202, 6307, 6412,    0, 6871,    0,    0,    0,
    0, 6976,    0, 7048,    0,    0, 5982,    0, 7198,    0,
 7352,    0, 7421,    0, 7490,    0, 7559,    0, 7628,    0,
 7697,    0, 7835,    0, 7904,    0, 8042,    0, 8180,    0,
 8318,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 3513,    0,    0,    0,    0,
 2850,    0,    0,    0,    0,    0,10993,    0,    0,  898,
    0,    0, 1366,16297,    0,    0,    0,    0,    0,    0,
    0,  808,  450,    0,    0, 1416,    0,    0,    0,    0,
 1964,    0,    0,    0,    0,    0,    0,11900,    0,    0,
    0,  902,    0,    0,    0,11601,19182,    0,    0,  918,
  941,  945,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1414,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1419,    0,    0,    0,    0,    0, 2074,    0,
    0,    0,  302,    0,   77, 5003,    0,    0,    0,    0,
    0,    0,    0, 1417,    0,    0,    0,    0,    0, 1420,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,17953,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 4683,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1415,    0,    0,    0,    0, 1422,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -127,    0, 1221,    0,    0,    0,    0,    0,
    0,    0,    0,11601,    0,    0,    0,    0,   76,    0,
 9753,    0,    0, 1429,    0,  852,    0,    0,    0,    0,
 1433,    0, 1383, 1384,    0,    0,    0,    0,    0, 1428,
11759,    0,    0,    0,    0,19227,    0,    0,    0,  965,
    0,    0,    0,    0,    0, 2723,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 5163,    0, 5643, 1441,    0,    0,    0,    0, 1438,
    0,    0,    0,  965,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, -165,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1435,    0,    0,    0,    0,    0, 1304,  774,    0,    0,
    0, 1440,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  966,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1439,    0,    0,    0,    0,    0,  977,  978,
    0,    0,    0,    0,    0,    0,    0, 1444,  893,  794,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 5323,    0,    0,    0,    0,    0, 1446,
    0,    0,    0, 1444,    0,    0,    0,17953,    0,    0,
    0,  761,  779,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1416,    0,16142,    0,    0,    0,
    0,    0,19418,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  801,    0,  823,    0,    0,    0,
    0, 1449,    0, 1415,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1452,    0,    0,    0,
    0,   65,    0,    0,17953,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  240, 1252,    0,
    0,    0,    0,    0,19461,19034,    0,  554,  565,  498,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -199,    0,
    0, 1412,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,19605,    0,  141,19034,    0,
  622, 1456,    0, 1456,    0,  565,    0,    0,    0,    0,
    0,    0,  856,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,19648,    0,    0,    0,16571,    0,    0,
 1457,    0,    0,    0, -224,    0,  632,    0,    0,  585,
    0,    0, 1456,    0,    0,    0,    0,  859,    0,    0,
    0,    0,    0,    0, 3816, 1450,  679,    0,    0,  261,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1459,    0,    0,    0,    0,    0,    0,    0,    0,
 3721,    0,    0, 1411,    0,    0,16403,16655,    0,    0,
 1275,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  487,    0,    0,    0,18866,    0,    0,16487,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 5807,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,16739,    0,    0,    0,    0,
    0, 1275,    0,    0,    0,    0,    0,  219,  528,    0,
    0,    0,    0,    0,    0,  528,    0,    0,16403,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 5481,
  535,    0,16781,    0,    0,    0, 5641,    0, 3721,    0,
    0,    0,    0,    0,    0,    0, 3721,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  600,    0,  571,    0,  660,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  669,    0,
  733,    0,    0,    0,    0,    0,    0,    0,19034,  983,
    0,    0,    0,    0,    0,    0,    0, 1451,    0,  612,
    0,    0,    0, 3721,    0,    0,  987,    0,    0,    0,
    0,    0,    0,    0,    0, 1454,    0,19034,19034,    0,
    0,19066,    0,    0,    0,    0,    0,    0,    0,    0,
 1461,15919,    0, 1473,19034,18090, 1474,19034,    0,    0,
    0,    0,    0,    0, 1475,    0,    0,    0,19801,    0,
    0,    0,19034,    0,    0,    0, 1476,    0,    0,  343,
    0,19731,19771,    0,    0,    0, 1477,    0,    0,    0,
    0,    0,    0, 1478,    0,    0,19034,    0,  719,    0,
  988,    0,    0,    0,    0,    0,  883,    0,18508,19691,
    0,    0,    0,    0,    0,    0,    0,    0, 1514,    0,
 1571,    0,    0,    0,  991,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  611,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,19801,    0,    0,19505,19535,
    0,  611,    0,    0,    0,    0,    0,16015,    0,    0,
    0,    0,    0,    0,    0, 1411, 1411,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,
  };
  protected static readonly short [] yyGindex = {            0,
    0, 1805,    0,    0,    0,    2,  -15, -182,  -50,  -47,
    0, 1845, 1853,  822,    0,   -6,    0,    0,    0,    0,
    0,    0,-1031, -787, -222,-1268,    0,    0,    0,    0,
    0, -228,    0,    0,    0,  799,    0,  919,    0,    0,
    0,    0,  637,  640,  -17, -223,    0,    7,    0,    0,
 -486,  436,    0,  489, -685, -628, -619, -610, -583, -578,
 -544, -539,    0,    0,-1158,    0, -913,    0,  439,-1292,
    0,   34,    0,    0,    0,  593,-1232,    0,    0,    0,
   47,  266,    0,    0,    0,  305,-1190,    0, -283, -305,
 -514,    0,    0,    0, -991,  255,    0,    0, -532,    0,
    0,  321,    0,    0,  294,    0,    0,  399,    0, -615,
-1051,    0,    0,    0,    0,    0, -423,  331,-1424,  -10,
    0,    0,    0,  916,  920,  933, 1108, -556,    0,    0,
 -330,  922,  440,    0,-1475,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  235,    0,
    0,    0,    0,    0,    0,    0,    0,  497,    0,    0,
    0, -275,  423,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  511,    0, -537,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  245,    0,    0,  330,    0,    0,
  335,  337,  253,    0,    0,    0,    0,    0,    0,    0,
    0,  581,    0,    0,    0,    0,  -87,    0,   -3, -377,
 -323,  649,    0,  405,    0, -394,    0,  982,    0, 1601,
  727, -297, -277,  -65,  734, 1100,    0,  590,    0,  -40,
 1407, -393,    0,    0, -391,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -383,    0,    0,    0,    0,    0,
 -269,    0, 1664,    0, -361,    0, -278,    0,    0,    0,
  956, -932, -304, -133,  544,    0, 1032,    0, 1293, -592,
   38, -348, 1158,    0,    0,  821, 1865,    0,    0,    0,
    0, 1135,    0,    0,    0, 1594,    0,    0,    0,    0,
    0, 1996,  917,  953, 1530, -568, 1532,    0,    0,    0,
    0,  810,  -36,    0,  807,  834,  949, 1524, 1525, 1527,
 1529, 1523,    0, 1528,    0,    0,    0, 1085, 1375, -564,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 -311,  732,    0, -629,    0,    0,    0,    0,    0, -473,
    0,  653,    0,  548,    0,    0,    0,  767, -563,    1,
 -351,    4,    0, 1808,    0,   42,    0,   54,   99,  136,
  140,  167,  173,  176,  177,  178,  190,    0, -745,    0,
    0,    0,  874,    0,  783,    0,    0,    0,  765, -131,
  855, -984,    0,  892, -491,    0,    0,    0,    0,    0,
    0,  780,    0,  777,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  697,    0,    0,    0,    0,    0,    0,    0,    0,  -39,
    0, 1423,  736,    0,    0,  981,    0,    0,    0,    0,
    0,    0, -168,    0,    0,    0,    0,    0, 1535, 1277,
    0,    0,    0,    0, 1539,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  579,    0,    0,    0,    0,    0,
    0,    0,    0,  703,    0,    0,    0,    0,    0,    0,
   19, 1051,    0,    0,    0, 1059,
  };
  protected static readonly short [] yyTable = {           110,
  548,  239,  193,  597,  240,   18,  112,  823,  622,  551,
  460,  498,  520,  196,  829,  477,  198,  160,  573,  265,
  161,  766,  673,  459,  674,  789,  546,  544,  434,  502,
  866,  398,  675,  532, 1132,  643,  867,  581,  319,   44,
 1278, 1312,  996, 1070,  895,  565, 1135,  634,  258,  612,
 1108,  390,  976,  399,  977,  871,  311,  878,  165,  578,
  318,  540,  623,  233, 1193,  732,  235,   14,  902,  320,
  166,  323, 1502,   20, 1678,  300, 1194,  194,  356,  511,
 1339, 1531,  473, 1419,  198,  198, 1148,  732, 1377, 1396,
  509, 1509,  513, 1348,  333,  340,  255,  266, 1003,  347,
  514, 1005, 1426,  251,  613,  198,  863,  252,  440, 1299,
 1377,  974,  749,  794,  775,  167, 1194,    1,  759,  386,
  558,  599,  767, 1633, 1634, 1107,   16,  431, 1054,  255,
 1176,  993, 1486,  559,  334,  341, 1174, 1396,  750,  432,
  322,  733,  239,  775,  110,  461,    2,  775,  400,  975,
  560,  112,  168,  515,  942,  382,  169,  253,  322,  714,
 1377, 1488,  160,  512, 1494,  161,  901,  864,  200,  902,
  751, 1299,  502,  541, 1267,  542,   43,  256,  600,  931,
 1669, 1149,  732,  170,  732, 1510,   95,  476, 1503,  171,
  461,  441,  172,  173,  174, 1679,  442, 1135,  443,  198,
  198,  444,  445,  165,  446,  447,  175,  509,   95,  509,
 1657, 1054,  256,  862,  395,  166, 1054, 1303, 1054,    2,
  298, 1054, 1054,  902, 1054, 1054,  257,  381,  915,  543,
   15, 1195,  498,  920,  921,  501,  815,  477,  821,  732,
  195,  506,  597,  298,  574,  256,  468, 1054,  880,  466,
  467,    6,  265,  884,  886,  612,  256, 1245,  500,  503,
  167,  257,  265,  572,  509,  198,  575,  474,  978,  597,
   95, 1195,  507,  390,  256,  752,  299, 1607,  519,  882,
  267,  760,  448,  523,  525,  902,    3,    4,    5,    6,
  374,  198, 1011, 1177,  257, 1487, 1019,  168,  555,  299,
 1070,  169, 1054,  198, 1631,  257,  568,  885,  570,  531,
  613,  198,  523,  375,  569,  508, 1641,  198, 1642, 1366,
  376,  395,  345,  257, 1489,  583,  584, 1495,  170,  395,
  516,  395, 1070,  395,  171, 1345,  613,  172,  173,  174,
  577,  518,  797,  835,  620,  198,  198,  580,  903, 1123,
   20,  175, 1539,  929,   37,  596,  977, 1189,  598,  591,
  988,  554,  296,  571, 1638,  438,  619, 1221, 1332,   51,
  297,  198,  913, 1603,  799,  265,  198,  395,  501,  640,
 1285,   51, 1355,  648,  649,  650,  651,  652,  653,  654,
  655,  656,  657,  658,  626,  588,  589, 1652,  631, 1625,
  831,  268,  503,  503,  502, 1087,  932,  930,  298,  239,
   49,  198,  461,  833,  843,  713, 1639, 1482,  439,  743,
  846,  603,  744,  256,  887, 1484, 1374,  415, 1360, 1675,
  858, 1122,  977,  419,  420, 1095,  774,  387,  198,  198,
 1239,  742,  964, 1569,  898, 1070, 1464, 1524,  716,  718,
   55, 1070,  722,  676, 1596,  730, 1346,  298,  198,  798,
  613,  666, 1118,  416,  299,  346,  383,  327,  753, 1141,
 1077,  198,  257,  969,  904, 1097, 1557, 1558, 1540,  989,
 1560, 1101, 1538,  381,  734,  735,  565, 1333,  717,  719,
  747,  800,  914, 1579,   51, 1057, 1586,  298, 1284,  784,
 1286,  899, 1356, 1017, 1434,  229, 1115, 1288,    6,  342,
  985, 1602, 1648,  299,  384,  498,  673,  832,  674, 1626,
 1649,  775,  786,  754,  795,  818,  675,  640,  754,  827,
  834,  844,  754,  532, 1022, 1624, 1315,  847, 1375,  888,
  237,  612,   95,  770,  417,  418,  502,  754,  498,  838,
  237,  503, 1096,  299,  788,  237,  237,  237,  848,   51,
 1144,  850, 1146, 1206, 1181, 1151,  381,  256,  237,  203,
  381,  986,  855,  373,  754,  627,  385,  845, 1057,  859,
  298, 1650,  198, 1057,  398, 1057,  868,  799, 1057, 1057,
  859, 1057, 1057,  754,  596,  381,  613,  598, 1273,  381,
  955,  381,  381,  381,  381,  754,  399,  956,  198,  381,
  501,   37,  983,  204, 1057,   37,  257,  870,  890,  890,
  855,  596,  374,  491,  598,  628,   37,  373,  869,  344,
 1085,   37,  298,  881,  503,   37,  624,  559,   37,  762,
 1254, 1307, 1462,  763,  492,  375,  625,  477,  799,  800,
   37,   37,  376, 1080,  839,   37,   37,  754, 1214,  377,
 1216,   37, 1217,   37,   37,   37,   37,  198,  199, 1057,
  478,   37, 1397,  893,  893,   37,  374,   37, 1024,   51,
  491,  990,  855,  911,  815,  866,  613,   37,  629,   37,
   37, 1463,   37, 1465,  855,  250,   37,  818,  630,  375,
  855,  492,  818,  818,  764,  923,  376,  855,  477,  854,
  800,  391,  547,  377, 1113, 1117,   37,  908,  547,  256,
 1397,  392,  254,  917,   37,  919,  373,  939,  551, 1398,
  754,  478,  198,  237,  927,  754,  199,  199, 1399,  754,
  393,  394, 1466,  673,  270,  674,  673, 1400,  674,  673,
  116,  674,  501,  675,  754,  855,  675,  199,  198,  675,
  395,  374,  265,  463, 1140, 1222,  464,  523,  257,  940,
 1290,  396,  366,  547, 1401,  374,  503, 1398,  366, 1402,
  374,  754,   95,  827,  375,  366, 1399,  952, 1185,  366,
  818,  789,  818,  116,  971, 1400,  951,  116,  375,  752,
  754,  342,  366,  375, 1323,  376,  753,  388,  821,  531,
  376,  953,  377, 1403,  336,  336, 1367,  377, 1404,  327,
   69,   69, 1401,  752,   69,  781, 1001, 1402, 1002,  781,
  753, 1006,  198, 1007,  366,  336,  738, 1450,  954,  462,
 1162,  427,  201, 1012, 1009, 1490,  859,  597,  198,  374,
  752,  199,  199,  388,  781,  371, 1361,  753,  428, 1504,
 1450, 1403, 1656,  781,  198,  738, 1404,  381,  198,  265,
  374,  356,  375,  738,  201, 1412,  375, 1014,  640,  376,
 1089, 1522, 1000,  376,  640,   95,  827, 1153,  743,  425,
  426,  744,  741,  375, 1451,  116, 1046,  597, 1008, 1020,
  376,  387,  503,  773, 1444,  374,  366,  377,  503,  237,
 1246, 1456,  366,  373, 1013, 1034,  387,  199,  388,  366,
  440,  741,  705,  366,  705, 1080,  893,  778,  375,  336,
  336,  327,  773,  463,  387,  376,  366,  753,  373,  818,
  198,  519,  371,  199,  935,  909,  327,  676,  463,  910,
 1281,  928,  778,  777,  381,  199,  936, 1102,  198,  198,
  743,  778, 1104,  199,  327, 1104, 1182,  371,  366,  199,
  744,  371, 1232,  366,  127,  818,  127,  827,  777,  381,
 1121,  127, 1068,  381, 1233,  366,  381,  777,  381,  743,
  597,  366, 1182,  381,  366,  336, 1314,  199,  199,  744,
 1162,  766,  209,  441,  429,  605,  911,  961,  442, 1088,
  443,  605,  606,  444,  445,  371,  446,  447,  606, 1590,
 1475,  336,  198,  199,  607,  430,  116,  204,  199,  818,
  607,  818, 1475,  550,  818, 1133,  371,  421,  422, 1320,
  371,  336,  366,  371,  911,  371, 1161,  347, 1423, 1479,
  371,  423,  424,  347,  753,  304, 1138,  198,   95,  116,
  348, 1479, 1139,  199,  440,  198,  597, 1451,   95,  498,
  503,  477,  542,  497,  237,  336,  336, 1365,  542,  827,
 1414, 1643,  523, 1294,  371,  537,  294, 1171,  116,  538,
  199,  199,  433, 1175, 1501,  294,  265, 1053, 1054,  265,
 1210,  336,  265, 1212, 1168,   45, 1169,  304, 1170,  304,
  199, 1501, 1207,  465,  304, 1166,  117,  859, 1665,  499,
 1240,  769, 1340,  199, 1241,  770, 1341,  818, 1242,  818,
 1533,  818, 1534,  880, 1218,  880,  470,  880, 1686, 1687,
  551,  336,  974, 1447,  472, 1034,  974,  441,  974,  116,
 1447,  869,  442,  869,  443,  869,  345,  444,  445,  117,
  446,  447,  934,  117, 1225,  303,  934,  304,  336,  336,
  934,  184, 1104,  184,  676,  184,  519,  676,  366,  366,
  676,  366,  366,   62,  229,  805,  232,  339,  339,  806,
 1255,  827,  353,  197,  859,  197,  816,  197,  547,  596,
  538,  685,  598,  992, 1259, 1260, 1161,  993,  339, 1266,
 1018, 1328,  237,  519,  770,  239,  519, 1297,  461, 1109,
 1298, 1269,   70,  993,  936, 1270,   70,  938,  936,  521,
  503,  938,  576,  229,  199,  234, 1653, 1654,  458,  818,
  412,  413,  414,  239,  522, 1293,  461,  754,  754,  596,
  116, 1131,  598,  902,  691,  693,  695,  697, 1080,  552,
  199,  117,  519, 1223,  553, 1224,  198,  860, 1091,  860,
 1091,  375,  470,  818, 1218,  446,  871,  388,  871, 1297,
  548,  556, 1298,  446,  685,  446,  548,  557,  172,  685,
  172,  685,  685,  685,  685,  685,  685,  685,  685,  685,
  685,  685,  339,  339,  446,  446, 1376, 1395,  579, 1298,
  744,  179,  587,  179,  685,  180,  685,  180,  685,  199,
  685,  685,  685,  617,  446,  818,  618,  116, 1376,  198,
  728, 1298,  446,  682,  684,  446,  640,  999,   72,  999,
   72,  548,  596,  632,  818,  598,  519,  203,  173,  203,
  173,  982,  198,  984,  116, 1395,  381,  132,  744,  132,
  503,  310,  139,  310,  139,  317,  731,  317,  339,  116,
  116,  687,  689,  699,  701,  685,  748,  375, 1376,  796,
  768, 1298, 1692,  771,  199,  773,  802,  801,  803,  804,
  849,  841,  117,  842,  339,  851,  852,  336,  872,  853,
  854,  873, 1371,  876,  879,  896,  339,  877,  883,  724,
  199, 1455,  897,  198,  339,  198, 1430,  916,  596,  918,
  339,  598,  198,  119,  922,  117,  933,  934,  463,  959,
  944,  198,  198,  943,  198,  947,  965,  966,   43,  967,
 1478,  968,  972,  973,  994,  200,  991,  902,  339,  339,
  995,  997, 1478, 1010,  117, 1016, 1029, 1478, 1033,  198,
 1048, 1050,  198, 1371, 1055, 1513,  119, 1058, 1063, 1455,
  119, 1478, 1064, 1067,  339, 1066, 1048, 1072, 1069,  339,
 1074, 1460, 1461, 1081,  199, 1093, 1094, 1103, 1097, 1112,
  541, 1570,  441, 1478,  744, 1119,   38,  442, 1127,  443,
  199, 1126,  444,  445, 1129,  446,  447, 1050, 1597, 1493,
 1134,  744, 1496, 1137,  339,  117,  199, 1130, 1142, 1143,
  199, 1609, 1611, 1154,  744,  744, 1164,  366, 1172, 1191,
 1044,  116,  854,  116,  827,  366, 1178,  366,  854, 1455,
 1179,  339,  339, 1208, 1188,  854,  519, 1180, 1597, 1597,
 1190,  744,  744, 1201, 1202, 1204,  366,  366, 1209, 1048,
 1215, 1227,  336, 1619, 1048, 1231, 1048, 1234,  119, 1048,
 1048, 1235, 1048, 1048, 1236, 1237,  366,  116,  336, 1247,
  116, 1251, 1258,  725,  366, 1262, 1261,  366, 1270, 1269,
 1050,  835,  199,  854,  336, 1050,  827, 1050, 1279, 1289,
 1050, 1050, 1308, 1050, 1050, 1597, 1320, 1296,  744, 1322,
  199,  199, 1325, 1044, 1327, 1330,  117, 1331, 1044, 1334,
 1044, 1344,  116, 1044, 1044, 1335, 1044, 1044, 1349, 1351,
 1357, 1364, 1358,  827, 1365, 1408, 1410, 1409, 1467, 1415,
 1420, 1416, 1413,  116, 1427, 1417, 1481, 1507, 1671, 1671,
 1048, 1432, 1485, 1499, 1516, 1680, 1680, 1518,  640,  640,
  366, 1498, 1521, 1527, 1508, 1510,  366,  366, 1519, 1489,
 1691,  366, 1523,  366,  199,  366,  366,  366,  366, 1525,
 1529, 1050,  503,  503, 1530,  339, 1450, 1537, 1543,  336,
  366, 1536, 1546,  117, 1550, 1549,  366,  366, 1561,  119,
 1551, 1553, 1562, 1580, 1044, 1565, 1575, 1582, 1594,  199,
 1592,  339, 1591, 1595, 1604, 1601,  366,  199, 1618, 1605,
  117, 1615,  366, 1616,  366,  269, 1620,  366, 1621,  293,
  294,  295,  119,  301,  302,  117,  117, 1623,  315,  316,
 1629, 1636, 1640, 1644,  321,  324, 1645,  326, 1655,  330,
 1647, 1638,  550,   38,  343,  344, 1639,   38, 1663, 1664,
 1683,  119, 1685, 1689, 1690, 1694,    9, 1087,   38,  580,
  339,  966,  540,   38,  967,  707, 1079,   38,  541,  981,
   38,  397,  929,  491,  789,  708,   33,  539,   33,  492,
  933,  863,   38,   38,  643,  336,  663,   38,   38,   34,
  339,  233,  107,   38,  873,   38,   38,   38,   38,   34,
  974,  864,  644,   38,  897,  874,  865,   38,  401,   38,
  898,  866,  672,  777,  366,  343,  777,  799,  754,   38,
  135,   38,   38,  754,   38,  339,  116,  117,   38,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,  313,
  142,  136,  118,  314,  143,  236,   54,   21,   38, 1155,
 1264,  339, 1062, 1265, 1458,   38,   38, 1421, 1313, 1637,
  116, 1606, 1459,  116, 1646, 1593,  116, 1622, 1511,  663,
 1588, 1090, 1086,  962,  663, 1091,  663,  663,  663,  663,
  663,  663,  663,  663,  663,  663,  663,  117, 1092,  117,
 1491, 1682, 1428, 1512, 1425, 1674, 1617, 1612, 1610,  663,
 1352,  663, 1673,  663, 1535,  663,  663,  663,  199,  116,
 1059,  566, 1353,  119,  324,  663,  663,  958,  397,  894,
  663,  663,  116, 1025, 1192,  339,  306,  979,  585,  663,
  663,  663,  663,  117, 1111,  677,  117,  678, 1211, 1213,
  703,  339,  705,  711,  663,  707, 1015,  478,  709,  712,
  856, 1277, 1337,   24, 1433, 1249, 1238,  339,  545,  435,
  663,  339, 1184, 1256, 1173, 1250, 1248,  116, 1203, 1318,
  479,  199,  116,  840, 1124,  726,  116, 1287,  117,  727,
 1431, 1060, 1057,  480, 1324,    0,  336,    0,  482,    0,
  119,    0,  926,  483,  199,  484,  485,  486,  487,  117,
    0,    0,    0,  488,    0,  116,    0,  489,    0,    0,
    0, 1470,    0,    0,    0,    0,    0,  119,    0,  490,
    0,    0,  491,    0,  492,    0,    0,    0,    0,  671,
    0,    0,  119,  119,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  493,  336,
    0,  339,  339,    0,    0,  199,    0,  199,    0,    0,
    0,    0,    0,    0,  199,  116,    0,    0,    0,    0,
    0,    0,  336,  199,  199,    0,  199,    0,    0,  354,
    0,    0,    0,  358,  360,  362,  364,  366,  368,  370,
  372,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  199,    0,    0,  199, 1472,    0,    0,    0,    0,
    0,    0,  671,    0,    0,  339,    0,  671,    0,  671,
  671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
    0,    0,    0,  336,    0,    0,    0,    0,    0,    0,
    0,  116,  671,    0,  671,    0,  671,    0,  671,  671,
  671,  336,  336,    0,  550,    0,    0,    0,  339,  671,
    0,    0,    0,  671,  671,  785,    0,    0,    0,    0,
    0,    0,    0,    0,  671,  671,    0,    0,    0,  336,
    0,    0,  336,    0,    0,    0,    0,  671,    0,    0,
    0,    0,  117,    0,  119,    0,  119,    0,    0,    0,
    0,    0,    0,  671,    0,    0,    0,    0,    0,    0,
   24,    0,  836,    0,   24,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   24,  117,    0,    0,  117,
   24,    0,  117,    0,   24,    0,    0,   24,    0,    0,
  119,    0,    0,  119,    0,    0,    0,    0,    0,   24,
   24,    0,    0,    0,   24,   24,    0,    0,    0,    0,
   24,    0,   24,   24,   24,   24,    0,    0,    0,    0,
   24,    0,    0,    0,   24,  117,   24,   36,    0,    0,
    0,    0,    0,    0,    0,  119,   24,    0,  117,   24,
    0,   24,    0,    0,  354,   24,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  672,    0,    0,    0,
    0,    0,    0,    0,    0,   24,    0,  478,    0,  366,
    0,   21,   24,   24,    0,  366,    0,  582,    0,    0,
    0,    0,    0,  117,    0,    0,    0,  354,  117,    0,
  479,    0,  117,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  480,    0,    0,    0,    0,  482,  339,
    0,  366,    0,  483,    0,  484,  485,  486,  487,    0,
    0,  117,  552,  488,    0,    0,    0,  489,    0,    0,
    0, 1470,    0,    0,    0,    0,    0,    0,    0,  490,
    0,    0,  491,    0,  492,    0,    0,  660,  662,  664,
    0,    0,  582,  582,  582,  582,  582,  582,  582,  582,
  582,  582,  582,  582,  582,  582,  582,  582,  493,    0,
    0,    0,  339,    0,    0, 1471,    0,  366,    0,    0,
    0,  117,  366,    0,    0,  366,    0,  366,  366,    0,
    0,    0,  366,  366,    0,  339,  366,  366,  366,  366,
  366,  366,  366,  366,  366,    0,  366,  366,  366,  366,
  366,  366,  366,  366,  366,  366,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1472,  366,  366,    0,    0,
    0,    0,    0,    0,  366,    0,    0,  366,  998,    0,
    0,    0,    0,  366,    0,    0,    0,    0,    0,  119,
    0,    0,    0,    0,    0,    0,  339,  117,  339,    0,
    0,    0,    0,    0,    0,  339,    0,    0,    0,    0,
    0,    0,    0,    0,  339,  339,  582,  339,    0,    0,
    0,    0,    0,  672,   36,    0,  672,    0,   36,  672,
    0,    0,  968,    0,    0,    0,    0,    0,    0,   36,
    0,    0,  339,    0,   36,  339,    0,    0,   36,    0,
    0,   36,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,   36,    0,    0,    0,   36,   36,
    0,    0,  119,    0,   36,    0,   36,   36,   36,   36,
    0,    0,    0,    0,   36,  119,    0,    0,   36,    0,
   36,    0,  875,    0,    0,    0,    0,    0,    0,    0,
   36,    0,    0,   36,    0,   36,    0,    0,    0,   36,
    0,    0,    0,    0,    0,    0,    0,    0,  552,    0,
    0,    0,    0,  552,  552,    0,    0,    0,    0,   36,
  119,    0,    0,    0,    0,  119,   36,   36,    0,  119,
    0,    0,    0,  906,  907,    0,  552,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  552,
  552,  354,    0,    0,  552,    0,    0,  552,  119,  552,
    0,  552,  552,  552,  552,    0,    0,    0,    0,  552,
    0,    0,    0,  552,    0,    0,    0,  552,    0,    0,
    0,    0,    0,    0,    0,  552,    0,    0,  552,    0,
  552,  552,  891,    0,    0,  552,  552,    0,  552,  552,
  552,  552,  552,  552,  552,  552,  552,  552,  552,    0,
    0,    0,    0,    0,  552,  552,  552,    0,  119,    0,
  552,  552,    0,  552,  552,  552,  552,  552,  552,  552,
    0,  552,  552,    0,  552,  552,  552,  552,  552,  552,
  552,  552,  552,  552,    0,  552,  552,  552,  552,  552,
  552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
  552,  552,  552,  552,  552,  552,  552,    0,    0,  552,
    0,  552,  354,  552,    0,    0,  552,    0,  968,  968,
    0,    0,  552,    0,    0,    0,  968,  968,  968,  968,
  968,    0,  968,  968,  119,  968,  968,  968,  968,  968,
  968,  968,  968,    0,    0,    0,    0,  968,    0,  968,
  968,  968,  968,  968,  968,    0,    0,  968,    0,  366,
    0,  968,  968,    0,  968,  968,  968,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  968,    0,  968,    0,
  968,  968,    0,    0,  968,    0,  968,  968,  968,  968,
  968,  968,  968,  968,  968,  968,  968,  968,    0,  968,
    0,    0,  968,  968,    0,    0,  968,  968,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  968,  968,  968,  968,  968,    0,    0,    0,    0,
  968,  968,    0,    0,  968,    0,    0,    0,    0,  968,
  968,  968,  968,  968,    0,    0,    0,  968,    0,  968,
    0,    0,    0,    0,    0,  968,  968,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  968,  968,  968,  968,    0,  968,    0,    0,  891,  891,
    0,    0,  968,    0,  582,    0,  891,  891,  891,  891,
  891,    0,  891,  891,    0,  891,  891,  891,  891,  891,
  891,  891,    0,  851,    0,    0,    0,  891,    0,  891,
  891,  891,  891,  891,  891,    0,    0,  891,    0,    0,
    0,  891,  891,    0,  891,  891,  891,    0, 1136,    0,
    0,    0,    0,    0,    0,    0,  891,    0,  891,    0,
  891,  891,    0,    0,  891,    0,  891,  891,  891,  891,
  891,  891,  891,  891,  891,  891,  891,  891,    0,  891,
    0,    0,  891,  891,    0,    0,  891,  891,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  891,  891,  891,  891,  891,    0,    0,    0,    0,
  891,  891,    0,    0,  891,    0,    0,    0,    0,  891,
  891,  891,  891,  891,    0,  366,    0,  891,    0,  891,
  366,  366,    0,    0,    0,  891,  891,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  366,  356,    0,    0,    0,    0,    0,
  891,  891,  891,  891,    0,  891,  366,  366,    0,    0,
    0,  366,  891,    0,  366,    0,  366,    0,  366,  366,
  366,  366,    0,    0,    0,    0,  366,    0,    0,    0,
  366,    0,    0,    0,  366,    0,    0,    0,    0,    0,
    0,    0,  366,    0,    0,  366,    0,  366,  366,    0,
    0,    0,  366,  366,    0,  366,  366,  366,  366,  366,
  366,  366,  366,  366,  366,  366,  366,    0,    0,    0,
    0,  366,  366,    0,    0,    0,    0,  366,  366,  366,
  366,  366,  366,  366,  366,  366,  366,    0,  366,  366,
    0,    0,  366,  366,  366,  366,  366,    0,    0,  366,
  366,    0,    0,    0,  366,  366,  366,  366,  366,  366,
  366,  366,    0,    0,    0,    0,    0,    0,    0,  851,
    0,    0,    0,  366,  851,  851,  366,    0,  366,    0,
  366,    0,    0,  366,    0,    0,    0,    0,    0,  366,
    0,  396,    0,    0,    0,    0,    0,  851,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  851,  851,    0,    0,    0,  851,    0,    0,  851,    0,
  851,    0,  851,  851,  851,  851,    0,    0,    0,    0,
  851,    0,    0,    0,  851,    0,    0,    0,  851,    0,
    0,    0,    0,    0,    0,    0,  851,    0,    0,  851,
    0,  851,  851,    0,    0,    0,  851,  851,    0,  851,
  851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
    0,    0,    0,    0,    0,  851,  851,    0,    0,    0,
    0,  851,  851,  851,  851,  851,  851,    0,  851,  851,
  851,    0,  851,  851,    0,    0,  851,  851,  851,  851,
  356,    0,    0,  851,  851,  356,  356,    0,  851,  851,
  851,  851,  851,  851,  851,  851,  366,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  851,  356,    0,
  851,    0,  851,    0,  851,    0,    0,  851,    0,    0,
    0,  356,  356,  851,    0,    0,  356,    0,    0,  356,
    0,  356,    0,  356,  356,  356,  356,    0,    0,    0,
    0,  356,    0,    0,    0,  356,    0,    0,    0,  356,
    0,    0,    0,    0,    0,    0,    0,  356,    0,    0,
  356,    0,  356,  356,    0,    0,    0,  356,  356,    0,
  356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
  356,    0,    0,    0,    0,    0,  356,  356,    0,    0,
    0,    0,  356,  356,  356,  356,  356,  356,    0,  356,
  356,  356,    0,  356,  356,    0,    0,  356,  356,  356,
  356,    0,    0,    0,  356,  356,    0,    0,    0,  356,
  356,  356,  356,  356,  356,  356,  356,  396,    0,    0,
    0,    0,  396,  396,    0,    0,    0,    0,  356,    0,
    0,  356,    0,  356,  401,  356,    0,    0,  356,    0,
    0,    0,    0,    0,  356,  396,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  396,  396,
    0,    0,    0,  396,    0,    0,  396,    0,  396,    0,
  396,  396,  396,  396,    0,    0,    0,    0,  396,    0,
    0,    0,  396,    0,    0,    0,  396,    0,    0,    0,
    0,    0,    0,    0,  396,    0,    0,  396,    0,  396,
  396,    0,    0,    0,  396,  396,    0,  396,  396,  396,
  396,  396,  396,  396,  396,  396,  396,  396,    0,    0,
    0,    0,    0,  396,  396,    0,    0,    0,    0,  396,
  396,    0,  396,  396,  396,    0,  396,  396,  396,    0,
  396,  396,  366,    0,  396,  396,  396,  396,  366,    0,
    0,  396,  396,    0,    0,    0,  396,  396,  396,  396,
  396,  396,  396,  396,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  396,    0,    0,  396,    0,
  396,    0,    0,    0,  366,    0,    0,    0,    0,    0,
    0,  396,    0,    0,    0,    0,    0,    0,    0,    0,
   31,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  366,    0,    0,    0,  366,
  366,    0,  366,  366,  366,  366,  366,  366,  366,  366,
  366,  366,  366,  366,    0,    0,    0,    0, 1060,  366,
    0,    0,    0,    0,  366,  366,  366,  366,  366,  366,
  366,  366,  366,  366,    0,  366,  366,    0,    0,  366,
  366,  366,  366,  366,    0,    0,  366,  366,    0,    0,
    0,  366,  366,  366,  366,  366,  366,  366,  366,    0,
  401,    0,    0,    0,    0,   25,  401,    0,    0,    0,
  366,    0,    0,  366,    0,  366,    0,  366,    0,    0,
  366,    0,    0,    0,    0,    0,  366,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1060,  401,    0,    0,    0, 1060,    0, 1060, 1060,
 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1060,    0, 1060,    0, 1060,   35, 1060, 1060, 1060,
    0,    0,    0,  401,    0,    0,    0,  401,  401,    0,
  401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
  401,    0,    0,    0,    0,    0,    0,  401,    0,    0,
    0,    0,  401,  401,  401,  401,  401,  401,    0,  401,
  401,  401,    0,  401,  401,    0,    0,  401,  401,  401,
  401,    0, 1060,    0,  401,  401,    0,    0,    0,  401,
  401,  401,  401,  401,  401,  401,  401,    5,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  401,    0,
    0,  401,    0,  401,    0,  401,   31,   31,  401,    0,
    0,   31,    0,    0,  401,   31,    0,   31,    0,    0,
   31,    0,   31,   31,    0,   31,    0,   31,    0,   31,
 1068,   31,   31,   31,   31,    0,    0,   31,   31,    0,
    0,    0,    0,   31,    0,   31,   31,   31,    0,    0,
   31,   31,   31,    0,   31,    0,    0,   31,    0,   31,
   31,   31,   31,    0,    0,    0,   31,   31,   31,    0,
    0,   31,   31,   31,    0,    0,    0,    0,    0,    0,
   31,   31,    0,   31,   31,    0,   31,   31,   31,    0,
    0,    0,   31,   51,    0,    0,    0,    0,    0,    0,
    0,    0,   25,    0,    0,    0,   25,    0,    0,    0,
    0,    0,   31,    0,    0,    0,    0,   25,   31,   31,
   31,    0,   25,    0,    0,    0,   25,    0,   31,   25,
    0,    0,    0,    0,    0,    0,    7,    0,    0,    0,
    0,   25,   25,    0,    0,    0,   25,   25,    0,    0,
    0,    0,   25,    0,   25,   25,   25,   25,    0,    0,
    0,    0,   25,    0,    0,    0,   25,    0,   25,   31,
    0,    0,    0,   35,    0,    0,    0,   35,   25, 1069,
    0,   25,    0,   25,    0,    0,    0,   25,   35,    0,
    0,    0,    0,   35,    0,    0,    0,   35,    0,    0,
   35,    0,    0,    0,    0,    0,    0,   25,    0,    0,
    0,    0,   35,   35,   25,   25,    0,   35,   35,    0,
    0,    0,   52,   35,    0,   35,   35,   35,   35,    0,
    0,    0,    0,   35,    0,    0,    0,   35,    0,   35,
    0,    0,    0,    0,    5,    0,    0,    0,   51,   35,
    0,    0,   35,    0,   35,    0,    0,    0,   35,   51,
    0,    0,    0,    0,   51,    0,    0,    0,   51,    0,
    0,   51,    0,    0,    0,    0,    0,    0,   35,    0,
    0,    0,    0,   51,   51,    0,   35, 1068,   51,   51,
    0,   51,    0,    0,   51,    0,   51,   51,   51,   51,
    0,    0,   51,    0,   51,    0,    0,   51,   51,    0,
   51,   51,    0,    0,   51,    0,    0,    0,    0,    0,
   51,    0,    0,   51,    0,   51,   51,   51,    0,   51,
    0,   51,   51,    0,    0,    0,    0,   51,    0,   51,
   51,   51,   51,    0,    0,    0,    0,   51,    0,   51,
   51,   51,    0,   51,   51,    0,    0,    0,    0,    0,
    0,    0,    0,   51,    0,   51,   51,    0,   51,    0,
   51,    0,   51,    0,   51,    0,    0,   51,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   51,
   51,    0,   51,    7,   51,   51,    0,   52,    0,    0,
   51,    0,   51,   51,   51,   51,    0,    0,   52,    0,
   51,    0,    0,   52,   51,    0,   51,   52,    0,    0,
   52,    0,    0,    0,    0,    0,   51,    0,    0,   51,
    0,   51,   52,   52,    0,   51, 1069,   52,   52,    0,
   51,    0,    0,   52,    0,   52,   52,   52,   52,    0,
    0,   51,    0,   52,    0,   51,   51,   52,    0,   52,
   51,    0,    0,   51,    0,    0,    0,    0,    0,   52,
    0,    0,   52,    0,   52,   51,   51,    0,   52,   52,
   51,   51,    0,   52,    0,    0,   51,    0,   51,   51,
   51,   51,    0,    0,   52,    0,   51,    0,   52,   52,
   51,    0,   51,   52,    0,    0,   52,    0,    0,    0,
    0,    0,   51,    0,    0,   51,    0,   51,   52,   52,
    0,   51,    0,   52,   52,    0,    0,    0,    0,   52,
    0,   52,   52,   52,   52,    0,    0,    0,    0,   52,
    0,   51,    0,   52,    0,   52,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   52,    0,   56,   52,    0,
   52,    0,    0,    0,   52,   57,   24,   58,   25,    0,
    0,   26,   59,    0,   60,   61,   27,   62,   63,   64,
   28,    0,    0,    0,   52,    0,   65,    0,   66,   30,
   67,   68,   69,   70,    0,    0,   32,    0,    0,    0,
   71,   33,    0,   72,   73,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   74,    0,   36,    0,   37,
   75,    0,    0,   38,    0,   76,   77,   78,   79,   80,
   81,   39,   40,   82,   83,   41,   84,    0,   85,    0,
    0,   86,   87,    0,    0,   88,   89,  854,    0,    0,
    0,  478,    0,  854,    0,    0,    0,    0,    0,    0,
   90,   91,   92,   93,   94,    0,    0,    0,    0,   95,
    0,    0,    0,   96,  479,    0,    0,    0,   97,   98,
   99,  100,  101,    0,    0,    0,  102,  480,  103,  854,
    0,    0,  482,    0,  104,  105,    0,  483,    0,  484,
  485,  486,  487,    0,    0,    0,    0,  488,    0,    0,
    0,  489,    0,    0,    0,    0,    0,    0,    0,  106,
  107,  108,  109,  490,    0,    0,  491,    0,  492,    0,
  854,  200,    0,    0,    0,  854,  649,  854,  854,  854,
  854,  854,  854,  854,  854,  854,  854,  854,  854,    0,
    0,    0,  493,    0,  854,  854,    0,    0,    0,  854,
  854,  854,  854,  854,  854,  854,  854,  854,  854,    0,
  854,  854,    0,  854,  854,  854,  854,  854,  854,  854,
  854,  854,  854,    0,  854,  854,  854,  854,  854,  854,
  854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
  854,  854,  854,  854,  854,  854,  854,    0,  854, 1489,
  854,    0,  854,  854,  854,  854,    0,    0,    0,  649,
    0,  854,    0,    0,  649,    0,  649,  649,  649,  649,
  649,  649,  649,  649,  649,  649,  649,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  649,
  854,  649,    0,  649,    0,  649,  649,  649,    0,    0,
    0,    0,    0,  649,  649,  649,  649,    0,    0,    0,
  649,  649,    0,    0,    0,  649,  649,  649,  649,  649,
  649,  649,  649,    0,    0,    0,    0,    0,    0,    0,
    0,  854,    0,    0,  649,    0,  854,    0,  854,  854,
  854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
  649,    0,    0,    0,    0,  854,  854,    0,    0,    0,
  854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
    0,  854,  854,    0,  854,  854,  854,  854,  854,  854,
  854,  854,  854,  854,    0,  854,  854,  854,  854,  854,
  854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
  854,  854,  854,  854,  854,  854,  854,  854,  366,  563,
    0,  854,    0,  854,  366,    0,  854,    0,   24,    0,
   25,    0,  854,   26,    0,    0,    0,    0,   27,    0,
    0,    0,   28,    0,    0,    0,    0,    0,    0,    0,
    0,   30,    0,    0,    0,    0,    0,    0,   32,    0,
  366,    0,    0,   33,    0,    0,    0,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
    0,   37,    0,    0,    0,   38,    0,    0,    0,    0,
    0,    0,    0,   39,   40,    0,    0,   41,    0,    0,
  564,  366,    0,    0,    0,    0,  366,    0,  366,  366,
  366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
    0,    0,    0,    0,    0,  366,  366,    0,    0,    0,
  366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
    0,  366,  366,    0,  366,  366,  366,  366,  366,  366,
  366,  366,  366,  366,    0,  366,  366,  366,  366,  366,
  366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
  366,  366,  366,  366,  366,  366,  366,    0,  366,  602,
    0,  366,  381,  366,  366,    0,  366,    0,   24,    0,
   25,    0,  366,   26,    0,    0,    0,    0,   27,    0,
    0,    0,   28,    0,    0,    0,    0,    0,    0,    0,
    0,   30,    0,    0,    0,    0,    0,    0,   32,    0,
  366,    0,    0,   33,    0,    0,    0,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
    0,   37,    0,    0,    0,   38,    0,    0,    0,    0,
    0,    0,    0,   39,   40,    0,    0,   41,    0,    0,
   85,  366,    0,    0,    0,    0,  366,    0,  366,  366,
  366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
    0,    0,    0,    0,    0,  366,  366,    0,    0,    0,
    0,  366,  366,  366,  366,  366,  366,  366,  366,  366,
    0,  366,  366,    0,  366,  366,  366,  366,  366,  366,
  366,  366,  366,  366,    0,  366,  366,  366,  366,  366,
  366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
  366,  366,  366,  366,  366,  366,  366,    0,  554,  665,
    0,  366,  381,  366,  554,    0,  366,    0,   24,    0,
   25,    0,  366,   26,    0,    0,    0,    0,   27,    0,
    0,    0,   28,    0,    0,    0,    0,    0,    0,    0,
    0,   30,    0,    0,    0,    0,    0,    0,   32,    0,
  554,    0,    0,   33,    0,    0,    0,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
    0,   37,    0,    0,    0,   38,    0,    0,    0,    0,
    0,    0,    0,   39,   40,    0,    0,   41,    0,    0,
   85,  554,    0,    0,    0,    0,  554,    0,  554,  554,
  554,  554,  554,  554,  554,  554,  554,  554,  554,    0,
    0,    0,    0,    0,    0,    0,  554,    0,    0,    0,
  554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
    0,  554,  554,    0,  554,  554,  554,  554,  554,  554,
  554,  554,  554,  554,    0,  554,  554,  554,  554,  554,
  554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
  554,  554,  554,  554,  554,  554,  554,  999,  550,    0,
    0,    0,  381,  554,  550,    0,   24,    0,   25,    0,
    0,   26,  554,    0,    0,    0,   27,    0,    0,    0,
   28,    0,    0,    0,    0,    0,    0,    0,    0,   30,
    0,    0,    0,    0,    0,    0,   32,    0,    0,    0,
  550,   33,    0,    0,    0,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
    0,    0,    0,   38,    0,    0,    0,    0,    0,    0,
    0,   39,   40,    0,    0,   41,    0,    0,   85,    0,
    0,  550,    0,    0,    0,    0,  550,    0,  550,  550,
  550,  550,  550,  550,  550,  550,  550,  550,  550,    0,
    0,    0,    0,    0,    0,    0,  550,    0,    0,    0,
  550,  550,    0,  550,  550,  550,  550,  550,  550,  550,
    0,  550,  550,    0,  550,  550,  550,  550,  550,  550,
  550,  550,  550,  550,    0,  550,  550,  550,  550,  550,
  550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
  550,  550,  550,  550,  550,  550,  550,    0,  558, 1165,
  381,    0,    0,  550,  558,    0,  550,    0,   24,    0,
   25,    0,  550,   26,    0,    0,    0,    0,   27,    0,
    0,    0,   28,    0,    0,    0,    0,    0,    0,    0,
    0,   30,    0,    0,    0,    0,    0,    0,   32,    0,
  558,    0,    0,   33,    0,    0,    0,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
    0,   37,    0,    0,    0,   38,    0,    0,    0,    0,
    0,    0,    0,   39,   40,    0,    0,   41,    0,    0,
   85,  558,    0,    0,    0,    0,  558,    0,  558,  558,
  558,  558,  558,  558,  558,  558,  558,  558,  558,    0,
    0,    0,    0,    0,    0,    0,  558,    0,    0,    0,
    0,  558,    0,  558,  558,  558,  558,  558,  558,  558,
    0,  558,  558,    0,  558,  558,  558,  558,  558,  558,
  558,  558,  558,  558,    0,  558,  558,  558,  558,  558,
  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
  558,  558,  558,  558,  558,  558,  558,    0,  366,    0,
    0,  388,  381,  558,  366,    0,  558,    0,    0,    0,
    0,    0,  558,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  388,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  388,    0,    0,
  366,    0,  388,    0,    0,  255,    0,  388,    0,  388,
  388,  388,  388,    0,    0,    0,    0,  388,    0,    0,
    0,  388,    0,    0,    0,  388,    0,    0,    0,    0,
    0,    0,    0,  388,    0,    0,  388,    0,  388,    0,
    0,  366,    0,    0,    0,    0,  366,    0,  366,  366,
  366,  366,  366,  366,  366,  366,  366,  366,  366,    0,
    0,    0,  388,    0,    0,    0,  366,    0,    0,  388,
    0,  366,    0,  366,  366,  366,  366,  366,  366,  366,
    0,  366,  366,    0,  366,  366,  366,  366,  366,  366,
  366,  366,  366,  366,    0,  366,  366,  366,  366,  366,
  366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
  366,  366,  366,  366,  366,  366,  366,    0,  473,  388,
    0,  387,    0,  366,  473,    0,  366,    0,    0,    0,
    0,    0,  366,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  387,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  387,    0,    0,
  473,    0,  387,    0,    0,  254,    0,  387,    0,  387,
  387,  387,  387,    0,    0,    0,    0,  387,    0,    0,
    0,  387,    0,    0,    0,  387,    0,    0,    0,    0,
    0,    0,    0,  387,    0,    0,  387,    0,  387,    0,
    0,  473,    0,    0,    0,    0,  473,    0,  473,  473,
  473,  473,  473,  473,  473,  473,  473,  473,  473,    0,
    0,    0,  387,    0,    0,    0,  473,    0,    0,  387,
    0,  473,    0,  473,  473,  473,  473,  473,  473,  473,
    0,  473,  473,    0,  473,  473,  473,  473,  473,  473,
  473,  473,  473,  473,    0,  473,  473,  473,  473,  473,
  473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
  473,  473,  473,  473,  473,  473,  473,    0,  366,  387,
    0,    0,    0,  473,  366,    0,  473,    0,  854,    0,
    0,  754,  473,  754,    0,    0,  754,    0,  754,  754,
    0,  754,    0,  754,    0,  754,    0,  754,  754,  754,
    0,    0,    0,  754,  754,    0,    0,    0,    0,  754,
  366,  754,  754,    0,    0,    0,  754,    0,    0,    0,
  754,    0,    0,    0,    0,    0,  854,    0,    0,    0,
    0,    0,  754,    0,  754,    0,    0,    0,  754,  754,
    0,    0,    0,    0,    0,    0,  754,  754,    0,    0,
  754,    0,    0,  754,    0,    0,    0,    0,  754,    0,
    0,    0,  585,    0,    0,    0,    0,    0,  585,  366,
    0,    0,    0,    0,    0,  366,  366,    0,    0,    0,
    0,  366,  366,  366,  366,  366,  366,  366,  854,  366,
    0,  366,  366,    0,  366,  366,  366,  366,  366,  366,
  366,  366,  366,  366,  585,  366,  366,  366,  366,  366,
  366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
  366,  366,  366,  366,  366,  366,  366,    0,    0,    0,
    0,  366,    0,  366,    0,  754,  366,    0,    0,    0,
    0,    0,  366,    0,    0,  585,    0,  650,    0,    0,
  585,    0,  585,  585,  585,  585,  585,  585,  585,  585,
  585,  585,  585,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  585,    0,  585,    0,  585,
    0,  585,  585,  585,    0,  585,  585,    0,  585,  585,
  585,  585,  585,  585,  585,  585,  585,  585,    0,    0,
    0,  585,  585,  585,  585,  585,  585,  585,  585,  585,
  585,  585,  585,  585,  585,  585,  585,  585,  585,  356,
  585,    0,    0,    0,    0,  356,    0,    0,    0,    0,
  650,    0,    0,    0,    0,  650,  585,  650,  650,  650,
  650,  650,  650,  650,  650,  650,  650,  650,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  650,  356,  650,    0,  650,    0,  650,  650,  650,    0,
    0,    0,    0,    0,  650,  650,  650,  650,  424,    0,
    0,  650,  650,    0,  424,    0,  650,  650,  650,  650,
  650,  650,  650,  650,    0,    0,    0,    0,    0,    0,
    0,    0,  356,    0,    0,  650,    0,  356,    0,  356,
  356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
  424,  650,    0,    0,    0,    0,  356,  424,    0,    0,
    0,    0,  356,  356,  356,    0,  356,  424,  356,  356,
  356,    0,  356,  356,    0,    0,  356,  356,  356,  356,
    0,    0,    0,  356,  356,    0,  424,  424,  356,  356,
  356,  356,  356,  356,  356,  356,    0,  627,    0,    0,
    0,    0,    0,  627,    0,    0,  424,  356,    0,    0,
    0,    0,  356,    0,  424,  356,  424,  424,    0,    0,
    0,  424,  356,  356,  424,  424,  424,  424,    0,  424,
    0,  424,  424,    0,  424,  424,  424,  424,  424,  627,
  424,  424,  424,  424,    0,  424,  424,  424,  424,  424,
  424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
  424,  424,  424,  424,  424,  424,  424,    0,    0,    0,
    0,  356,    0,  424,    0,    0,  424,    0,    0,    0,
  627,    0,  424,    0,    0,  627,    0,  627,  627,  627,
  627,  627,  627,  627,  627,  627,  627,  627,    0,    0,
    0,    0,  631,    0,    0,  425,    0,    0,  631,    0,
  627,    0,  627,  425,  627,  425,  627,  627,  627,    0,
  627,  627,    0,    0,  627,  627,  627,  627,    0,    0,
    0,  627,  627,    0,  425,  425,  627,  627,  627,  627,
  627,  627,  627,  627,  631,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  425,  627,    0,    0,    0,    0,
    0,    0,  425,    0,    0,  425,    0,    0,    0,    0,
    0,  627,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  631,    0,    0,    0,    0,
  631,    0,  631,  631,  631,  631,  631,  631,  631,  631,
  631,  631,  631,    0,    0,    0,    0,  630,    0,    0,
  428,    0,    0,  630,    0,  631,    0,  631,  428,  631,
  428,  631,  631,  631,    0,  631,  631,    0,    0,  631,
  631,  631,  631,    0,    0,    0,  631,  631,    0,  428,
  428,  631,  631,  631,  631,  631,  631,  631,  631,  630,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  428,
  631,    0,    0,    0,    0,    0,    0,  428,    0,    0,
  428,    0,    0,    0,    0,    0,  631,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  630,    0,    0,    0,    0,  630,    0,  630,  630,  630,
  630,  630,  630,  630,  630,  630,  630,  630,    0,    0,
    0,    0,  356,    0,    0,  438,    0,    0,  356,    0,
  630,    0,  630,  438,  630,  438,  630,  630,  630,    0,
  630,  630,    0,    0,  630,  630,  630,  630,    0,    0,
    0,  630,  630,    0,  438,  438,  630,  630,  630,  630,
  630,  630,  630,  630,  356,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  438,  630,    0,    0,    0,    0,
    0,    0,  438,    0,    0,  438,    0,    0,    0,    0,
    0,  630,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  356,    0,    0,    0,    0,
  356,    0,  356,  356,  356,  356,  356,  356,  356,  356,
  356,  356,  356,    0,    0,    0,    0,  607,    0,  356,
    0,    0,    0,  607,    0,  356,  356,  356,    0,  356,
    0,  356,  356,  356,    0,  356,  356,    0,    0,  356,
  356,  356,  356,    0,    0,    0,  356,  356,    0,    0,
    0,  356,  356,  356,  356,  356,  356,  356,  356,  607,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  356,    0,    0,    0,    0,  356,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  356,    0,    0,  845,
    0,    0,    0,    0,    0,  845,    0,    0,    0,    0,
  607,    0,    0,    0,    0,  607,    0,  607,  607,  607,
  607,  607,  607,  607,  607,  607,  607,  607,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  607,  845,  607,    0,  607,    0,  607,  607,  607,    0,
  607,  607,    0,    0,  607,  607,  607,  607,  607,  607,
  607,  607,  607,    0,    0,    0,  607,  607,  607,  607,
  607,  607,  607,  607,    0,    0,    0,    0,    0,    0,
    0,    0,  845,    0,    0,  607,    0,  845,    0,  845,
  845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
    0,  607,    0,    0,  614,    0,  845,    0,    0,    0,
  614,    0,  845,    0,  845,    0,  845,    0,  845,  845,
  845,    0,  845,  845,    0,    0,  845,  845,  845,  845,
    0,    0,    0,  845,  845,    0,    0,    0,  845,  845,
  845,  845,  845,  845,  845,  845,  614,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  845,    0,    0,
    0,    0,  845,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  845,    0,    0,  974,    0,    0,    0,
    0,    0,  974,    0,    0,    0,    0,  614,    0,    0,
    0,    0,  614,    0,  614,  614,  614,  614,  614,  614,
  614,  614,  614,  614,  614,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  614,  974,  614,
    0,  614,    0,  614,  614,  614,    0,  614,  614,    0,
    0,  614,  614,  614,  614,    0,    0,    0,  614,  614,
    0,    0,    0,  614,  614,  614,  614,  614,  614,  614,
  614,    0,    0,    0,    0,    0,    0,    0,    0,  974,
    0,    0,  614,    0,  974,    0,  974,  974,  974,  974,
  974,  974,  974,  974,  974,  974,  974,    0,  614,    0,
    0,  615,    0,    0,    0,    0,    0,  615,    0,  974,
    0,  974,    0,  974,    0,  974,  974,  974,    0,  974,
  974,    0,    0,  974,  974,  974,  974,    0,    0,    0,
  974,  974,    0,    0,    0,  974,  974,  974,  974,  974,
  974,  974,  974,  615,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  974,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  974,    0,    0,  616,    0,    0,    0,    0,    0,  616,
    0,    0,    0,    0,  615,    0,    0,    0,    0,  615,
    0,  615,  615,  615,  615,  615,  615,  615,  615,  615,
  615,  615,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  615,  616,  615,    0,  615,    0,
  615,  615,  615,    0,  615,  615,    0,    0,  615,  615,
  615,  615,    0,    0,    0,  615,  615,    0,    0,    0,
  615,  615,  615,  615,  615,  615,  615,  615,    0,    0,
    0,    0,    0,    0,    0,    0,  616,    0,    0,  615,
    0,  616,    0,  616,  616,  616,  616,  616,  616,  616,
  616,  616,  616,  616,    0,  615,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  616,    0,  616,    0,
  616,    0,  616,  616,  616,    0,  616,  616,    0,    0,
  616,  616,  616,  616,    0,    0,    0,  616,  616,    0,
    0,    0,  616,  616,  616,  616,  616,  616,  616,  616,
    0,  526,    0,  651,    0,    0,    0,    0,    0,   57,
   24,  616,   25,    0,    0,   26,  260,    0,    0,    0,
   27,   62,   63,    0,   28,    0,    0,  616,    0,    0,
   65,    0,    0,   30,    0,    0,    0,    0,    0,    0,
   32,    0,    0,    0,    0,   33,    0,   72,   73,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   36,    0,   37,   75,    0,    0,   38,    0,    0,
   77,    0,   79,    0,   81,   39,   40,  261,    0,   41,
    0,    0,    0,    0,    0,    0,  651,    0,  654,    0,
    0,  651,    0,  651,  651,  651,  651,  651,  651,  651,
  651,  651,  651,  651,   90,   91,   92,  262,  527,    0,
    0,    0,    0,    0,    0,    0,  651,   96,  651,    0,
  651,    0,  651,  651,  651,    0,    0,    0,    0,    0,
  651,  651,  651,  651,    0,    0,    0,  651,  651,    0,
    0,    0,  651,  651,  651,  651,  651,  651,  651,  651,
    0,    0,    0,    0,    0,    0,    0,  655,    0,    0,
    0,  651,    0,  106,  528,    0,    0,    0,    0,    0,
    0,  654,    0,    0,  529,  530,  654,  651,  654,  654,
  654,  654,  654,  654,  654,  654,  654,  654,  654,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  654,    0,  654,    0,  654,    0,  654,  654,  654,
    0,    0,    0,    0,    0,  654,  654,  654,  654,    0,
    0,    0,  654,  654,    0,    0,  656,    0,    0,  654,
  654,  654,  654,  654,  654,    0,    0,    0,    0,    0,
  655,    0,    0,    0,    0,  655,  654,  655,  655,  655,
  655,  655,  655,  655,  655,  655,  655,  655,    0,    0,
    0,    0,  654,    0,    0,    0,    0,    0,    0,    0,
  655,    0,  655,    0,  655,    0,  655,  655,  655,    0,
    0,    0,    0,    0,  655,  655,  655,  655,    0,    0,
    0,  655,  655,    0,    0,  657,    0,    0,  655,  655,
  655,  655,  655,  655,    0,    0,    0,    0,    0,  656,
    0,    0,    0,    0,  656,  655,  656,  656,  656,  656,
  656,  656,  656,  656,  656,  656,  656,    0,    0,    0,
    0,  655,    0,    0,    0,    0,    0,    0,    0,  656,
    0,  656,    0,  656,    0,  656,  656,  656,    0,    0,
    0,    0,    0,  656,  656,  656,  656,    0,    0,    0,
  656,  656,    0,    0,  658,    0,    0,  656,  656,  656,
  656,  656,  656,    0,    0,    0,    0,    0,  657,    0,
    0,    0,    0,  657,  656,  657,  657,  657,  657,  657,
  657,  657,  657,  657,  657,  657,    0,    0,    0,    0,
  656,    0,    0,    0,    0,    0,    0,    0,  657,    0,
  657,    0,  657,    0,  657,  657,  657,    0,    0,    0,
    0,    0,  657,  657,  657,  657,    0,    0,    0,  657,
  657,    0,    0,  664,    0,    0,  657,  657,  657,  657,
  657,  657,    0,    0,    0,    0,    0,  658,    0,    0,
    0,    0,  658,  657,  658,  658,  658,  658,  658,  658,
  658,  658,  658,  658,  658,    0,    0,    0,    0,  657,
    0,    0,    0,    0,    0,    0,    0,  658,    0,  658,
    0,  658,    0,  658,  658,  658,    0,    0,    0,    0,
    0,  658,  658,  658,  658,    0,    0,    0,  658,  658,
    0,    0,  665,    0,    0,  658,  658,  658,  658,  658,
  658,    0,    0,    0,    0,    0,  664,    0,    0,    0,
    0,  664,  658,  664,  664,  664,  664,  664,  664,  664,
  664,  664,  664,  664,    0,    0,    0,    0,  658,    0,
    0,    0,    0,    0,    0,    0,  664,    0,  664,    0,
  664,    0,  664,  664,  664,    0,    0,    0,    0,    0,
    0,    0,  664,  664,    0,    0,    0,  664,  664,    0,
    0,  668,    0,    0,    0,    0,  664,  664,  664,  664,
    0,    0,    0,    0,    0,  665,    0,    0,    0,    0,
  665,  664,  665,  665,  665,  665,  665,  665,  665,  665,
  665,  665,  665,    0,    0,    0,    0,  664,    0,    0,
    0,    0,    0,    0,    0,  665,    0,  665,    0,  665,
    0,  665,  665,  665,    0,    0,    0,    0,    0,    0,
    0,  665,  665,    0,    0,    0,  665,  665,    0,    0,
  669,    0,    0,    0,    0,  665,  665,  665,  665,    0,
    0,    0,    0,    0,  668,    0,    0,    0,    0,  668,
  665,  668,  668,  668,  668,  668,  668,  668,  668,  668,
  668,  668,    0,    0,    0,    0,  665,    0,    0,    0,
    0,    0,    0,    0,  668,    0,  668,    0,  668,    0,
  668,  668,  668,    0,    0,    0,    0,    0,    0,    0,
  668,  668,    0,    0,    0,  668,  668,    0,    0,  672,
    0,    0,    0,    0,    0,    0,  668,  668,    0,    0,
    0,    0,    0,  669,    0,    0,    0,    0,  669,  668,
  669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
  669,    0,    0,    0,    0,  668,    0,    0,    0,    0,
    0,    0,    0,  669,    0,  669,    0,  669,    0,  669,
  669,  669,    0,    0,    0,    0,    0,    0,    0,  669,
  669,    0,    0,    0,  669,  669,    0,    0,  674,    0,
    0,    0,    0,    0,    0,  669,  669,    0,    0,    0,
    0,    0,  672,    0,    0,    0,    0,  672,  669,  672,
  672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
    0,    0,    0,    0,  669,    0,    0,    0,    0,    0,
    0,    0,  672,    0,  672,    0,  672,    0,  672,  672,
  672,    0,    0,    0,    0,    0,    0,    0,    0,  672,
    0,    0,    0,  672,  672,    0,    0,  675,    0,    0,
    0,    0,    0,    0,  672,  672,    0,    0,    0,    0,
    0,  674,    0,    0,    0,    0,  674,  672,  674,  674,
  674,  674,  674,  674,  674,  674,  674,  674,  674,    0,
    0,    0,    0,  672,    0,    0,    0,    0,    0,    0,
    0,  674,    0,  674,    0,  674,    0,  674,  674,  674,
    0,    0,    0,    0,    0,    0,    0,    0,  674,    0,
    0,    0,    0,  674,    0,    0,  677,    0,    0,    0,
    0,    0,    0,  674,  674,    0,    0,    0,    0,    0,
  675,    0,    0,    0,    0,  675,  674,  675,  675,  675,
  675,  675,  675,  675,  675,  675,  675,  675,    0,    0,
    0,    0,  674,    0,    0,    0,    0,    0,    0,    0,
  675,    0,  675,    0,  675,    0,  675,  675,  675,    0,
    0,    0,    0,    0,    0,    0,    0,  675,    0,    0,
    0,    0,  675,    0,    0,  678,    0,    0,    0,    0,
    0,    0,  675,  675,    0,    0,    0,    0,    0,  677,
    0,    0,    0,    0,  677,  675,  677,  677,  677,  677,
  677,  677,  677,  677,  677,  677,  677,    0,    0,    0,
    0,  675,    0,    0,    0,    0,    0,    0,    0,  677,
    0,  677,    0,  677,    0,  677,  677,  677,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  677,    0,    0,  680,    0,    0,    0,    0,    0,
    0,  677,  677,    0,    0,    0,    0,    0,  678,    0,
    0,    0,    0,  678,  677,  678,  678,  678,  678,  678,
  678,  678,  678,  678,  678,  678,    0,    0,    0,    0,
  677,    0,    0,    0,    0,    0,    0,    0,  678,    0,
  678,    0,  678,    0,  678,  678,  678,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  678,    0,    0,  681,    0,    0,    0,    0,    0,    0,
  678,  678,    0,    0,    0,    0,    0,  680,    0,    0,
    0,    0,  680,  678,  680,  680,  680,  680,  680,  680,
  680,  680,  680,  680,  680,    0,    0,    0,    0,  678,
    0,    0,    0,    0,    0,    0,    0,  680,    0,  680,
    0,  680,    0,  680,  680,  680,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  680,
    0,    0,  683,    0,    0,    0,    0,    0,    0,    0,
  680,    0,    0,    0,    0,    0,  681,    0,    0,    0,
    0,  681,  680,  681,  681,  681,  681,  681,  681,  681,
  681,  681,  681,  681,    0,    0,    0,    0,  680,    0,
    0,    0,    0,    0,    0,    0,  681,    0,  681,    0,
  681,    0,  681,  681,  681,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  681,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  681,
    0,    0,    0,    0,    0,  683,    0,    0,    0,    0,
  683,  681,  683,  683,  683,  683,  683,  683,  683,  683,
  683,  683,  683,    0,    0,    0,    0,  681,    0,    0,
    0,    0,    0,    0,    0,  683,    0,  683,    0,  683,
    0,  683,  683,  683,  592,    0,    0,    0,    0,    0,
    0,    0,   57,   24,   58,   25, 1194,  683,   26,   59,
    0,   60,   61,   27,   62,   63,   64,   28,    0,    0,
    0,    0,    0,   65,    0,   66,   30,   67,   68,   69,
   70,    0,    0,   32,    0,    0,    0,   71,   33,    0,
   72,   73,   34,    0,    0,    0,  683,    0,    0,    0,
    0,    0,   74,    0,   36,    0,   37,   75,    0,    0,
   38,    0,   76,   77,   78,   79,   80,   81,   39,   40,
   82,   83,   41,   84,    0,   85,    0,    0,   86,   87,
    0,    0,   88,   89,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   90,   91,   92,
   93,   94,    0,    0,    0,    0,   95,    0,    0,    0,
   96,    0,    0,    0,    0,   97,   98,   99,  100,  101,
    0,    0,    0,  102,    0,  103,    0,    0,    0,    0,
    0,  104,  105,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   56,    0,  106,  107,  108,  109,
    0, 1195,   57,   24,   58,   25,    0,    0,   26,   59,
    0,   60,   61,   27,   62,   63,   64,   28,    0,    0,
    0,    0,    0,   65,    0,   66,   30,   67,   68,   69,
   70,    0,    0,   32,    0,    0,    0,   71,   33,    0,
   72,   73,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   74,    0,   36,    0,   37,   75,    0,    0,
   38,    0,   76,   77,   78,   79,   80,   81,   39,   40,
   82,   83,   41,   84,    0,   85,    0,    0,   86,   87,
    0,    0,   88,   89,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   90,   91,   92,
   93,   94,    0,    0,    0,    0,   95,    0,    0,    0,
   96,    0,    0,    0,    0,   97,   98,   99,  100,  101,
    0,    0,    0,  102,    0,  103,    0,    0,    0,    0,
    0,  104,  105,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  273,    0,    0,    0,  106,  107,  108,  109,
   57,   24,   58,   25,    0,    0,   26,   59,    0,   60,
   61,   27,   62,   63,   64,   28,    0,    0,    0,    0,
    0,   65,    0,   66,   30,   67,   68,   69,   70,    0,
    0,   32,    0,    0,    0,   71,   33,    0,   72,   73,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   74,    0,   36,    0,   37,   75,    0,    0,   38,    0,
   76,   77,   78,   79,   80,   81,   39,   40,   82,   83,
   41,   84,    0,   85,    0,    0,   86,   87,    0,    0,
   88,   89,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   90,   91,   92,   93,   94,
    0,    0,    0,    0,   95,    0,    0,    0,   96,    0,
    0,    0,    0,   97,   98,   99,  100,  101,    0,    0,
    0,  102,    0,  103,    0,    0,    0,    0,    0,  104,
  105,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  592,    0,    0,    0,  106,  107,  108,  109,   57,   24,
   58,   25,    0,    0,   26,   59,    0,   60,   61,   27,
   62,   63,   64,   28,    0,    0,    0,    0,    0,   65,
    0,   66,   30,   67,   68,   69,   70,    0,    0,   32,
    0,    0,    0,   71,   33,    0,   72,   73,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   74,    0,
   36,    0,   37,   75,    0,    0,   38,    0,   76,   77,
   78,   79,   80,   81,   39,   40,   82,   83,   41,   84,
    0,   85,    0,    0,   86,   87,    0,    0,   88,   89,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   90,   91,   92,   93,   94,    0,    0,
    0,    0,   95,    0,    0,    0,   96,    0,    0,    0,
    0,   97,   98,   99,  100,  101,    0,    0,    0,  102,
    0,  103,    0,    0,    0,    0,    0,  104,  105,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1065,    0,
    0,    0,  106,  107,  108,  109, 1065, 1065, 1065, 1065,
    0,    0, 1065, 1065,    0, 1065, 1065, 1065, 1065, 1065,
 1065, 1065,    0,    0,    0,    0,    0, 1065,    0, 1065,
 1065, 1065, 1065, 1065, 1065,    0,    0, 1065,    0,    0,
    0, 1065, 1065,    0, 1065, 1065, 1065,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1065,    0, 1065,    0,
 1065, 1065,    0,    0, 1065,    0, 1065, 1065, 1065, 1065,
 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,    0, 1065,
    0,    0, 1065, 1065,    0,    0, 1065, 1065,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1065, 1065, 1065, 1065, 1065,    0,    0,    0,    0,
 1065,    0,    0,    0, 1065,    0,    0,    0,    0, 1065,
 1065, 1065, 1065, 1065,    0,    0,    0, 1065,    0, 1065,
    0,    0,    0,    0,    0, 1065, 1065,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  635,    0,    0,    0,
 1065, 1065, 1065, 1065,   57,   24,    0,   25,    0,    0,
   26,  260,    0,    0,    0,   27,   62,   63,    0,   28,
    0,    0,  190,    0,  190,   65,    0,  190,   30,    0,
    0,    0,  190,    0,    0,   32,  190,    0,    0,    0,
   33,    0,   72,   73,   34,  190,  636,    0,    0,    0,
    0,    0,  190,  637,    0,    0,   36,  190,   37,   75,
    0,  190,   38,    0,    0,   77,    0,   79,    0,   81,
   39,   40,  261,  190,   41,  190,    0,    0,    0,  190,
    0,  638,    0,    0,   88,   89,    0,  190,  190,    0,
    0,  190,    0,    0,  190,    0,    0,    0,    0,   90,
   91,   92,   93,   94,    0,    0,    0,    0,    0,    0,
    0,    0,   96,    0,    0,  639,    0,    0,   98,   99,
  100,  101,    0,    0,    0,  102,    0,  103,    0,    0,
 1090,    0,    0,  104,  105,    0,    0,    0,    0,    0,
    0,   57,   24,    0,   25,    0,    0,   26,  260,    0,
    0,    0,   27,   62,   63,    0,   28,    0,  106,  107,
  108,  109,   65,    0,    0,   30,    0,    0,    0,    0,
    0,    0,   32,    0,    0,    0,  190,   33,    0,   72,
   73,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   75,    0,    0,   38,
    0,    0,   77,    0,   79,    0,   81,   39,   40,  261,
    0,   41,    0,    0,    0,    0,    0,    0,   87,    0,
    0,   88,   89,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   90,   91,   92,   93,
  807,    0,    0,    0,    0,  808, 1110,    0,    0,   96,
    0,    0,    0,    0,    0,   98,   99,  100,  101,    0,
    0,    0,  102,    0,  103,    0,    0,    0,    0,    0,
  104,  105,    0,    0,    0,    0,    0,    0,   57,   24,
    0,   25,    0,    0,   26,  260,    0,    0,    0,   27,
   62,   63,    0,   28,    0,  106,  809,  108,  109,   65,
    0,  810,   30,    0,    0,    0,  811,    0,    0,   32,
    0,    0,    0,    0,   33,    0,   72,   73,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   36,    0,   37,   75,    0,    0,   38,    0,    0,   77,
    0,   79,    0,   81,   39,   40,  261,    0,   41,    0,
    0,    0,    0,    0,    0,   87,    0,    0,   88,   89,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   90,   91,   92,   93,  807,    0,    0,
    0,    0,  808,    0,    0,    0,   96,    0,    0,    0,
    0,    0,   98,   99,  100,  101,    0,    0,    0,  102,
    0,  103,    0,    0,    0,    0,    0,  104,  105,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  825,  106,  809,  108,  109,    0,    0,  810,   57,
   24,    0,   25,  811,    0,   26,  260,    0,    0,    0,
   27,   62,   63,    0,   28,    0,    0,  190,    0,  190,
   65,    0,  190,   30,    0,    0,    0,  190,    0,    0,
   32,  190,    0,    0,    0,   33,    0,   72,   73,   34,
  190,    0,    0,    0,    0,    0,    0,  190,    0,    0,
    0,   36,  190,   37,   75,    0,  190,   38,    0,    0,
   77,    0,   79,    0,   81,   39,   40,  261,  190,   41,
  190,    0,    0,    0,  190,    0,   87,    0,    0,   88,
   89,    0,  190,  190,    0,    0,  190,    0,    0,  190,
    0,    0,    0,    0,   90,   91,   92,   93,  309,    0,
    0,    0,    0,  547,  826,    0,    0,   96,    0,    0,
    0,    0,    0,   98,   99,  100,  101,    0,    0,    0,
  102,    0,  103, 1090,    0,    0,    0,    0,  104,  105,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1023,
    0,    0,    0,  106,  310,  108,  109,   57,   24,    0,
   25,    0,    0,   26,  260,    0,    0,    0,   27,   62,
   63,  190,   28,    0,    0,   24,    0,   25,   65,    0,
   26,   30,    0,    0,    0,   27,    0,    0,   32,   28,
    0,    0,    0,   33,    0,   72,   73,   34,   30,  636,
    0,    0,    0,    0,    0,   32,  637,    0,    0,   36,
   33,   37,   75,    0,   34,   38,    0,    0,   77,    0,
   79,    0,   81,   39,   40,  261,   36,   41,   37,    0,
    0,    0,   38,    0,  638,    0,    0,   88,   89,    0,
   39,   40,    0,    0,   41,    0,    0,   85,    0,    0,
    0,    0,   90,   91,   92,   93,   94,    0,    0,    0,
    0,    0,    0,    0,    0,   96,    0,    0,    0,    0,
    0,   98,   99,  100,  101,    0,    0,    0,  102,    0,
  103,    0,    0,    0,    0,    0,  104,  105,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  825,    0,    0,
    0,  106,  107,  108,  109,   57,   24,    0,   25,    0,
    0,   26,  260,    0,    0,    0,   27,   62,   63,  381,
   28,    0,    0,   24,    0,   25,   65,    0,   26,   30,
    0,    0,    0,   27,    0,    0,   32,   28,    0,    0,
    0,   33,    0,   72,   73,   34,   30,    0,    0,    0,
    0,    0,    0,   32,    0,    0,    0,   36,   33,   37,
   75, 1026,   34,   38,    0,    0,   77,    0,   79,    0,
   81,   39,   40,  261,   36,   41,   37,    0,    0,    0,
   38,    0,   87,    0,    0,   88,   89,    0,   39,   40,
    0,    0,   41,    0,    0,  608,    0,    0,    0,    0,
   90,   91,   92,   93,  309,    0,    0,    0,    0,  547,
    0,    0,    0,   96,    0,    0,    0,    0,    0,   98,
   99,  100,  101,    0,    0,    0,  102,    0,  103,    0,
    0,    0,    0,    0,  104,  105,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  787,    0,    0,    0,  106,
  310,  108,  109,   57,   24,    0,   25,    0,    0,   26,
  260,    0,    0,    0,   27,   62,   63,  381,   28,    0,
    0,   24,    0,   25,   65,    0,   26,   30,    0,    0,
    0,   27,    0,    0,   32,   28,    0,    0,    0,   33,
    0,   72,   73,   34,   30,    0,    0,    0,    0,    0,
    0,   32,    0,    0,    0,   36,   33,   37,   75,    0,
   34,   38,    0,    0,   77,    0,   79,    0,   81,   39,
   40,  261,   36,   41,   37,    0,   85,    0,   38,    0,
   87,    0,    0,   88,   89,    0,   39,   40,    0,    0,
   41,    0,    0,  564,    0,    0,    0,    0,   90,   91,
   92,   93,  309,    0,    0,    0,    0,    0,    0,    0,
    0,   96,    0,    0,    0,    0,    0,   98,   99,  100,
  101,    0,    0,    0,  102,    0,  103,    0,    0,    0,
    0,    0,  104,  105,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  825,    0,    0,    0,  106,  310,  108,
  109,   57,   24,    0,   25,    0,    0,   26,  260,    0,
    0,    0,   27,   62,   63,  381,   28,    0,    0,    0,
    0,    0,   65,    0,    0,   30,    0,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   72,
   73,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   75,    0,    0,   38,
    0,    0,   77,    0,   79,    0,   81,   39,   40,  261,
    0,   41,    0,    0,    0,    0,    0,    0,   87,    0,
    0,   88,   89,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   90,   91,   92,   93,
  309,    0,    0,    0,    0,  547,    0,    0,    0,   96,
    0,    0,    0,    0,    0,   98,   99,  100,  101,    0,
    0,    0,  102,    0,  103,    0,    0,    0,    0,    0,
  104,  105,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  348,    0,  106,  310,  108,  109,  349,
    0,   57,   24,    0,   25,    0,    0,   26,  260,    0,
    0,    0,   27,   62,   63,    0,   28,    0,    0,    0,
    0,    0,   65,    0,    0,   30,    0,    0,    0,    0,
    0,    0,   32,    0,    0,  350,    0,   33,    0,   72,
   73,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   75,    0,    0,   38,
    0,    0,   77,    0,   79,    0,   81,   39,   40,  261,
    0,   41,    0,    0,    0,    0,    0,    0,    0,    0,
  351,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   90,   91,   92,  262,
  352,    0,    0,    0,    0,    0,    0,    0,    0,   96,
    0,  353,    0,    0,    0,   98,   99,  100,  101,  980,
    0,    0,  102,    0,  103,  817,    0,    0,    0,    0,
  104,  105,    0,   57,   24,    0,   25,    0,    0,   26,
  260,    0,    0,    0,   27,   62,   63,    0,   28,    0,
    0,    0,    0,    0,   65,  106,  264,   30,  109,    0,
    0,    0,    0,    0,   32,    0,    0,    0,    0,   33,
    0,   72,   73,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   36,    0,   37,   75,    0,
    0,   38,    0,    0,   77,    0,   79,    0,   81,   39,
   40,  261,    0,   41,    0,    0,    0,    0,    0,    0,
   87,    0,    0,   88,   89,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   90,   91,
   92,   93,  309,    0,    0,    0,    0,    0,  981,    0,
    0,   96,    0,    0,    0,    0,    0,   98,   99,  100,
  101,    0,    0,    0,  102,    0,  103,    0,    0,    0,
    0,    0,  104,  105,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1044,    0,    0,    0,  106,  310,  108,
  109,   57,   24,    0,   25,    0,    0,   26,  260,    0,
    0,    0,   27,   62,   63,    0,   28,    0,    0,  534,
    0,  534,   65,    0,  534,   30,    0,    0,    0,  534,
    0,    0,   32,  534,    0,    0,    0,   33,    0,   72,
   73,   34,  534,    0,    0,    0,    0,    0,    0,  534,
    0,    0,    0,   36,  534,   37,   75,    0,  534,   38,
    0,    0,   77,    0,   79,    0,   81,   39,   40,  261,
  534,   41,  534,    0,    0,    0,  534,    0,   87,    0,
    0,   88,   89,    0,  534,  534,    0,    0,  534,    0,
    0,  534,    0,    0,    0,    0,   90,   91,   92,   93,
  309,    0,    0,    0,    0,    0, 1045,    0,    0,   96,
    0,    0,    0,    0,    0,   98,   99,  100,  101,    0,
    0,    0,  102,    0,  103,    0,    0,    0,    0,    0,
  104,  105,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  308,    0,    0,    0,  106,  310,  108,  109,   57,
   24,    0,   25,    0,    0,   26,  260,    0,    0,    0,
   27,   62,   63,  534,   28,    0,    0,  191,    0,  191,
   65,    0,  191,   30,    0,    0,    0,  191,    0,    0,
   32,  191,    0,    0,    0,   33,    0,   72,   73,   34,
  191,    0,    0,    0,    0,    0,    0,  191,    0,    0,
    0,   36,  191,   37,   75,    0,  191,   38,    0,    0,
   77,    0,   79,    0,   81,   39,   40,  261,  191,   41,
  191,    0,    0,    0,  191,    0,   87,    0,    0,   88,
   89,    0,  191,  191,    0,    0,  191,    0,    0,  191,
    0,    0,    0,    0,   90,   91,   92,   93,  309,    0,
    0,    0,    0,    0,    0,    0,    0,   96,    0,    0,
    0,    0,    0,   98,   99,  100,  101,    0,    0,    0,
  102,    0,  103,    0,    0,    0,    0,    0,  104,  105,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  317,
    0,    0,    0,  106,  310,  108,  109,   57,   24,    0,
   25,    0,    0,   26,  260,    0,    0,    0,   27,   62,
   63,  191,   28,    0,    0,    0,    0,    0,   65,    0,
    0,   30,    0,    0,    0,    0,    0,    0,   32,    0,
    0,    0,    0,   33,    0,   72,   73,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
    0,   37,   75,    0,    0,   38,    0,    0,   77,    0,
   79,    0,   81,   39,   40,  261,    0,   41,    0,    0,
    0,    0,    0,    0,   87,    0,    0,   88,   89,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   90,   91,   92,   93,  309,    0,    0,    0,
    0,    0,    0,    0,    0,   96,    0,    0,    0,    0,
    0,   98,   99,  100,  101,    0,    0,    0,  102,    0,
  103,    0,    0,    0,    0,    0,  104,  105,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  348,
    0,  106,  310,  108,  109,  349,    0,   57,   24,    0,
   25,    0,    0,   26,  260,    0,    0,    0,   27,   62,
   63,    0,   28,    0,    0,    0,    0,    0,   65,    0,
    0,   30,    0,    0,    0,    0,    0,    0,   32,    0,
    0,  350,    0,   33,    0,   72,   73,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
    0,   37,   75,    0,    0,   38,    0,    0,   77,    0,
   79,    0,   81,   39,   40,  261,    0,   41,    0,    0,
    0,    0,    0,    0,    0,    0,  351,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   90,   91,   92,  262,  352,    0,    0,    0,
    0,    0,    0,    0,    0,   96,    0,  353,    0,    0,
    0,   98,   99,  100,  101,    0,    0,    0,  102,    0,
  103,  633,    0,    0,    0,    0,  104,  105,    0,   57,
   24,    0,   25,    0,    0,   26,  260,    0,    0,    0,
   27,   62,   63,    0,   28,    0,    0,    0,    0,    0,
   65,  106,  264,   30,  109,    0,    0,    0,    0,    0,
   32,    0,    0,    0,    0,   33,    0,   72,   73,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   36,    0,   37,   75,    0,    0,   38,    0,    0,
   77,    0,   79,    0,   81,   39,   40,  261,    0,   41,
    0,    0,    0,    0,    0,    0,   87,    0,    0,   88,
   89,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   90,   91,   92,   93,   94,    0,
    0,    0,    0,    0,    0,    0,    0,   96,    0,    0,
    0,    0,    0,   98,   99,  100,  101,    0,    0,    0,
  102,    0,  103,    0,    0,    0,    0,    0,  104,  105,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  817,
    0,    0,    0,  106,  107,  108,  109,   57,   24,    0,
   25,    0,    0,   26,  260,    0,    0,    0,   27,   62,
   63,    0,   28,    0,    0,  190,    0,  190,   65,    0,
  190,   30,    0,    0,    0,  190,    0,    0,   32,  190,
    0,    0,    0,   33,    0,   72,   73,   34,  190,    0,
    0,    0,    0,    0,    0,  190,    0,    0,    0,   36,
  190,   37,   75,    0,  190,   38,    0,    0,   77,    0,
   79,    0,   81,   39,   40,  261,  190,   41,  190,    0,
    0,    0,  190,    0,   87,    0,    0,   88,   89,    0,
  190,  190,    0,    0,  190,    0,    0,  190,    0,    0,
    0,    0,   90,   91,   92,   93,  309,    0,    0,    0,
    0,    0,    0,    0,    0,   96,    0,    0,    0,    0,
    0,   98,   99,  100,  101,    0,    0,    0,  102,    0,
  103,    0,    0,    0,    0,    0,  104,  105,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1156,    0,    0,
    0,  106,  310,  108,  109,   57,   24,    0,   25,    0,
    0,   26,  260,    0,    0,    0,   27,   62,   63,  190,
   28,    0,    0,  200,    0,  200,   65,    0,  200,   30,
    0,    0,    0,  200,    0,    0,   32,  200,    0,    0,
    0,   33,    0,   72,   73,   34,  200,    0,    0,    0,
    0,    0,    0,  200,    0,    0,    0,   36,  200,   37,
   75,    0,  200,   38,    0,    0,   77,    0,   79,    0,
   81,   39,   40,  261,  200,   41,  200,    0,    0,    0,
  200,    0,   87,    0,    0,   88,   89,    0,  200,  200,
    0,    0,  200,    0,    0,  200,    0,    0,    0,    0,
   90,   91,   92,   93,   94,    0,    0,    0,    0,    0,
    0,    0,    0,   96,    0,    0,    0,    0,    0,   98,
   99,  100,  101,    0,    0,    0,  102,    0,  103,    0,
    0,    0,    0,    0,  104,  105,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   84,    0,    0,    0,  106,
 1157,  108,  109,   84,   84,    0,   84,    0,    0,   84,
   84,    0,    0,    0,   84,   84,   84,  200,   84,    0,
    0,    0,    0,    0,   84,    0,    0,   84,    0,    0,
    0,    0,    0,    0,   84,    0,    0,    0,    0,   84,
    0,   84,   84,   84,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   84,    0,   84,   84,    0,
    0,   84,    0,    0,   84,    0,   84,    0,   84,   84,
   84,   84,    0,   84,    0,    0,    0,    0,    0,    0,
   84,    0,    0,   84,   84,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   84,   84,
   84,   84,   84,    0,    0,    0,    0,    0,    0,    0,
    0,   84,    0,    0,    0,    0,    0,   84,   84,   84,
   84,    0,    0,    0,   84,    0,   84,    0,    0,    0,
    0,    0,   84,   84,    0,    0,    0,    0,    0,    0,
    0,  205,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  206,  348,    0,   84,   84,   84,
   84,  349,    0,   57,   24,    0,   25,    0,    0,   26,
  260,    0,    0,    0,   27,   62,   63,    0,   28,    0,
    0,    0,    0,  207,   65,    0,    0,   30,    0,    0,
    0,    0,    0,    0,   32,    0,    0,  350,    0,   33,
    0,   72,   73,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   36,    0,   37,   75,    0,
    0,   38,    0,    0,   77,    0,   79,    0,   81,   39,
   40,  261,    0,   41,  208,  209,  210,  211,    0,  212,
  213,  214,  215,  216,  217,  218,  219,    0,    0,  220,
  221,  222,  223,  224,  225,  226,  227,    0,   90,   91,
   92,  262,  352,    0,    0,    0,    0,    0,    0,    0,
    0,   96,    0,  353,    0,    0,    0,   98,   99,  100,
  101,    0,    0,    0,  102,    0,  103,  348,    0,    0,
    0,    0,  104,  105,    0,   57,   24,    0,   25,    0,
    0,   26,  260,    0,    0,    0,   27,   62,   63,    0,
   28,    0,    0,    0,    0,    0,   65,  106,  264,   30,
  109,    0,    0,    0,    0,    0,   32,    0,    0,    0,
    0,   33,    0,   72,   73,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
   75,    0,    0,   38,    0,    0,   77,    0,   79,    0,
   81,   39,   40,  261,    0,   41,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   90,   91,   92,  262,  352,    0,    0,    0,    0,    0,
    0,    0,    0,   96,    0,  353,    0,    0,    0,   98,
   99,  100,  101,    0,    0,    0,  102,    0,  103,  357,
    0,    0,    0,    0,  104,  105,    0,   57,   24,    0,
   25,    0,    0,   26,  260,    0,    0,    0,   27,   62,
   63,    0,   28,    0,    0,    0,    0,    0,   65,  106,
  264,   30,  109,    0,    0,    0,    0,    0,   32,    0,
    0,    0,    0,   33,    0,   72,   73,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
    0,   37,   75,    0,    0,   38,    0,    0,   77,    0,
   79,    0,   81,   39,   40,  261,    0,   41,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   90,   91,   92,  262,  352,    0,    0,    0,
    0,    0,    0,    0,    0,   96,    0,    0,    0,    0,
    0,   98,   99,  100,  101,    0,    0,    0,  102,    0,
  103,  359,    0,    0,    0,    0,  104,  105,    0,   57,
   24,    0,   25,    0,    0,   26,  260,    0,    0,    0,
   27,   62,   63,    0,   28,    0,    0,    0,    0,    0,
   65,  106,  264,   30,  109,    0,    0,    0,    0,    0,
   32,    0,    0,    0,    0,   33,    0,   72,   73,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   36,    0,   37,   75,    0,    0,   38,    0,    0,
   77,    0,   79,    0,   81,   39,   40,  261,    0,   41,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   90,   91,   92,  262,  352,    0,
    0,    0,    0,    0,    0,    0,    0,   96,    0,    0,
    0,    0,    0,   98,   99,  100,  101,    0,    0,    0,
  102,    0,  103,  361,    0,    0,    0,    0,  104,  105,
    0,   57,   24,    0,   25,    0,    0,   26,  260,    0,
    0,    0,   27,   62,   63,    0,   28,    0,    0,    0,
    0,    0,   65,  106,  264,   30,  109,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   72,
   73,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   75,    0,    0,   38,
    0,    0,   77,    0,   79,    0,   81,   39,   40,  261,
    0,   41,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   90,   91,   92,  262,
  352,    0,    0,    0,    0,    0,    0,    0,    0,   96,
    0,    0,    0,    0,    0,   98,   99,  100,  101,    0,
    0,    0,  102,    0,  103,  363,    0,    0,    0,    0,
  104,  105,    0,   57,   24,    0,   25,    0,    0,   26,
  260,    0,    0,    0,   27,   62,   63,    0,   28,    0,
    0,    0,    0,    0,   65,  106,  264,   30,  109,    0,
    0,    0,    0,    0,   32,    0,    0,    0,    0,   33,
    0,   72,   73,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   36,    0,   37,   75,    0,
    0,   38,    0,    0,   77,    0,   79,    0,   81,   39,
   40,  261,    0,   41,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   90,   91,
   92,  262,  352,    0,    0,    0,    0,    0,    0,    0,
    0,   96,    0,    0,    0,    0,    0,   98,   99,  100,
  101,    0,    0,    0,  102,    0,  103,  365,    0,    0,
    0,    0,  104,  105,    0,   57,   24,    0,   25,    0,
    0,   26,  260,    0,    0,    0,   27,   62,   63,    0,
   28,    0,    0,    0,    0,    0,   65,  106,  264,   30,
  109,    0,    0,    0,    0,    0,   32,    0,    0,    0,
    0,   33,    0,   72,   73,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
   75,    0,    0,   38,    0,    0,   77,    0,   79,    0,
   81,   39,   40,  261,    0,   41,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   90,   91,   92,  262,  352,    0,    0,    0,    0,    0,
    0,    0,    0,   96,    0,    0,    0,    0,    0,   98,
   99,  100,  101,    0,    0,    0,  102,    0,  103,  367,
    0,    0,    0,    0,  104,  105,    0,   57,   24,    0,
   25,    0,    0,   26,  260,    0,    0,    0,   27,   62,
   63,    0,   28,    0,    0,    0,    0,    0,   65,  106,
  264,   30,  109,    0,    0,    0,    0,    0,   32,    0,
    0,    0,    0,   33,    0,   72,   73,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
    0,   37,   75,    0,    0,   38,    0,    0,   77,    0,
   79,    0,   81,   39,   40,  261,    0,   41,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   90,   91,   92,  262,  352,    0,    0,    0,
    0,    0,    0,    0,    0,   96,    0,    0,    0,    0,
    0,   98,   99,  100,  101,    0,    0,    0,  102,    0,
  103,  369,    0,    0,    0,    0,  104,  105,    0,   57,
   24,    0,   25,    0,    0,   26,  260,    0,    0,    0,
   27,   62,   63,    0,   28,    0,    0,    0,    0,    0,
   65,  106,  264,   30,  109,    0,    0,    0,    0,    0,
   32,    0,    0,    0,    0,   33,    0,   72,   73,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   36,    0,   37,   75,    0,    0,   38,    0,    0,
   77,    0,   79,    0,   81,   39,   40,  261,    0,   41,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   90,   91,   92,  262,  352,    0,
    0,    0,    0,    0,    0,    0,    0,   96,    0,    0,
    0,    0,    0,   98,   99,  100,  101,    0,    0,    0,
  102,    0,  103,  371,    0,    0,    0,    0,  104,  105,
    0,   57,   24,    0,   25,    0,    0,   26,  260,    0,
    0,    0,   27,   62,   63,    0,   28,    0,    0,    0,
    0,    0,   65,  106,  264,   30,  109,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   72,
   73,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   75,    0,    0,   38,
    0,    0,   77,    0,   79,    0,   81,   39,   40,  261,
    0,   41,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   90,   91,   92,  262,
  352,    0,    0,    0,    0,    0,    0,    0,    0,   96,
    0,    0,    0,    0,    0,   98,   99,  100,  101,    0,
    0,    0,  102,    0,  103,  659,    0,    0,    0,    0,
  104,  105,    0,   57,   24,    0,   25,    0,    0,   26,
  260,    0,    0,    0,   27,   62,   63,    0,   28,    0,
    0,    0,    0,    0,   65,  106,  264,   30,  109,    0,
    0,    0,    0,    0,   32,    0,    0,    0,    0,   33,
    0,   72,   73,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   36,    0,   37,   75,    0,
    0,   38,    0,    0,   77,    0,   79,    0,   81,   39,
   40,  261,    0,   41,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   90,   91,
   92,  262,  352,    0,    0,    0,    0,    0,    0,    0,
    0,   96,    0,    0,    0,    0,    0,   98,   99,  100,
  101,    0,    0,    0,  102,    0,  103,  661,    0,    0,
    0,    0,  104,  105,    0,   57,   24,    0,   25,    0,
    0,   26,  260,    0,    0,    0,   27,   62,   63,    0,
   28,    0,    0,    0,    0,    0,   65,  106,  264,   30,
  109,    0,    0,    0,    0,    0,   32,    0,    0,    0,
    0,   33,    0,   72,   73,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
   75,    0,    0,   38,    0,    0,   77,    0,   79,    0,
   81,   39,   40,  261,    0,   41,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   90,   91,   92,  262,  352,    0,    0,    0,    0,    0,
    0,    0,    0,   96,    0,    0,    0,    0,    0,   98,
   99,  100,  101,    0,    0,    0,  102,    0,  103,  663,
    0,    0,    0,    0,  104,  105,    0,   57,   24,    0,
   25,    0,    0,   26,  260,    0,    0,    0,   27,   62,
   63,    0,   28,    0,    0,    0,    0,    0,   65,  106,
  264,   30,  109,    0,    0,    0,    0,    0,   32,    0,
    0,    0,    0,   33,    0,   72,   73,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
    0,   37,   75,    0,    0,   38,    0,    0,   77,    0,
   79,    0,   81,   39,   40,  261,    0,   41,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   90,   91,   92,  262,  352,    0,    0,    0,
    0,    0,    0,    0,    0,   96,    0,    0,    0,    0,
    0,   98,   99,  100,  101,    0,    0,    0,  102,    0,
  103,  681,    0,    0,    0,    0,  104,  105,    0,   57,
   24,    0,   25,    0,    0,   26,  260,    0,    0,    0,
   27,   62,   63,    0,   28,    0,    0,    0,    0,    0,
   65,  106,  264,   30,  109,    0,    0,    0,    0,    0,
   32,    0,    0,    0,    0,   33,    0,   72,   73,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   36,    0,   37,   75,    0,    0,   38,    0,    0,
   77,    0,   79,    0,   81,   39,   40,  261,    0,   41,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   90,   91,   92,  262,  352,    0,
    0,    0,    0,    0,    0,    0,    0,   96,    0,    0,
    0,    0,    0,   98,   99,  100,  101,    0,    0,    0,
  102,    0,  103,  683,    0,    0,    0,    0,  104,  105,
    0,   57,   24,    0,   25,    0,    0,   26,  260,    0,
    0,    0,   27,   62,   63,    0,   28,    0,    0,    0,
    0,    0,   65,  106,  264,   30,  109,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   72,
   73,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   75,    0,    0,   38,
    0,    0,   77,    0,   79,    0,   81,   39,   40,  261,
    0,   41,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   90,   91,   92,  262,
  352,    0,    0,    0,    0,    0,    0,    0,    0,   96,
    0,    0,    0,    0,    0,   98,   99,  100,  101,    0,
    0,    0,  102,    0,  103,  685,    0,    0,    0,    0,
  104,  105,    0,   57,   24,    0,   25,    0,    0,   26,
  260,    0,    0,    0,   27,   62,   63,    0,   28,    0,
    0,    0,    0,    0,   65,  106,  264,   30,  109,    0,
    0,    0,    0,    0,   32,    0,    0,    0,    0,   33,
    0,   72,   73,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   36,    0,   37,   75,    0,
    0,   38,    0,    0,   77,    0,   79,    0,   81,   39,
   40,  261,    0,   41,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   90,   91,
   92,  262,  686,    0,    0,    0,    0,    0,    0,    0,
    0,   96,    0,    0,    0,    0,    0,   98,   99,  100,
  101,    0,    0,    0,  102,    0,  103,  688,    0,    0,
    0,    0,  104,  105,    0,   57,   24,    0,   25,    0,
    0,   26,  260,    0,    0,    0,   27,   62,   63,    0,
   28,    0,    0,    0,    0,    0,   65,  106,  264,   30,
  109,    0,    0,    0,    0,    0,   32,    0,    0,    0,
    0,   33,    0,   72,   73,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
   75,    0,    0,   38,    0,    0,   77,    0,   79,    0,
   81,   39,   40,  261,    0,   41,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   90,   91,   92,  262,  686,    0,    0,    0,    0,    0,
    0,    0,    0,   96,    0,    0,    0,    0,    0,   98,
   99,  100,  101,    0,    0,    0,  102,    0,  103,  690,
    0,    0,    0,    0,  104,  105,    0,   57,   24,    0,
   25,    0,    0,   26,  260,    0,    0,    0,   27,   62,
   63,    0,   28,    0,    0,    0,    0,    0,   65,  106,
  264,   30,  109,    0,    0,    0,    0,    0,   32,    0,
    0,    0,    0,   33,    0,   72,   73,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
    0,   37,   75,    0,    0,   38,    0,    0,   77,    0,
   79,    0,   81,   39,   40,  261,    0,   41,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   90,   91,   92,  262,  686,    0,    0,    0,
    0,    0,    0,    0,    0,   96,    0,    0,    0,    0,
    0,   98,   99,  100,  101,    0,    0,    0,  102,    0,
  103,  692,    0,    0,    0,    0,  104,  105,    0,   57,
   24,    0,   25,    0,    0,   26,  260,    0,    0,    0,
   27,   62,   63,    0,   28,    0,    0,    0,    0,    0,
   65,  106,  264,   30,  109,    0,    0,    0,    0,    0,
   32,    0,    0,    0,    0,   33,    0,   72,   73,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   36,    0,   37,   75,    0,    0,   38,    0,    0,
   77,    0,   79,    0,   81,   39,   40,  261,    0,   41,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   90,   91,   92,  262,  686,    0,
    0,    0,    0,    0,    0,    0,    0,   96,    0,    0,
    0,    0,    0,   98,   99,  100,  101,    0,    0,    0,
  102,    0,  103,  694,    0,    0,    0,    0,  104,  105,
    0,   57,   24,    0,   25,    0,    0,   26,  260,    0,
    0,    0,   27,   62,   63,    0,   28,    0,    0,    0,
    0,    0,   65,  106,  264,   30,  109,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   72,
   73,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   75,    0,    0,   38,
    0,    0,   77,    0,   79,    0,   81,   39,   40,  261,
    0,   41,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   90,   91,   92,  262,
  686,    0,    0,    0,    0,    0,    0,    0,    0,   96,
    0,    0,    0,    0,    0,   98,   99,  100,  101,    0,
    0,    0,  102,    0,  103,  696,    0,    0,    0,    0,
  104,  105,    0,   57,   24,    0,   25,    0,    0,   26,
  260,    0,    0,    0,   27,   62,   63,    0,   28,    0,
    0,    0,    0,    0,   65,  106,  264,   30,  109,    0,
    0,    0,    0,    0,   32,    0,    0,    0,    0,   33,
    0,   72,   73,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   36,    0,   37,   75,    0,
    0,   38,    0,    0,   77,    0,   79,    0,   81,   39,
   40,  261,    0,   41,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   90,   91,
   92,  262,  686,    0,    0,    0,    0,    0,    0,    0,
    0,   96,    0,    0,    0,    0,    0,   98,   99,  100,
  101,    0,    0,    0,  102,    0,  103,  698,    0,    0,
    0,    0,  104,  105,    0,   57,   24,    0,   25,    0,
    0,   26,  260,    0,    0,    0,   27,   62,   63,    0,
   28,    0,    0,    0,    0,    0,   65,  106,  264,   30,
  109,    0,    0,    0,    0,    0,   32,    0,    0,    0,
    0,   33,    0,   72,   73,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
   75,    0,    0,   38,    0,    0,   77,    0,   79,    0,
   81,   39,   40,  261,    0,   41,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   90,   91,   92,  262,  686,    0,    0,    0,    0,    0,
    0,    0,    0,   96,    0,    0,    0,    0,    0,   98,
   99,  100,  101,    0,    0,    0,  102,    0,  103,  700,
    0,    0,    0,    0,  104,  105,    0,   57,   24,    0,
   25,    0,    0,   26,  260,    0,    0,    0,   27,   62,
   63,    0,   28,    0,    0,    0,    0,    0,   65,  106,
  264,   30,  109,    0,    0,    0,    0,    0,   32,    0,
    0,    0,    0,   33,    0,   72,   73,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
    0,   37,   75,    0,    0,   38,    0,    0,   77,    0,
   79,    0,   81,   39,   40,  261,    0,   41,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   90,   91,   92,  262,  686,    0,    0,    0,
    0,    0,    0,    0,    0,   96,    0,    0,    0,    0,
    0,   98,   99,  100,  101,    0,    0,    0,  102,    0,
  103,  702,    0,    0,    0,    0,  104,  105,    0,   57,
   24,    0,   25,    0,    0,   26,  260,    0,    0,    0,
   27,   62,   63,    0,   28,    0,    0,    0,    0,    0,
   65,  106,  264,   30,  109,    0,    0,    0,    0,    0,
   32,    0,    0,    0,    0,   33,    0,   72,   73,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   36,    0,   37,   75,    0,    0,   38,    0,    0,
   77,    0,   79,    0,   81,   39,   40,  261,    0,   41,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   90,   91,   92,  262,  686,    0,
    0,    0,    0,    0,    0,    0,    0,   96,    0,    0,
    0,    0,    0,   98,   99,  100,  101,    0,    0,    0,
  102,    0,  103,  704,    0,    0,    0,    0,  104,  105,
    0,   57,   24,    0,   25,    0,    0,   26,  260,    0,
    0,    0,   27,   62,   63,    0,   28,    0,    0,    0,
    0,    0,   65,  106,  264,   30,  109,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   72,
   73,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   75,    0,    0,   38,
    0,    0,   77,    0,   79,    0,   81,   39,   40,  261,
    0,   41,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   90,   91,   92,  262,
  686,    0,    0,    0,    0,    0,    0,    0,    0,   96,
    0,    0,    0,    0,    0,   98,   99,  100,  101,    0,
    0,    0,  102,    0,  103,  706,    0,    0,    0,    0,
  104,  105,    0,   57,   24,    0,   25,    0,    0,   26,
  260,    0,    0,    0,   27,   62,   63,    0,   28,    0,
    0,    0,    0,    0,   65,  106,  264,   30,  109,    0,
    0,    0,    0,    0,   32,    0,    0,    0,    0,   33,
    0,   72,   73,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   36,    0,   37,   75,    0,
    0,   38,    0,    0,   77,    0,   79,    0,   81,   39,
   40,  261,    0,   41,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   90,   91,
   92,  262,  686,    0,    0,    0,    0,    0,    0,    0,
    0,   96,    0,    0,    0,    0,    0,   98,   99,  100,
  101,    0,    0,    0,  102,    0,  103,  708,    0,    0,
    0,    0,  104,  105,    0,   57,   24,    0,   25,    0,
    0,   26,  260,    0,    0,    0,   27,   62,   63,    0,
   28,    0,    0,    0,    0,    0,   65,  106,  264,   30,
  109,    0,    0,    0,    0,    0,   32,    0,    0,    0,
    0,   33,    0,   72,   73,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
   75,    0,    0,   38,    0,    0,   77,    0,   79,    0,
   81,   39,   40,  261,    0,   41,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   90,   91,   92,  262,  686,    0,    0,    0,    0,    0,
    0,    0,    0,   96,    0,    0,    0,    0,    0,   98,
   99,  100,  101,    0,    0,    0,  102,    0,  103,  710,
    0,    0,    0,    0,  104,  105,    0,   57,   24,    0,
   25,    0,    0,   26,  260,    0,    0,    0,   27,   62,
   63,    0,   28,    0,    0,    0,    0,    0,   65,  106,
  264,   30,  109,    0,    0,    0,    0,    0,   32,    0,
    0,    0,    0,   33,    0,   72,   73,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
    0,   37,   75,    0,    0,   38,    0,    0,   77,    0,
   79,    0,   81,   39,   40,  261,    0,   41,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   90,   91,   92,  262,  686,    0,    0,    0,
    0,    0,    0,    0,    0,   96,    0,    0,    0,    0,
    0,   98,   99,  100,  101,    0,    0,    0,  102,    0,
  103,  874,    0,    0,    0,    0,  104,  105,    0,   57,
   24,    0,   25,    0,    0,   26,  260,    0,    0,    0,
   27,   62,   63,    0,   28,    0,    0,    0,    0,    0,
   65,  106,  264,   30,  109,    0,    0,    0,    0,    0,
   32,    0,    0,    0,    0,   33,    0,   72,   73,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   36,    0,   37,   75,    0,    0,   38,    0,    0,
   77,    0,   79,    0,   81,   39,   40,  261,    0,   41,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   90,   91,   92,  262,  352,    0,
    0,    0,    0,    0,    0,    0,    0,   96,    0,    0,
    0,    0,    0,   98,   99,  100,  101,    0,    0,    0,
  102,    0,  103,  667,    0,    0,    0,    0,  104,  105,
    0,   57,   24,    0,   25,    0,    0,   26,  260,    0,
    0,    0,   27,   62,   63,    0,   28,    0,    0,    0,
    0,    0,   65,  106,  264,   30,  109,    0,    0,   51,
    0,   51,   32,    0,    0,    0,    0,   33,    0,   72,
   73,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   51,   36,    0,   37,   75,    0,    0,   38,
    0,    0,   77,    0,   79,   51,   81,   39,   40,  261,
   51,   41,    0,    0,   85,   51,    0,   51,   51,   51,
   51,    0,    0,   51,    0,   51,    0,    0,    0,   51,
    0,    0,    0,    0,    0,    0,   90,   91,   92,  262,
  263,   51,    0,    0,   51,    0,   51,    0,    0,   96,
    0,    0,    0,    0,    0,    0,  668,  669,    0,    0,
  211,    0,    0,    0,  670,  211,    0,    0,    0,  211,
   51,  211,    0,    0,  211,    0,  211,  211,    0,  211,
    0,  211,    0,  211,    0,  211,  211,  211,  211,    0,
    0,  211,  211,    0,    0,  106,  264,  211,  671,  211,
  211,  211,    0,    0,  211,    0,  211,    0,  211,    0,
    0,  211,    0,  211,  211,  211,  211,    0,    0,    0,
  211,  211,  211,    0,    0,  211,  211,  211,    0,    0,
    0,    0,    0,    0,  211,  211,    0,  211,  211,  526,
  211,  211,  211,    0,    0,    0,  211,   57,   24,    0,
   25,    0,    0,   26,  260,    0,    0,    0,   27,   62,
   63,    0,   28,    0,    0,    0,  211,    0,   65,    0,
    0,   30,  211,  211,  211,    0,    0,    0,   32,    0,
    0,    0,  211,   33,    0,   72,   73,   34,    0,    0,
    0,    0,    0,  366,    0,    0,    0,    0,    0,   36,
    0,   37,   75,    0,    0,   38,    0,    0,   77,    0,
   79,  478,   81,   39,   40,  261,    0,   41,    0,    0,
    0,    0,    0,  211,    0,    0,    0,    0,    0,  366,
    0,    0,    0,    0,  479,    0,    0,    0,    0,    0,
    0,    0,   90,   91,   92,  262,  527,  480,    0,    0,
    0,  481,  482,    0,    0,   96,    0,  483,    0,  484,
  485,  486,  487,    0,    0,    0,    0,  488,    0,    0,
    0,  489,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  490,    0,    0,  491,    0,  492,    0,
    0,    0,    0,    0,    0,  366,    0,    0,    0,    0,
    0,  106,  528,  366,  366,  366,  366,  854,    0,    0,
  366,  366,  493,    0,  366,  366,  366,  366,  366,  366,
  366,  366,  366,    0,  366,  366,  366,  366,  366,  366,
  366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
  366,  366,  366,  366,  366,  366,    0,   52,    0,   52,
    0,   52,  366,   52,    0,  366,   52,    0,   52,   52,
    0,   52,    0,   52,    0,   52,    0,   52,   52,   52,
   52,    0,    0,   52,   52,    0,    0,    0,    0,   52,
   52,   52,   52,   52,    0,    0,   52,    0,   52,    0,
   52,    0,   52,   52,    0,   52,   52,   52,   52,    0,
    0,   52,   52,   52,   52,    0,    0,   52,   52,   52,
    0,    0,    0,    0,    0,    0,   52,   52,    0,   52,
   52,    0,   52,   52,   52,    0,    0,    0,   52,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   52,    0,
    0,   52,   52,   51,    0,    0,    0,   51,    0,   51,
    0,    0,   51,    0,   51,   51,    0,   51,    0,   51,
    0,   51,    0,   51,   51,   51,   51,    0,    0,   51,
   51,    0,    0,    0,    0,   51,    0,   51,   51,   51,
    0,    0,   51,    0,   51,    0,   51,    0,    0,   51,
    0,   51,   51,   51,   51,   52,    0,    0,   51,   51,
   51,    0,    0,   51,   51,   51,    0,    0,    0,    0,
    0,    0,   51,   51,    0,   51,   51,    0,   51,   51,
   51,    0,    0,    0,   51,    0,    0,   51,    0,    0,
    0,   51,    0,   51,    0,    0,   51,    0,   51,   51,
    0,   51,    0,   51,   51,   51,    0,   51,   51,   51,
   51,   87,    0,   51,   51,    0,    0,    0,    0,   51,
   51,   51,   51,   51,    0,    0,   51,    0,   51,    0,
   51,    0,    0,   51,    0,   51,   51,   51,   51,    0,
    0,    0,   51,   51,   51,    0,    0,   51,   51,   51,
    0,    0,    0,    0,    0,    0,   51,   51,    0,   51,
   51,   51,   51,   51,   51,    0,    0,    0,   51,    0,
    0,   52,    0,    0,    0,   52,    0,   52,    0,    0,
   52,    0,   52,   52,    0,   52,    0,   52,   51,   52,
    0,   52,   52,   52,   52,   88,    0,   52,   52,    0,
    0,    0,    0,   52,   51,   52,   52,   52,    0,    0,
   52,    0,   52,    0,   52,    0,    0,   52,    0,   52,
   52,   52,   52,    0,    0,    0,   52,   52,   52,    0,
    0,   52,   52,   52,    0,    0,    0,    0,    0,    0,
   52,   52,    0,   52,   52,   51,   52,   52,   52,    0,
    0,    0,   52,    0,    0,   51,    0,    0,    0,   51,
    0,   51,    0,    0,   51,    0,   51,   51,    0,   51,
    0,   51,   52,   51,    0,   51,   51,   51,   51,    0,
    0,   51,   51,    0,    0,    0,    0,   51,   52,   51,
   51,   51,    0,    0,   51,    0,   51,    0,   51,    0,
    0,   51,    0,   51,   51,   51,   51,    0,    0,    0,
   51,   51,   51,    0,    0,   51,   51,   51,    0,    0,
    0,    0,    0,    0,   51,   51,    0,   51,   51,   52,
   51,   51,   51,    0,    0,    0,   51,    0,    0,   51,
    0,    0,    0,   51,    0,   51,    0,    0,   51,    0,
   51,   51,    0,   51,    0,   51,   51,   51,    0,   51,
   51,   51,   51,  239,    0,   51,   51,    0,    0,    0,
    0,   51,    0,   51,   51,   51,    0,    0,   51,    0,
   51,  366,   51,    0,    0,   51,    0,   51,   51,   51,
   51,    0,    0,    0,   51,   51,   51,    0,    0,   51,
   51,   51,    0,    0,  366,    0,    0,    0,   51,   51,
    0,   51,   51,   51,   51,   51,   51,  366,    0,    0,
   51,    0,  366,    0,    0,  366,    0,  366,    0,  366,
  366,  366,  366,    0,    0,    0,    0,  366,    0,    0,
   51,  366,    0,    0,    0,  366,    0,  240,    0,    0,
    0,    0,    0,  366,    0,    0,  366,    0,  366,    0,
   57,   24,    0,   25,    0,    0,   26,  260,    0,    0,
    0,   27,   62,   63,    0,   28,    0,  366,    0,    0,
    0,   65,  366,    0,   30,    0,    0,    0,    0,  366,
  366,   32,  289,    0,  366,    0,   33,   51,   72,   73,
   34,    0,  636,    0,    0,    0,    0,  366,    0,  637,
    0,    0,   36,    0,   37,   75,    0,    0,   38,    0,
    0,   77,    0,   79,    0,   81,   39,   40,  261,    0,
   41,    0,    0,    0,    0,    0,    0,  638,    0,  366,
   88,   89,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   90,   91,   92,   93,   94,
    0,    0,    0,    0,    0,    0,    0,    0,   96, 1021,
    0,  639,    0,    0,   98,   99,  100,  101,    0,    0,
    0,  102,    0,  103,    0,    0,    0,    0,    0,  104,
  105,    0,    0,    0,    0,    0,    0,   57,   24,    0,
   25,    0,    0,   26,  260,    0,    0,    0,   27,   62,
   63,    0,   28,    0,  106,  107,  108,  109,   65,    0,
    0,   30,    0,    0,    0,    0,    0,    0,   32,    0,
    0,    0,    0,   33,    0,   72,   73,   34,    0,  636,
    0,    0,    0,    0,    0,    0,  637,    0,    0,   36,
    0,   37,   75,    0,    0,   38,    0,    0,   77,    0,
   79,    0,   81,   39,   40,  261,    0,   41,    0,    0,
    0,    0,    0,    0,  638,    0,    0,   88,   89,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   90,   91,   92,   93,   94,    0,    0,    0,
    0,    0,    0,    0,    0,   96,    0,    0,  639,    0,
    0,   98,   99,  100,  101,    0,    0,    0,  102,    0,
  103,    0,    0,    0,    0,    0,  104,  105,    0,    0,
    0,    0,    0,    0,   57,   24,    0,   25,    0,    0,
   26,  260,    0,    0,    0,   27,   62,   63,    0,   28,
    0,  106,  107,  108,  109,   65,    0,    0,   30,    0,
    0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
   33,    0,   72,   73,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   75,
    0,    0,   38,    0,    0,   77,    0,   79,    0,   81,
   39,   40,  261,    0,   41,    0,    0,   85,    0,    0,
    0,   87,    0,    0,   88,   89,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   90,
   91,   92,   93,  309,    0,    0,    0,    0,    0,    0,
    0,    0,   96,    0,    0,    0,    0,    0,   98,   99,
  100,  101,    0,    0,    0,  102,    0,  103,    0,    0,
    0,    0,    0,  104,  105,    0,    0,    0,    0,    0,
    0,   57,   24,    0,   25,    0,    0,   26,  260,    0,
    0,    0,   27,   62,   63,    0,   28,    0,  106,  310,
  108,  109,   65,    0,    0,   30,    0,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   72,
   73,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   75,    0,    0,   38,
    0,    0,   77,    0,   79,    0,   81,   39,   40,  261,
    0,   41,    0,    0,   85,    0,    0,    0,   87,    0,
    0,   88,   89,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   90,   91,   92,   93,
  309,    0,    0,    0,    0,    0,    0,    0,    0,  889,
    0,    0,    0,    0,    0,   98,   99,  100,  101,    0,
    0,    0,  102,    0,  103,    0,    0,    0,    0,    0,
  104,  105,    0,    0,    0,    0,    0,    0,   57,   24,
    0,   25,    0,    0,   26,  260,    0,    0,    0,   27,
   62,   63,    0,   28,    0,  106,  310,  108,  109,   65,
    0,    0,   30,    0,    0,    0,    0,    0,    0,   32,
    0,    0,    0,    0,   33,    0,   72,   73,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   36,    0,   37,   75,    0,    0,   38,    0,    0,   77,
    0,   79,    0,   81,   39,   40,  261,    0,   41,    0,
    0,    0,    0,    0,    0,   87,    0,    0,   88,   89,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   90,   91,   92,   93,  309,    0,    0,
    0,    0,  547,    0,    0,    0,   96,    0,    0,    0,
    0,    0,   98,   99,  100,  101,    0,    0,    0,  102,
    0,  103,    0,    0,    0,    0,    0,  104,  105,    0,
    0,    0,    0,    0,    0,   57,   24,    0,   25,    0,
    0,   26,  260,    0,    0,    0,   27,   62,   63,    0,
   28,    0,  106,  310,  108,  109,   65,    0,    0,   30,
    0,    0,    0,    0,    0,    0,   32,    0,    0,    0,
    0,   33,    0,   72,   73,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
   75,    0,    0,   38,    0,    0,   77,    0,   79,    0,
   81,   39,   40,  261,    0,   41,    0,    0,    0,    0,
    0,    0,   87,    0,    0,   88,   89,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   90,   91,   92,   93,  309,    0,    0,    0,    0,  541,
    0,    0,    0,   96,    0,    0,    0,    0,    0,   98,
   99,  100,  101,    0,    0,    0,  102,    0,  103,    0,
    0,    0,    0,    0,  104,  105,    0,    0,    0,    0,
    0,    0,   57,   24,    0,   25,    0,    0,   26,  260,
    0,    0,    0,   27,   62,   63,    0,   28,    0,  106,
  310,  108,  109,   65,    0,    0,   30,    0,    0,    0,
    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,
   72,   73,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   75,    0,    0,
   38,    0,    0,   77,    0,   79,    0,   81,   39,   40,
  261,    0,   41,    0,    0,    0,    0,    0,    0,   87,
    0,    0,   88,   89,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   90,   91,   92,
   93,  309,    0,    0,    0,    0,    0,    0,    0,    0,
   96,    0,    0,    0,    0,    0,   98,   99,  100,  101,
    0,    0,    0,  102,    0,  103,    0,    0,    0,    0,
    0,  104,  105,    0,    0,    0,    0,    0,    0,   57,
   24,    0,   25,    0,    0,   26,  260,    0,    0,    0,
   27,   62,   63,    0,   28,    0,  106,  310,  108,  109,
   65,    0,    0,   30,    0,    0,    0,    0,    0,    0,
   32,    0,    0,    0,    0,   33,    0,   72,   73,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   36,    0,   37,   75,    0,    0,   38,    0,    0,
   77,    0,   79,    0,   81,   39,   40,  261,    0,   41,
    0,    0,    0,    0,    0,    0,   87,    0,    0,   88,
   89,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   90,   91,   92,   93,   94,    0,
    0,    0,    0,    0,    0,    0,    0,   96,    0,    0,
    0,    0,    0,   98,   99,  100,  101,    0,    0,    0,
  102,    0,  103,    0,    0,    0,    0,    0,  104,  105,
    0,    0,    0,    0,    0,    0,  709,  709,    0,  709,
    0,    0,  709,  709,    0,    0,    0,  709,  709,  709,
    0,  709,    0,  106,  107,  108,  109,  709,    0,    0,
  709,    0,    0,    0,    0,    0,    0,  709,    0,    0,
    0,    0,  709,    0,  709,  709,  709,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  709,    0,
  709,  709,    0,    0,  709,    0,    0,  709,    0,  709,
    0,  709,  709,  709,  709,    0,  709,    0,    0,    0,
    0,    0,    0,  709,    0,    0,  709,  709,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  709,  709,  709,  709,  709,    0,    0,    0,    0,
    0,    0,    0,    0,  709,    0,    0,    0,    0,    0,
  709,  709,  709,  709,    0,    0,    0,  709,    0,  709,
    0,    0,    0,    0,    0,  709,  709,    0,    0,    0,
    0,    0,    0,  147,  147,    0,  147,    0,    0,  147,
  147,    0,    0,    0,  147,  147,  147,    0,  147,    0,
  709,  709,  709,  709,  147,    0,    0,  147,    0,    0,
    0,    0,    0,    0,  147,    0,    0,    0,    0,  147,
    0,  147,  147,  147,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  147,    0,  147,  147,    0,
    0,  147,    0,    0,  147,    0,  147,    0,  147,  147,
  147,  147,    0,  147,    0,    0,    0,    0,    0,    0,
  147,    0,    0,  147,  147,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  147,  147,
  147,  147,  147,    0,    0,    0,    0,    0,    0,    0,
    0,  147,    0,    0,    0,    0,    0,  147,  147,  147,
  147,    0,    0,    0,  147,    0,  147,    0,    0,    0,
    0,    0,  147,  147,    0,    0,    0,    0,    0,    0,
   57,   24,    0,   25,    0,    0,   26,  260,    0,    0,
    0,   27,   62,   63,    0,   28,    0,  147,  147,  147,
  147,   65,    0,    0,   30,    0,    0,    0,    0,    0,
    0,   32,    0,    0,    0,    0,   33,    0,   72,   73,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   37,   75,    0,    0,   38,    0,
    0,   77,    0,   79,    0,   81,   39,   40,  261,    0,
   41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   90,   91,   92,  262,  686,
    0,    0,    0,    0,    0,    0,    0,    0,   96,    0,
    0,    0,    0,    0,   98,   99,  100,  101,    0,    0,
    0,  102,    0,  103,    0,   57,   24,    0,   25,  104,
  105,   26,  260,    0,    0,    0,   27,   62,   63,    0,
   28,    0,    0,    0,    0,    0,   65,    0,    0,   30,
    0,    0,    0,    0,  106,  264,   32,  109,    0,    0,
    0,   33,    0,   72,   73,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
   75,    0,    0,   38,    0,    0,   77,    0,   79,    0,
   81,   39,   40,  261,    0,   41,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   90,   91,   92,  262,  352,    0,    0,    0,    0,    0,
    0,    0,    0,   96,    0,    0,    0,    0,    0,   98,
   99,  100,  101,    0,    0,    0,  102,    0,  103,    0,
   57,   24,    0,   25,  104,  105,   26,  260,    0,    0,
    0,   27,   62,   63,    0,   28,    0,    0,    0,    0,
    0,   65,    0,    0,   30,    0,    0,    0,   51,  106,
  264,   32,  109,    0,    0,    0,   33,    0,   72,   73,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   51,   36,    0,   37,   75,    0,    0,   38,    0,
    0,   77,    0,   79,   51,   81,   39,   40,  261,   51,
   41,    0,    0,   85,   51,    0,   51,   51,   51,   51,
    0,    0,    0,    0,   51,    0,    0,    0,   51,    0,
    0,    0,    0,    0,    0,   90,   91,   92,  262,  263,
   51,    0,    0,   51,    0,   51,   57,   24,   96,   25,
    0,    0,   26,  260,    0,  668,  669,   27,   62,   63,
    0,   28,    0,  670,    0,    0,    0,   65,    0,   51,
   30,    0,   51,   51,    0,    0,  221,   32,    0,    0,
    0,    0,   33,    0,   72,   73,   34,    0,    0,    0,
    0,    0,    0,    0,  106, 1037,    0,  671,   36,    0,
   37,   75,    0,    0,   38,    0,    0,   77,    0,   79,
    0,   81,   39,   40,  261,    0,   41,    0,    0,   85,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   90,   91,   92,  262,  263,    0,    0,    0,    0,
    0,    0,    0,    0,   96,    0,  755,    0,  755,    0,
  755,  668,  669,  755,    0,  755,  755,    0,  755,  670,
  755,    0,  755,    0,  755,  755,  755,    0,    0,    0,
  755,  755,    0,    0,    0,    0,  755,    0,  755,  755,
    0,    0,    0,  755,    0,    0,    0,  755,    0,    0,
  106,  264,    0,  671,    0,    0,    0,    0,  755,  755,
    0,  755,    0,    0,    0,  755,  755,    0,    0,    0,
    0,    0,    0,  755,  755,   57,   24,  755,   25,    0,
  755,   26,  260,    0,    0,  755,   27,   62,   63,    0,
   28,    0,    0,    0,    0,    0,   65,    0,    0,   30,
    0,    0,    0,    0,    0,    0,   32,    0,  755,  755,
    0,   33,    0,   72,   73,   34,    0,    0,    0,    0,
    0,  755,    0,    0,    0,    0,    0,   36,    0,   37,
   75,    0,    0,   38,    0,    0,   77,    0,   79,    0,
   81,   39,   40,  261,    0,   41,    0,    0,   85,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  755,    0,    0,    0,    0,    0,    0,    0,
   90,   91,   92,  262,  263,    0,    0,    0,    0,    0,
  754,    0,  754,   96,    0,  754,    0,  754,  754,    0,
  754,    0,  754,    0,  754,    0,  754,  754,  754,    0,
    0,    0,  754,  754,    0,    0,    0,    0,  754,    0,
  754,  754,    0,    0,    0,  754,    0,    0,    0,  754,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  106,
  264,  754,    0,  754,    0,    0,    0,  754,  754,    0,
    0,    0,    0,    0,    0,  754,  754,    0,   24,  754,
   25,    0,  754,   26,    0,    0, 1435,  754,   27,    0,
  762,    0,   28,    0,  763, 1436, 1437,    0,    0,    0,
 1438,   30,    0,    0,    0,    0, 1439,    0,   32,    0,
   24,    0,   25,   33,    0,   26,    0,   34, 1435,    0,
   27,    0,  762,  754,   28,    0,  763, 1436, 1437,   36,
    0,   37, 1438,   30,    0,   38,    0,    0, 1439,    0,
   32,    0,    0,   39,   40,   33,    0,   41,    0,   34,
 1440,    0,    0,    0,    0, 1441,    0,    0,    0,    0,
    0,   36,    0,   37,  754,    0,    0,   38,    0,    0,
    0,    0,    0,    0,    0,   39,   40,    0,   51,   41,
   51,    0, 1440,   51,    0,    0,    0, 1441,   51,    0,
    0, 1442,   51,    0,    0,    0,    0,    0,    0,    0,
    0,   51,    0,    0,    0,    0,    0,    0,   51,    0,
   51,    0,   51,   51,    0,   51,    0,   51,    0,   51,
   51,   51,    0,    0,   51,    0,   51,    0,    0,   51,
    0,   51, 1443,   51,    0,   51,    0,    0,   51,    0,
   51,    0,    0,   51,   51,   51,    0,   51,    0,   51,
   51,   51,    0,   51,    0,   24,    0,   25,   51,    0,
   26,   51,    0,   51, 1443,   27,    0,   51,    0,   28,
   51,    0,    0,    0,    0,   51,   51,    0,   30,   51,
    0,    0,   51,    0,    0,   32,  170,    0,    0,    0,
   33,    0,    0,    0,   34,    0,  605,    0,    0,    0,
    0,    0,    0,  606,    0,    0,   36,    0,   37,    0,
    0,    0,   38,    0,    0,  607,  170,    0,    0,    0,
   39,   40,    0,    0,   41,    0,   52,  608,   52,    0,
    0,   52,   51,    0,    0,    0,   52,    0,    0,    0,
   52,    0,    0,    0,    0,    0,    0,    0,    0,   52,
    0,    0,    0,  609,    0,    0,   52,    0,    0,    0,
    0,   52,    0,    0,   51,   52,    0,   52,    0,   52,
    0,   51,    0,   51,   52,    0,   51,   52,    0,   52,
    0,   51,    0,   52,    0,   51,   52,    0,    0,    0,
    0,   52,   52,    0,   51,   52,    0,    0,   52,    0,
    0,   51,    0,    0,    0,    0,   51,    0,    0,  610,
   51,    0,   51,    0,   51,    0,   24,    0,   25,   51,
    0,   26,   51,    0,   51,    0,   27,    0,   51,    0,
   28,   51,    0,    0,   29,    0,   51,   51,    0,   30,
   51,    0,    0,   51,   31,    0,   32,    0,    0,    0,
    0,   33,    0,    0,    0,   34,   35,    0,    0,    0,
    0,   24,    0,   25,    0,    0,   26,   36, 1368,   37,
    0,   27,    0,   38,    0,   28,    0,    0,    0,    0,
   52,   39,   40,    0,   30,   41,    0,    0,   42,    0,
    0,   32,    0,    0,    0,    0,   33,    0, 1369,   24,
   34,   25,    0,    0,   26,    0,    0,    0,    0,   27,
    0,    0,   36,   28,   37,    0,    0,    0,   38, 1370,
    0,    0,   30,    0,    0,   51,   39,   40,    0,   32,
   41,    0,    0,   85,   33,    0,    0,    0,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   36,    0,   37,    0,    0,    0,   38,    0,   37,    0,
    0,    0,    0,    0,   39,   40,    0,    0,   41,   37,
   43,   85,    0,    0,   37,    0,    0,    0,   37,    0,
    0,   37,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   37,   37,    0,    0,  298,   37,   37,
    0,   35,    0,    0,   37,    0,   37,   37,   37,   37,
    0,    0,   35,    0,   37,  381,    0,   35,   37,    0,
   37,   35,    0,    0,   35,    0,    0,    0,    0,    0,
   37,    0,   37,   37,    0,   37,   35,   35,    0,   37,
    0,   35,   35,    0,    0,   31,    0,   35,    0,   35,
   35,   35,   35,  331,    0,    0,    0,   35,    0,   37,
    0,   35,    0,   35,    0,    0,   37,   37,   31,    0,
    0,    0,    0,   35,    0,   31,   35,   31,   35,    0,
    0,   31,   35,    0,    0,    0,   31,    0,    0,    0,
    0,   31,    0,   31,   31,   31,   31,    0,   31,   31,
    0,   31,   35,    0,    0,   31,    0,    0,    0,   35,
   35,   31,    0,    0,    0,    0,   31,   31,    0,    0,
   31,   31,   31,   31,   31,   31,   31,    0,    0,    0,
    0,   31,    0,    0,    0,   31,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   51,   31,   31,    0,    0,
   31,    0,   31,   31,   31,    0,   51,    0,    0,    0,
    0,   51,    0,    0,    0,   51,    0,    0,   51,    0,
    0,    0,    0,    0,    0,    0,   31,    0,    0,    0,
   51,   51,    0,   31,   31,   51,   51,    0,   51,    0,
    0,   51,    0,   51,   51,   51,   51,    0,    0,   51,
    0,   51,    0,    0,   51,   51,    0,   51,   51,    0,
    0,   51,    0,    0,    0,    0,    0,   51,    0,    0,
   51,    0,   51,   51,   51,    0,   51,    0,   51,   51,
    0,   51,    0,    0,   51,    0,   51,   51,   51,   51,
    0,    0,    0,    0,   51,    0,   51,    0,   51,    0,
   51,    0,    0,   39,   51,    0,    0,    0,    0,    0,
   51,    0,    0,   51,    0,   51,    0,   51,    0,   51,
    0,   51,   51,    0,    0,    0,    0,   51,    0,   51,
   51,   51,   51,    0,    0,    0,    0,   51,    0,   51,
    0,   51,    0,    0,   51,    0,   40,    0,    0,    0,
    0,    0,    0,   51,    0,    0,   51,   51,   51,    0,
    0,   51,   51,   51,    0,    0,    0,   51,    0,   51,
   51,   51,   51,    0,    0,   51,    0,   51,    0,    0,
    0,   51,   51,    0,   51,   51,   51,    0,    0,  223,
    0,   51,    0,   51,    0,    0,   51,   51,   51,    0,
    0,    0,   51,    0,    0,    0,    0,   51,    0,   51,
   51,   51,   51,    0,   51,    0,    0,   51,    0,    0,
    0,   51,   51,    0,    0,    0,    0,   51,    0,  324,
    0,  478,   51,   51,    0,    0,   51,   51,   51,   51,
   51,   51,   51,    0,    0,    0,    0,   51,    0,    0,
    0,   51,    0,    0,  479,    0,    0,    0,    0,    0,
    0,    0,   51,   51,    0,    0,   51,  480,   51,  325,
    0,    0,  482,    0,    0,    0,    0,  483,    0,  484,
  485,  486,  487,    0,    0,    0,    0,  488,    0,    0,
    0,  489,   51,    0,    0,   51,   51,    0,    0,    0,
    0,    0,    0,  490,    0,    0,  491,    0,  492,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  493,
  };
  protected static readonly short [] yyCheck = {            17,
  306,   52,   18,  355,   52,    4,   17,  545,  386,  307,
  193,  240,  296,   20,  547,  238,   20,   17,  330,   60,
   17,  495,  416,  192,  416,  517,  305,  305,  162,  253,
  594,  119,  416,  303, 1026,  397,  601,  342,   78,    6,
 1231, 1274,  830,    0,  637,  321, 1031,  396,   59,  380,
  983,  117,  798,  119,  800,  612,   74,  621,   17,  337,
   78,  256,  386,   45,  256,  256,   48,  256,  268,   80,
   17,   82,  256,  335,  256,   69,  268,  256,   96,  256,
 1313, 1506,  325, 1376,   88,   89,  256,  465, 1357, 1358,
  256,  325,  369, 1326,   88,   89,  256,   60,  844,   93,
  377,  847, 1395,  370,  380,  109,  369,  374,  256, 1268,
 1379,  256,  256,  256,  339,   17,  268,  256,  256,  113,
  256,  373,  500, 1599, 1600,  369,  257,  402,  256,  256,
  256,  375,  256,  269,   88,   89,  256, 1406,  282,  414,
  256,  465,  193,  368,  162,  193,  358,  372,  142,  294,
  286,  162,   17,  430,  256,  109,   17,  424,  256,  437,
 1429,  256,  162,  340,  256,  162,  256,  430,  430,  369,
  314, 1330,  396,  368, 1226,  370,  419,  372,  430,  736,
 1656,  351,  373,   17,  375,  419,  368,  238,  372,   17,
  238,  339,   17,   17,   17,  377,  344, 1182,  346,  203,
  204,  349,  350,  162,  352,  353,   17,  373,  368,  375,
 1635,  339,  372,  591,  256,  162,  344, 1269,  346,  358,
  363,  349,  350,  423,  352,  353,  421,    0,  715,  424,
  419,  423,  461,  720,  721,  253,  541,  460,  544,  430,
  419,  259,  594,  363,  332,  372,  228,  375,  626,  203,
  204,    0,  293,  631,  632,  586,  372, 1190,  252,  253,
  162,  421,  303,  329,  430,  269,  332,  234,  801,  621,
  368,  423,  266,  339,  372,  419,  419, 1570,  296,  628,
  256,  419,  430,  301,  302,  375,  425,  426,  427,  428,
  392,  295,  857,  419,  421,  419,  889,  162,  316,  419,
  257,  162,  430,  307, 1597,  421,  324,  631,  326,  303,
  586,  315,  330,  415,  325,  269, 1609,  321, 1611, 1351,
  422,  363,  277,  421,  419,  343,  344,  419,  162,  371,
  293,  373,  256,  375,  162,  256,  612,  162,  162,  162,
  334,  295,  256,  292,  384,  349,  350,  341,  256,  256,
  335,  162,  256,  731,    0,  355,  292, 1103,  355,  353,
  256,  315,  268,  326,  263,  377,  384, 1155,  256,  294,
  276,  375,  256, 1564,  256,  416,  380,  419,  396,  397,
  256,  306,  256,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  388,  349,  350, 1630,  392,  256,
  256,  377,  396,  397,  628,  962,  737,  731,  363,  460,
  257,  415,  460,  256,  256,  433,  315, 1449,  430,  470,
  256,  375,  470,  372,  256, 1457,  256,  262, 1342, 1662,
  256, 1000,  368,  395,  396,  256,  256,  357,  442,  443,
 1186,  256,  256,  256,  373,  369, 1438, 1499,  442,  443,
  419,  375,  446,  416,  256,  462,  377,  363,  462,  373,
  736,  415,  995,  298,  419,  420,  266,  387,  475, 1038,
  957,  475,  421,  785,  382,  382, 1528, 1529,  382,  375,
 1532,  973, 1514,  256,  466,  467,  762,  375,  442,  443,
  472,  373,  376, 1545,  419,  256, 1548,  363, 1244,  510,
  376,  430,  376,  881, 1418,  372,  993, 1253,  257,  369,
  369, 1563,  256,  419,  314,  744,  910,  373,  910,  376,
  264,  341,  516,  272,  518,  543,  910,  545,  277,  547,
  373,  373,  281,  803,  896, 1587, 1282,  373,  368,  371,
  370,  872,  368,  375,  379,  380,  770,  296,  777,  560,
  370,  545,  373,  419,  517,  370,  370,  370,  576,  419,
 1047,  579, 1049, 1128, 1097, 1052,  339,  372,  370,  305,
  343,  430,  266,  343,  323,  374,  376,  571,  339,  590,
  363,  325,  586,  344,  672,  346,  375,  369,  349,  350,
  601,  352,  353,  342,  594,  368,  872,  594, 1228,  372,
  306,  374,  375,  376,  377,  263,  672,  313,  612,  382,
  628,  257,  382,  305,  375,  261,  421,  611,  636,  637,
  314,  621,  392,  373,  621,  424,  272,  343,  417,  369,
  961,  277,  363,  627,  628,  281,  419,  269,  284,  277,
 1205, 1271,  256,  281,  373,  415,  429,  369,  430,  369,
  296,  297,  422,  959,  286,  301,  302,  315, 1145,  429,
 1147,  307, 1149,  309,  310,  311,  312,  671,   20,  430,
  369,  317, 1358,  636,  637,  321,  392,  323,  902,  419,
  430,  815,  376,  677,  989, 1249,  962,  333,  419,  335,
  336,  305,  338,  256,  369,  377,  342,  715,  429,  415,
  375,  430,  720,  721,  342,  723,  422,  382,  430,  294,
  430,  364,  369,  429,  992,  994,  362,  671,  375,  372,
 1406,  374,  377,  717,  370,  719,  343,  375, 1026, 1358,
  272,  430,  736,  370,  728,  277,   88,   89, 1358,  281,
  393,  394,  305, 1137,  372, 1137, 1140, 1358, 1140, 1143,
   17, 1143,  770, 1137,  296,  430, 1140,  109,  762, 1143,
  413,  392,  803,  374,  376,  382,  377,  785,  421,  417,
 1257,  424,  357,  430, 1358,  392,  770, 1406,  363, 1358,
  392,  323,  368,  801,  415,  370, 1406,  272, 1100,  374,
  808, 1283,  810,   60,  788, 1406,  763,   64,  415,  272,
  342,  372,  387,  415, 1291,  422,  272,  373, 1114,  803,
  422,  296,  429, 1358,   88,   89, 1354,  429, 1358,  387,
  371,  372, 1406,  296,  375,  339,  837, 1406,  839,  343,
  296,  849,  836,  851,  419,  109,  339,  343,  323,  382,
 1064,  385,   21,  861,  855, 1461,  857, 1199,  852,  392,
  323,  203,  204,  419,  368,  256, 1343,  323,  390, 1475,
  343, 1406,  368,  377,  868,  368, 1406,  256,  872,  910,
  392,  889,  415,  376,   53, 1362,  415,  871,  896,  422,
  341, 1497,  836,  422,  902,  368,  904, 1056,  939,  399,
  400,  939,  339,  415,  377,  162,  914, 1249,  852,  893,
  422,  357,  896,  339, 1419,  392,  357,  429,  902,  370,
 1194, 1426,  363,  343,  868,  909,  357,  269,  374,  370,
  256,  368,  373,  374,  375, 1231,  889,  343,  415,  203,
  204,  387,  368,  374,  357,  422,  387,  944,  368,  957,
  944,  959,  343,  295,  294,  368,  387,  910,  374,  372,
 1234,  377,  368,  343,  343,  307,  306,  975,  962,  963,
  339,  377,  980,  315,  387,  983, 1098,  368,  419,  321,
  339,  372,  370,  374,  375,  993,  377,  995,  368,  368,
  998,  382,  949,  372,  382,  374,  375,  377,  377,  368,
 1342,  374, 1124,  382,  377,  269, 1280,  349,  350,  368,
 1224, 1475,  343,  339,  386,  306, 1000,  308,  344,  963,
  346,  306,  313,  349,  350,  416,  352,  353,  313, 1552,
 1444,  295, 1026,  375,  325,  401,  293,  368,  380, 1047,
  325, 1049, 1456,  307, 1052, 1029,  368,  383,  384,  368,
  372,  315,  374,  375, 1038,  377, 1064,  369,  377, 1444,
  382,  397,  398,  375, 1061,  370,  369, 1061,  368,  326,
  382, 1456,  375,  415,  256, 1069, 1418,  377,  368, 1298,
 1064, 1294,  369,  369,  370,  349,  350,  377,  375, 1097,
 1364, 1614, 1100, 1266,  416,  371,  368, 1081,  355,  375,
  442,  443,  391, 1087, 1472,  377, 1137,  354,  355, 1140,
 1137,  375, 1143, 1140, 1071,    6, 1073,  375, 1075,  377,
  462, 1489, 1130,  419,  382, 1069,   17, 1128, 1651,  256,
  369,  371,  369,  475,  373,  375,  373, 1145,  377, 1147,
 1508, 1149, 1510,  373, 1152,  375,  416,  377, 1676, 1677,
 1438,  415,  369, 1419,  419, 1139,  373,  339,  375,  416,
 1426,  373,  344,  375,  346,  377,  277,  349,  350,   60,
  352,  353,  369,   64, 1163,  368,  373,  370,  442,  443,
  377,  371, 1190,  373, 1137,  375, 1194, 1140,  371,  372,
 1143,  374,  375,  376,  372,  371,  374,   88,   89,  375,
 1208, 1209,  374,  371, 1205,  373,  371,  375,  368, 1199,
  375,  256, 1199,  371,  354,  355, 1224,  375,  109, 1225,
  371,  369,  370, 1231,  375, 1266, 1234, 1268, 1266,  371,
 1268,  372,  371,  375,  369,  376,  375,  369,  373,  377,
 1224,  373,  294,  372,  586,  374,  365,  366,  430, 1257,
  387,  388,  389, 1294,  377, 1263, 1294,  365,  366, 1249,
  517,  373, 1249,  375,  421,  422,  423,  424, 1564,  256,
  612,  162, 1280,  373,  377,  375, 1270,  375,  371,  377,
  373,  415,  416, 1291, 1292,  364,  375,  374,  377, 1330,
  369,  256, 1330,  372,  339,  374,  375,  377,  371,  344,
  373,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,  203,  204,  393,  394, 1357, 1358,  294, 1357,
 1358,  371,  343,  373,  369,  371,  371,  373,  373,  671,
  375,  376,  377,  373,  413, 1343,  377,  594, 1379, 1333,
  356, 1379,  421,  417,  418,  424, 1354,  373,  373,  375,
  375,  430, 1342,  419, 1362, 1342, 1364,  371,  371,  373,
  373,  808, 1356,  810,  621, 1406,  419,  375, 1406,  377,
 1354,  375,  375,  377,  377,  375,  419,  377,  269,  636,
  637,  419,  420,  425,  426,  430,  370,  415, 1429,  377,
  376, 1429, 1688,  373,  736,  373,  369,  382,  375,  430,
  294,  373,  293,  373,  295,  294,  375,  671,  375,  373,
  373,  373, 1356,  256,  429,  372,  307,  377,  429,  256,
  762, 1422,  256, 1417,  315, 1419, 1410,  294, 1418,  294,
  321, 1418, 1426,   17,  382,  326,  373,  375,  374,  382,
  375, 1435, 1436,  376, 1438,  374,  373,  375,  419,  375,
 1444,  375,  377,  375,  373,  430,  424,  375,  349,  350,
  375,  368, 1456,  373,  355,  343,  375, 1461,  373, 1463,
  294,  294, 1466, 1417,  375, 1483,   60,  419,  371, 1480,
   64, 1475,  372,  368,  375,  419,  256,  256,  376,  380,
  256, 1435, 1436,  375,  836,  256,  256,  280,  382,  256,
  368, 1542,  339, 1497, 1542,  369,    0,  344,  343,  346,
  852,  373,  349,  350,  373,  352,  353,  256, 1559, 1463,
  377, 1559, 1466,  298,  415,  416,  868,  382,  373,  375,
  872, 1572, 1573,  371, 1572, 1573,  372,  364,  377,  371,
  256,  798,  369,  800, 1552,  372,  375,  374,  375, 1550,
  375,  442,  443,  424,  373,  382, 1564,  377, 1599, 1600,
  382, 1599, 1600,  373,  373,  373,  393,  394,  382,  339,
  347,  368,  836, 1581,  344,  382,  346,  382,  162,  349,
  350,  256,  352,  353,  256,  373,  413,  844,  852,  369,
  847,  256,  347,  430,  421,  371,  375,  424,  376,  372,
  339,  292,  944,  430,  868,  344, 1614,  346,  371,  371,
  349,  350,  339,  352,  353, 1656,  368,  373, 1656,  348,
  962,  963,  369,  339,  419,  375,  517,  373,  344,  372,
  346,  348,  889,  349,  350,  419,  352,  353,  256,  369,
  368,  382,  368, 1651,  377,  368,  356,  369,  337,  373,
  369,  372,  377,  910,  369,  375,  305,  370, 1659, 1660,
  430,  373,  369,  372,  368, 1666, 1667,  372, 1676, 1677,
  357,  419,  372,  374,  419,  419,  363,  364,  377,  419,
 1688,  368,  372,  370, 1026,  372,  373,  374,  375,  382,
  372,  430, 1676, 1677,  368,  586,  343,  377,  382,  963,
  387,  372,  370,  594,  373,  372,  393,  394,  374,  293,
  373,  375,  374,  256,  430,  375,  375,  375,  373, 1061,
  377,  612,  419,  373,  419,  371,  413, 1069,  373,  377,
  621,  419,  419,  377,  421,   62,  419,  424,  377,   66,
   67,   68,  326,   70,   71,  636,  637,  373,   75,   76,
  382,  373,  369,  382,   81,   82,  371,   84,  369,   86,
  373,  263, 1026,  257,   91,   92,  315,  261,  372,  372,
  382,  355,  369,  373,  373,  377,    0,    0,  272,  368,
  671,  377,  369,  277,  377,  373,    0,  281,  369,  368,
  284,  118,  377,  373,  419,  373,  371,  369,  369,  373,
  377,  377,  296,  297,  373, 1069,  256,  301,  302,  371,
  368,  419,  419,  307,  377,  309,  310,  311,  312,  369,
  373,  377,  373,  317,  369,  377,  373,  321,  382,  323,
  369,  373,  416,  368,  374,  369,  377,  369,  315,  333,
  377,  335,  336,  263,  338,  736, 1103,  377,  342,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  377,
  377,  377,  377,  377,  377,   51,   12,    5,  362, 1061,
 1224,  762,  944, 1224, 1429,  369,  370, 1379, 1276, 1604,
 1137, 1567, 1434, 1140, 1620, 1555, 1143, 1584, 1480,  339,
 1550,  966,  961,  776,  344,  966,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,  798,  966,  800,
 1461, 1667, 1406, 1481, 1394, 1661, 1577, 1573, 1572,  369,
 1330,  371, 1660,  373, 1510,  375,  376,  377, 1270, 1186,
  939,  321, 1333,  517,  261,  385,  386,  770,  265,  637,
  390,  391, 1199,  902, 1114,  836,   72,  803,  345,  399,
  400,  401,  402,  844,  989,  416,  847,  416, 1139, 1143,
  427,  852,  428,  431,  414,  429,  872,  261,  430,  432,
  586, 1230, 1310,    0, 1417, 1199, 1184,  868,  305,  162,
  430,  872, 1099, 1209, 1083, 1199, 1197, 1244, 1124, 1283,
  284, 1333, 1249,  561, 1004,  451, 1253, 1252,  889,  451,
 1412,  941,  934,  297, 1292,   -1, 1270,   -1,  302,   -1,
  594,   -1,  726,  307, 1356,  309,  310,  311,  312,  910,
   -1,   -1,   -1,  317,   -1, 1282,   -1,  321,   -1,   -1,
   -1,  325,   -1,   -1,   -1,   -1,   -1,  621,   -1,  333,
   -1,   -1,  336,   -1,  338,   -1,   -1,   -1,   -1,  256,
   -1,   -1,  636,  637,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362, 1333,
   -1,  962,  963,   -1,   -1, 1417,   -1, 1419,   -1,   -1,
   -1,   -1,   -1,   -1, 1426, 1342,   -1,   -1,   -1,   -1,
   -1,   -1, 1356, 1435, 1436,   -1, 1438,   -1,   -1,   94,
   -1,   -1,   -1,   98,   99,  100,  101,  102,  103,  104,
  105,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1, 1463,   -1,   -1, 1466,  419,   -1,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1, 1026,   -1,  344,   -1,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1, 1417,   -1,   -1,   -1,   -1,   -1,   -1,
   -1, 1418,  369,   -1,  371,   -1,  373,   -1,  375,  376,
  377, 1435, 1436,   -1, 1438,   -1,   -1,   -1, 1069,  386,
   -1,   -1,   -1,  390,  391,  512,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  401,  402,   -1,   -1,   -1, 1463,
   -1,   -1, 1466,   -1,   -1,   -1,   -1,  414,   -1,   -1,
   -1,   -1, 1103,   -1,  798,   -1,  800,   -1,   -1,   -1,
   -1,   -1,   -1,  430,   -1,   -1,   -1,   -1,   -1,   -1,
  257,   -1,  559,   -1,  261,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  272, 1137,   -1,   -1, 1140,
  277,   -1, 1143,   -1,  281,   -1,   -1,  284,   -1,   -1,
  844,   -1,   -1,  847,   -1,   -1,   -1,   -1,   -1,  296,
  297,   -1,   -1,   -1,  301,  302,   -1,   -1,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,
  317,   -1,   -1,   -1,  321, 1186,  323,    0,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  889,  333,   -1, 1199,  336,
   -1,  338,   -1,   -1,  309,  342,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  910,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  362,   -1,  261,   -1,  256,
   -1,  368,  369,  370,   -1,  262,   -1,  342,   -1,   -1,
   -1,   -1,   -1, 1244,   -1,   -1,   -1,  352, 1249,   -1,
  284,   -1, 1253,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  297,   -1,   -1,   -1,   -1,  302, 1270,
   -1,  298,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1, 1282,    0,  317,   -1,   -1,   -1,  321,   -1,   -1,
   -1,  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,
   -1,   -1,  336,   -1,  338,   -1,   -1,  412,  413,  414,
   -1,   -1,  417,  418,  419,  420,  421,  422,  423,  424,
  425,  426,  427,  428,  429,  430,  431,  432,  362,   -1,
   -1,   -1, 1333,   -1,   -1,  369,   -1,  364,   -1,   -1,
   -1, 1342,  369,   -1,   -1,  372,   -1,  374,  375,   -1,
   -1,   -1,  379,  380,   -1, 1356,  383,  384,  385,  386,
  387,  388,  389,  390,  391,   -1,  393,  394,  395,  396,
  397,  398,  399,  400,  401,  402,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  419,  413,  414,   -1,   -1,
   -1,   -1,   -1,   -1,  421,   -1,   -1,  424,  835,   -1,
   -1,   -1,   -1,  430,   -1,   -1,   -1,   -1,   -1, 1103,
   -1,   -1,   -1,   -1,   -1,   -1, 1417, 1418, 1419,   -1,
   -1,   -1,   -1,   -1,   -1, 1426,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1, 1435, 1436,  541, 1438,   -1,   -1,
   -1,   -1,   -1, 1137,  257,   -1, 1140,   -1,  261, 1143,
   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,  272,
   -1,   -1, 1463,   -1,  277, 1466,   -1,   -1,  281,   -1,
   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,  301,  302,
   -1,   -1, 1186,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,   -1,   -1,  317, 1199,   -1,   -1,  321,   -1,
  323,   -1,  617,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  333,   -1,   -1,  336,   -1,  338,   -1,   -1,   -1,  342,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,   -1,   -1,  261,  262,   -1,   -1,   -1,   -1,  362,
 1244,   -1,   -1,   -1,   -1, 1249,  369,  370,   -1, 1253,
   -1,   -1,   -1,  668,  669,   -1,  284,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  297,
  298,  686,   -1,   -1,  302,   -1,   -1,  305, 1282,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,
   -1,   -1,   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,
  338,  339,    0,   -1,   -1,  343,  344,   -1,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,   -1,  362,  363,  364,   -1, 1342,   -1,
  368,  369,   -1,  371,  372,  373,  374,  375,  376,  377,
   -1,  379,  380,   -1,  382,  383,  384,  385,  386,  387,
  388,  389,  390,  391,   -1,  393,  394,  395,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,   -1,   -1,  417,
   -1,  419,  807,  421,   -1,   -1,  424,   -1,  256,  257,
   -1,   -1,  430,   -1,   -1,   -1,  264,  265,  266,  267,
  268,   -1,  270,  271, 1418,  273,  274,  275,  276,  277,
  278,  279,  280,   -1,   -1,   -1,   -1,  285,   -1,  287,
  288,  289,  290,  291,  292,   -1,   -1,  295,   -1,    0,
   -1,  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,   -1,  337,
   -1,   -1,  340,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,
  368,  369,   -1,   -1,  372,   -1,   -1,   -1,   -1,  377,
  378,  379,  380,  381,   -1,   -1,   -1,  385,   -1,  387,
   -1,   -1,   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  418,  419,  420,  421,   -1,  423,   -1,   -1,  256,  257,
   -1,   -1,  430,   -1,  989,   -1,  264,  265,  266,  267,
  268,   -1,  270,  271,   -1,  273,  274,  275,  276,  277,
  278,  279,   -1,    0,   -1,   -1,   -1,  285,   -1,  287,
  288,  289,  290,  291,  292,   -1,   -1,  295,   -1,   -1,
   -1,  299,  300,   -1,  302,  303,  304,   -1, 1033,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,   -1,  337,
   -1,   -1,  340,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,
  368,  369,   -1,   -1,  372,   -1,   -1,   -1,   -1,  377,
  378,  379,  380,  381,   -1,  256,   -1,  385,   -1,  387,
  261,  262,   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  284,    0,   -1,   -1,   -1,   -1,   -1,
  418,  419,  420,  421,   -1,  423,  297,  298,   -1,   -1,
   -1,  302,  430,   -1,  305,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,
  321,   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  333,   -1,   -1,  336,   -1,  338,  339,   -1,
   -1,   -1,  343,  344,   -1,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,  357,   -1,   -1,   -1,
   -1,  362,  363,   -1,   -1,   -1,   -1,  368,  369,  370,
  371,  372,  373,  374,  375,  376,  377,   -1,  379,  380,
   -1,   -1,  383,  384,  385,  386,  387,   -1,   -1,  390,
  391,   -1,   -1,   -1,  395,  396,  397,  398,  399,  400,
  401,  402,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,   -1,  414,  261,  262,  417,   -1,  419,   -1,
  421,   -1,   -1,  424,   -1,   -1,   -1,   -1,   -1,  430,
   -1,    0,   -1,   -1,   -1,   -1,   -1,  284,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  297,  298,   -1,   -1,   -1,  302,   -1,   -1,  305,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,
  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,  325,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,
   -1,  338,  339,   -1,   -1,   -1,  343,  344,   -1,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,   -1,   -1,  362,  363,   -1,   -1,   -1,
   -1,  368,  369,  370,  371,  372,  373,   -1,  375,  376,
  377,   -1,  379,  380,   -1,   -1,  383,  384,  385,  386,
  256,   -1,   -1,  390,  391,  261,  262,   -1,  395,  396,
  397,  398,  399,  400,  401,  402,    0,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  414,  284,   -1,
  417,   -1,  419,   -1,  421,   -1,   -1,  424,   -1,   -1,
   -1,  297,  298,  430,   -1,   -1,  302,   -1,   -1,  305,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,
   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,  325,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,
  336,   -1,  338,  339,   -1,   -1,   -1,  343,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,   -1,  362,  363,   -1,   -1,
   -1,   -1,  368,  369,  370,  371,  372,  373,   -1,  375,
  376,  377,   -1,  379,  380,   -1,   -1,  383,  384,  385,
  386,   -1,   -1,   -1,  390,  391,   -1,   -1,   -1,  395,
  396,  397,  398,  399,  400,  401,  402,  256,   -1,   -1,
   -1,   -1,  261,  262,   -1,   -1,   -1,   -1,  414,   -1,
   -1,  417,   -1,  419,    0,  421,   -1,   -1,  424,   -1,
   -1,   -1,   -1,   -1,  430,  284,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  297,  298,
   -1,   -1,   -1,  302,   -1,   -1,  305,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,
   -1,   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,
  339,   -1,   -1,   -1,  343,  344,   -1,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,   -1,  362,  363,   -1,   -1,   -1,   -1,  368,
  369,   -1,  371,  372,  373,   -1,  375,  376,  377,   -1,
  379,  380,  256,   -1,  383,  384,  385,  386,  262,   -1,
   -1,  390,  391,   -1,   -1,   -1,  395,  396,  397,  398,
  399,  400,  401,  402,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  414,   -1,   -1,  417,   -1,
  419,   -1,   -1,   -1,  298,   -1,   -1,   -1,   -1,   -1,
   -1,  430,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,  343,
  344,   -1,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,  357,   -1,   -1,   -1,   -1,  256,  363,
   -1,   -1,   -1,   -1,  368,  369,  370,  371,  372,  373,
  374,  375,  376,  377,   -1,  379,  380,   -1,   -1,  383,
  384,  385,  386,  387,   -1,   -1,  390,  391,   -1,   -1,
   -1,  395,  396,  397,  398,  399,  400,  401,  402,   -1,
  256,   -1,   -1,   -1,   -1,    0,  262,   -1,   -1,   -1,
  414,   -1,   -1,  417,   -1,  419,   -1,  421,   -1,   -1,
  424,   -1,   -1,   -1,   -1,   -1,  430,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  339,  298,   -1,   -1,   -1,  344,   -1,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  369,   -1,  371,   -1,  373,    0,  375,  376,  377,
   -1,   -1,   -1,  339,   -1,   -1,   -1,  343,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,  363,   -1,   -1,
   -1,   -1,  368,  369,  370,  371,  372,  373,   -1,  375,
  376,  377,   -1,  379,  380,   -1,   -1,  383,  384,  385,
  386,   -1,  430,   -1,  390,  391,   -1,   -1,   -1,  395,
  396,  397,  398,  399,  400,  401,  402,    0,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  414,   -1,
   -1,  417,   -1,  419,   -1,  421,  256,  257,  424,   -1,
   -1,  261,   -1,   -1,  430,  265,   -1,  267,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,   -1,  277,   -1,  279,
    0,  281,  282,  283,  284,   -1,   -1,  287,  288,   -1,
   -1,   -1,   -1,  293,   -1,  295,  296,  297,   -1,   -1,
  300,  301,  302,   -1,  304,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,   -1,
   -1,  321,  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,
  330,  331,   -1,  333,  334,   -1,  336,  337,  338,   -1,
   -1,   -1,  342,    0,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,   -1,   -1,   -1,  261,   -1,   -1,   -1,
   -1,   -1,  362,   -1,   -1,   -1,   -1,  272,  368,  369,
  370,   -1,  277,   -1,   -1,   -1,  281,   -1,  378,  284,
   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,
   -1,  296,  297,   -1,   -1,   -1,  301,  302,   -1,   -1,
   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,  323,  419,
   -1,   -1,   -1,  257,   -1,   -1,   -1,  261,  333,    0,
   -1,  336,   -1,  338,   -1,   -1,   -1,  342,  272,   -1,
   -1,   -1,   -1,  277,   -1,   -1,   -1,  281,   -1,   -1,
  284,   -1,   -1,   -1,   -1,   -1,   -1,  362,   -1,   -1,
   -1,   -1,  296,  297,  369,  370,   -1,  301,  302,   -1,
   -1,   -1,    0,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,  323,
   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,  261,  333,
   -1,   -1,  336,   -1,  338,   -1,   -1,   -1,  342,  272,
   -1,   -1,   -1,   -1,  277,   -1,   -1,   -1,  281,   -1,
   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,  362,   -1,
   -1,   -1,   -1,  296,  297,   -1,  370,  257,  301,  302,
   -1,  261,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,  272,   -1,  317,   -1,   -1,  277,  321,   -1,
  323,  281,   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,
  333,   -1,   -1,  336,   -1,  338,  296,  297,   -1,  342,
   -1,  301,  302,   -1,   -1,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,  362,
  257,  321,   -1,  323,  261,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  333,   -1,  272,  336,   -1,  338,   -1,
  277,   -1,  342,   -1,  281,   -1,   -1,  284,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,
  297,   -1,  362,  257,  301,  302,   -1,  261,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,  272,   -1,
  317,   -1,   -1,  277,  321,   -1,  323,  281,   -1,   -1,
  284,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,
   -1,  338,  296,  297,   -1,  342,  257,  301,  302,   -1,
  261,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,  272,   -1,  317,   -1,  362,  277,  321,   -1,  323,
  281,   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,  333,
   -1,   -1,  336,   -1,  338,  296,  297,   -1,  342,  257,
  301,  302,   -1,  261,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,  272,   -1,  317,   -1,  362,  277,
  321,   -1,  323,  281,   -1,   -1,  284,   -1,   -1,   -1,
   -1,   -1,  333,   -1,   -1,  336,   -1,  338,  296,  297,
   -1,  342,   -1,  301,  302,   -1,   -1,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,
   -1,  362,   -1,  321,   -1,  323,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  333,   -1,  256,  336,   -1,
  338,   -1,   -1,   -1,  342,  264,  265,  266,  267,   -1,
   -1,  270,  271,   -1,  273,  274,  275,  276,  277,  278,
  279,   -1,   -1,   -1,  362,   -1,  285,   -1,  287,  288,
  289,  290,  291,  292,   -1,   -1,  295,   -1,   -1,   -1,
  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,   -1,  337,   -1,
   -1,  340,  341,   -1,   -1,  344,  345,  256,   -1,   -1,
   -1,  261,   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,
  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,  368,
   -1,   -1,   -1,  372,  284,   -1,   -1,   -1,  377,  378,
  379,  380,  381,   -1,   -1,   -1,  385,  297,  387,  298,
   -1,   -1,  302,   -1,  393,  394,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,
   -1,  321,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  418,
  419,  420,  421,  333,   -1,   -1,  336,   -1,  338,   -1,
  339,  430,   -1,   -1,   -1,  344,  256,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,  357,   -1,
   -1,   -1,  362,   -1,  363,  364,   -1,   -1,   -1,  368,
  369,  370,  371,  372,  373,  374,  375,  376,  377,   -1,
  379,  380,   -1,  382,  383,  384,  385,  386,  387,  388,
  389,  390,  391,   -1,  393,  394,  395,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,  414,  415,   -1,  256,  419,
  419,   -1,  421,  422,  262,  424,   -1,   -1,   -1,  339,
   -1,  430,   -1,   -1,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  369,
  298,  371,   -1,  373,   -1,  375,  376,  377,   -1,   -1,
   -1,   -1,   -1,  383,  384,  385,  386,   -1,   -1,   -1,
  390,  391,   -1,   -1,   -1,  395,  396,  397,  398,  399,
  400,  401,  402,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,  414,   -1,  344,   -1,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
  430,   -1,   -1,   -1,   -1,  363,  364,   -1,   -1,   -1,
  368,  369,  370,  371,  372,  373,  374,  375,  376,  377,
   -1,  379,  380,   -1,  382,  383,  384,  385,  386,  387,
  388,  389,  390,  391,   -1,  393,  394,  395,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  415,  256,  256,
   -1,  419,   -1,  421,  262,   -1,  424,   -1,  265,   -1,
  267,   -1,  430,  270,   -1,   -1,   -1,   -1,  275,   -1,
   -1,   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
  298,   -1,   -1,  300,   -1,   -1,   -1,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,
  337,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
   -1,   -1,   -1,   -1,   -1,  363,  364,   -1,   -1,   -1,
  368,  369,  370,  371,  372,  373,  374,  375,  376,  377,
   -1,  379,  380,   -1,  382,  383,  384,  385,  386,  387,
  388,  389,  390,  391,   -1,  393,  394,  395,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,   -1,  256,  256,
   -1,  419,  419,  421,  262,   -1,  424,   -1,  265,   -1,
  267,   -1,  430,  270,   -1,   -1,   -1,   -1,  275,   -1,
   -1,   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
  298,   -1,   -1,  300,   -1,   -1,   -1,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,
  337,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
   -1,   -1,   -1,   -1,   -1,  363,  364,   -1,   -1,   -1,
   -1,  369,  370,  371,  372,  373,  374,  375,  376,  377,
   -1,  379,  380,   -1,  382,  383,  384,  385,  386,  387,
  388,  389,  390,  391,   -1,  393,  394,  395,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,   -1,  256,  256,
   -1,  419,  419,  421,  262,   -1,  424,   -1,  265,   -1,
  267,   -1,  430,  270,   -1,   -1,   -1,   -1,  275,   -1,
   -1,   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
  298,   -1,   -1,  300,   -1,   -1,   -1,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,
  337,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  364,   -1,   -1,   -1,
  368,  369,  370,  371,  372,  373,  374,  375,  376,  377,
   -1,  379,  380,   -1,  382,  383,  384,  385,  386,  387,
  388,  389,  390,  391,   -1,  393,  394,  395,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  256,  256,   -1,
   -1,   -1,  419,  421,  262,   -1,  265,   -1,  267,   -1,
   -1,  270,  430,   -1,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
  298,  300,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  330,  331,   -1,   -1,  334,   -1,   -1,  337,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  364,   -1,   -1,   -1,
  368,  369,   -1,  371,  372,  373,  374,  375,  376,  377,
   -1,  379,  380,   -1,  382,  383,  384,  385,  386,  387,
  388,  389,  390,  391,   -1,  393,  394,  395,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,   -1,  256,  256,
  419,   -1,   -1,  421,  262,   -1,  424,   -1,  265,   -1,
  267,   -1,  430,  270,   -1,   -1,   -1,   -1,  275,   -1,
   -1,   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
  298,   -1,   -1,  300,   -1,   -1,   -1,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,
  337,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  364,   -1,   -1,   -1,
   -1,  369,   -1,  371,  372,  373,  374,  375,  376,  377,
   -1,  379,  380,   -1,  382,  383,  384,  385,  386,  387,
  388,  389,  390,  391,   -1,  393,  394,  395,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,   -1,  256,   -1,
   -1,  261,  419,  421,  262,   -1,  424,   -1,   -1,   -1,
   -1,   -1,  430,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  297,   -1,   -1,
  298,   -1,  302,   -1,   -1,  305,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,
   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,  362,   -1,   -1,   -1,  364,   -1,   -1,  369,
   -1,  369,   -1,  371,  372,  373,  374,  375,  376,  377,
   -1,  379,  380,   -1,  382,  383,  384,  385,  386,  387,
  388,  389,  390,  391,   -1,  393,  394,  395,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,   -1,  256,  419,
   -1,  261,   -1,  421,  262,   -1,  424,   -1,   -1,   -1,
   -1,   -1,  430,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  297,   -1,   -1,
  298,   -1,  302,   -1,   -1,  305,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,
   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,  362,   -1,   -1,   -1,  364,   -1,   -1,  369,
   -1,  369,   -1,  371,  372,  373,  374,  375,  376,  377,
   -1,  379,  380,   -1,  382,  383,  384,  385,  386,  387,
  388,  389,  390,  391,   -1,  393,  394,  395,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,   -1,  256,  419,
   -1,   -1,   -1,  421,  262,   -1,  424,   -1,  266,   -1,
   -1,  265,  430,  267,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,   -1,  277,   -1,  279,   -1,  281,  282,  283,
   -1,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,  293,
  298,  295,  296,   -1,   -1,   -1,  300,   -1,   -1,   -1,
  304,   -1,   -1,   -1,   -1,   -1,  314,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,   -1,   -1,   -1,  322,  323,
   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,   -1,
  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,  342,   -1,
   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,  262,  357,
   -1,   -1,   -1,   -1,   -1,  363,  364,   -1,   -1,   -1,
   -1,  369,  370,  371,  372,  373,  374,  375,  376,  377,
   -1,  379,  380,   -1,  382,  383,  384,  385,  386,  387,
  388,  389,  390,  391,  298,  393,  394,  395,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,   -1,   -1,   -1,
   -1,  419,   -1,  421,   -1,  419,  424,   -1,   -1,   -1,
   -1,   -1,  430,   -1,   -1,  339,   -1,  256,   -1,   -1,
  344,   -1,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  369,   -1,  371,   -1,  373,
   -1,  375,  376,  377,   -1,  379,  380,   -1,  382,  383,
  384,  385,  386,  387,  388,  389,  390,  391,   -1,   -1,
   -1,  395,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  256,
  414,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  344,  430,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  369,  298,  371,   -1,  373,   -1,  375,  376,  377,   -1,
   -1,   -1,   -1,   -1,  383,  384,  385,  386,  256,   -1,
   -1,  390,  391,   -1,  262,   -1,  395,  396,  397,  398,
  399,  400,  401,  402,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,  414,   -1,  344,   -1,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
  298,  430,   -1,   -1,   -1,   -1,  363,  364,   -1,   -1,
   -1,   -1,  369,  370,  371,   -1,  373,  374,  375,  376,
  377,   -1,  379,  380,   -1,   -1,  383,  384,  385,  386,
   -1,   -1,   -1,  390,  391,   -1,  393,  394,  395,  396,
  397,  398,  399,  400,  401,  402,   -1,  256,   -1,   -1,
   -1,   -1,   -1,  262,   -1,   -1,  413,  414,   -1,   -1,
   -1,   -1,  419,   -1,  421,  363,  364,  424,   -1,   -1,
   -1,  369,  370,  430,  372,  373,  374,  375,   -1,  377,
   -1,  379,  380,   -1,  382,  383,  384,  385,  386,  298,
  388,  389,  390,  391,   -1,  393,  394,  395,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,   -1,   -1,   -1,
   -1,  419,   -1,  421,   -1,   -1,  424,   -1,   -1,   -1,
  339,   -1,  430,   -1,   -1,  344,   -1,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,  256,   -1,   -1,  364,   -1,   -1,  262,   -1,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,   -1,
  379,  380,   -1,   -1,  383,  384,  385,  386,   -1,   -1,
   -1,  390,  391,   -1,  393,  394,  395,  396,  397,  398,
  399,  400,  401,  402,  298,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  413,  414,   -1,   -1,   -1,   -1,
   -1,   -1,  421,   -1,   -1,  424,   -1,   -1,   -1,   -1,
   -1,  430,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,   -1,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,   -1,  256,   -1,   -1,
  364,   -1,   -1,  262,   -1,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,   -1,  379,  380,   -1,   -1,  383,
  384,  385,  386,   -1,   -1,   -1,  390,  391,   -1,  393,
  394,  395,  396,  397,  398,  399,  400,  401,  402,  298,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  413,
  414,   -1,   -1,   -1,   -1,   -1,   -1,  421,   -1,   -1,
  424,   -1,   -1,   -1,   -1,   -1,  430,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,  256,   -1,   -1,  364,   -1,   -1,  262,   -1,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,   -1,
  379,  380,   -1,   -1,  383,  384,  385,  386,   -1,   -1,
   -1,  390,  391,   -1,  393,  394,  395,  396,  397,  398,
  399,  400,  401,  402,  298,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  413,  414,   -1,   -1,   -1,   -1,
   -1,   -1,  421,   -1,   -1,  424,   -1,   -1,   -1,   -1,
   -1,  430,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,   -1,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,   -1,  256,   -1,  363,
   -1,   -1,   -1,  262,   -1,  369,  370,  371,   -1,  373,
   -1,  375,  376,  377,   -1,  379,  380,   -1,   -1,  383,
  384,  385,  386,   -1,   -1,   -1,  390,  391,   -1,   -1,
   -1,  395,  396,  397,  398,  399,  400,  401,  402,  298,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  414,   -1,   -1,   -1,   -1,  419,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  430,   -1,   -1,  256,
   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  369,  298,  371,   -1,  373,   -1,  375,  376,  377,   -1,
  379,  380,   -1,   -1,  383,  384,  385,  386,  387,  388,
  389,  390,  391,   -1,   -1,   -1,  395,  396,  397,  398,
  399,  400,  401,  402,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,  414,   -1,  344,   -1,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,  430,   -1,   -1,  256,   -1,  363,   -1,   -1,   -1,
  262,   -1,  369,   -1,  371,   -1,  373,   -1,  375,  376,
  377,   -1,  379,  380,   -1,   -1,  383,  384,  385,  386,
   -1,   -1,   -1,  390,  391,   -1,   -1,   -1,  395,  396,
  397,  398,  399,  400,  401,  402,  298,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  414,   -1,   -1,
   -1,   -1,  419,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  430,   -1,   -1,  256,   -1,   -1,   -1,
   -1,   -1,  262,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  369,  298,  371,
   -1,  373,   -1,  375,  376,  377,   -1,  379,  380,   -1,
   -1,  383,  384,  385,  386,   -1,   -1,   -1,  390,  391,
   -1,   -1,   -1,  395,  396,  397,  398,  399,  400,  401,
  402,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,  414,   -1,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,  430,   -1,
   -1,  256,   -1,   -1,   -1,   -1,   -1,  262,   -1,  369,
   -1,  371,   -1,  373,   -1,  375,  376,  377,   -1,  379,
  380,   -1,   -1,  383,  384,  385,  386,   -1,   -1,   -1,
  390,  391,   -1,   -1,   -1,  395,  396,  397,  398,  399,
  400,  401,  402,  298,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  414,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  430,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,  262,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,
   -1,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  369,  298,  371,   -1,  373,   -1,
  375,  376,  377,   -1,  379,  380,   -1,   -1,  383,  384,
  385,  386,   -1,   -1,   -1,  390,  391,   -1,   -1,   -1,
  395,  396,  397,  398,  399,  400,  401,  402,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,  414,
   -1,  344,   -1,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,  430,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  369,   -1,  371,   -1,
  373,   -1,  375,  376,  377,   -1,  379,  380,   -1,   -1,
  383,  384,  385,  386,   -1,   -1,   -1,  390,  391,   -1,
   -1,   -1,  395,  396,  397,  398,  399,  400,  401,  402,
   -1,  256,   -1,  256,   -1,   -1,   -1,   -1,   -1,  264,
  265,  414,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,  430,   -1,   -1,
  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,
   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,  256,   -1,
   -1,  344,   -1,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,  359,  360,  361,  362,  363,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  369,  372,  371,   -1,
  373,   -1,  375,  376,  377,   -1,   -1,   -1,   -1,   -1,
  383,  384,  385,  386,   -1,   -1,   -1,  390,  391,   -1,
   -1,   -1,  395,  396,  397,  398,  399,  400,  401,  402,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,  414,   -1,  418,  419,   -1,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,  429,  430,  344,  430,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  369,   -1,  371,   -1,  373,   -1,  375,  376,  377,
   -1,   -1,   -1,   -1,   -1,  383,  384,  385,  386,   -1,
   -1,   -1,  390,  391,   -1,   -1,  256,   -1,   -1,  397,
  398,  399,  400,  401,  402,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  344,  414,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,  430,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  369,   -1,  371,   -1,  373,   -1,  375,  376,  377,   -1,
   -1,   -1,   -1,   -1,  383,  384,  385,  386,   -1,   -1,
   -1,  390,  391,   -1,   -1,  256,   -1,   -1,  397,  398,
  399,  400,  401,  402,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,  414,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,  430,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  369,
   -1,  371,   -1,  373,   -1,  375,  376,  377,   -1,   -1,
   -1,   -1,   -1,  383,  384,  385,  386,   -1,   -1,   -1,
  390,  391,   -1,   -1,  256,   -1,   -1,  397,  398,  399,
  400,  401,  402,   -1,   -1,   -1,   -1,   -1,  339,   -1,
   -1,   -1,   -1,  344,  414,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,
  430,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  369,   -1,
  371,   -1,  373,   -1,  375,  376,  377,   -1,   -1,   -1,
   -1,   -1,  383,  384,  385,  386,   -1,   -1,   -1,  390,
  391,   -1,   -1,  256,   -1,   -1,  397,  398,  399,  400,
  401,  402,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  414,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,  430,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  369,   -1,  371,
   -1,  373,   -1,  375,  376,  377,   -1,   -1,   -1,   -1,
   -1,  383,  384,  385,  386,   -1,   -1,   -1,  390,  391,
   -1,   -1,  256,   -1,   -1,  397,  398,  399,  400,  401,
  402,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  344,  414,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,   -1,   -1,  430,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  369,   -1,  371,   -1,
  373,   -1,  375,  376,  377,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  385,  386,   -1,   -1,   -1,  390,  391,   -1,
   -1,  256,   -1,   -1,   -1,   -1,  399,  400,  401,  402,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  414,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,   -1,  430,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  369,   -1,  371,   -1,  373,
   -1,  375,  376,  377,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  385,  386,   -1,   -1,   -1,  390,  391,   -1,   -1,
  256,   -1,   -1,   -1,   -1,  399,  400,  401,  402,   -1,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,
  414,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,   -1,  430,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  369,   -1,  371,   -1,  373,   -1,
  375,  376,  377,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  385,  386,   -1,   -1,   -1,  390,  391,   -1,   -1,  256,
   -1,   -1,   -1,   -1,   -1,   -1,  401,  402,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  414,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,  430,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  369,   -1,  371,   -1,  373,   -1,  375,
  376,  377,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  385,
  386,   -1,   -1,   -1,  390,  391,   -1,   -1,  256,   -1,
   -1,   -1,   -1,   -1,   -1,  401,  402,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  414,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,   -1,  430,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  369,   -1,  371,   -1,  373,   -1,  375,  376,
  377,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  386,
   -1,   -1,   -1,  390,  391,   -1,   -1,  256,   -1,   -1,
   -1,   -1,   -1,   -1,  401,  402,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  414,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,  430,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  369,   -1,  371,   -1,  373,   -1,  375,  376,  377,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  386,   -1,
   -1,   -1,   -1,  391,   -1,   -1,  256,   -1,   -1,   -1,
   -1,   -1,   -1,  401,  402,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  344,  414,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,  430,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  369,   -1,  371,   -1,  373,   -1,  375,  376,  377,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  386,   -1,   -1,
   -1,   -1,  391,   -1,   -1,  256,   -1,   -1,   -1,   -1,
   -1,   -1,  401,  402,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,  414,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,  430,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  369,
   -1,  371,   -1,  373,   -1,  375,  376,  377,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  391,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,
   -1,  401,  402,   -1,   -1,   -1,   -1,   -1,  339,   -1,
   -1,   -1,   -1,  344,  414,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,
  430,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  369,   -1,
  371,   -1,  373,   -1,  375,  376,  377,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  391,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,
  401,  402,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  414,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,  430,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  369,   -1,  371,
   -1,  373,   -1,  375,  376,  377,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  391,
   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  402,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  344,  414,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,   -1,   -1,  430,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  369,   -1,  371,   -1,
  373,   -1,  375,  376,  377,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  391,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  402,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  414,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,   -1,  430,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  369,   -1,  371,   -1,  373,
   -1,  375,  376,  377,  256,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  264,  265,  266,  267,  268,  391,  270,  271,
   -1,  273,  274,  275,  276,  277,  278,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,  287,  288,  289,  290,  291,
  292,   -1,   -1,  295,   -1,   -1,   -1,  299,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,  430,   -1,   -1,   -1,
   -1,   -1,  314,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,   -1,  337,   -1,   -1,  340,  341,
   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,   -1,   -1,  368,   -1,   -1,   -1,
  372,   -1,   -1,   -1,   -1,  377,  378,  379,  380,  381,
   -1,   -1,   -1,  385,   -1,  387,   -1,   -1,   -1,   -1,
   -1,  393,  394,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,  418,  419,  420,  421,
   -1,  423,  264,  265,  266,  267,   -1,   -1,  270,  271,
   -1,  273,  274,  275,  276,  277,  278,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,  287,  288,  289,  290,  291,
  292,   -1,   -1,  295,   -1,   -1,   -1,  299,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  314,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,   -1,  337,   -1,   -1,  340,  341,
   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,   -1,   -1,  368,   -1,   -1,   -1,
  372,   -1,   -1,   -1,   -1,  377,  378,  379,  380,  381,
   -1,   -1,   -1,  385,   -1,  387,   -1,   -1,   -1,   -1,
   -1,  393,  394,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,   -1,   -1,   -1,  418,  419,  420,  421,
  264,  265,  266,  267,   -1,   -1,  270,  271,   -1,  273,
  274,  275,  276,  277,  278,  279,   -1,   -1,   -1,   -1,
   -1,  285,   -1,  287,  288,  289,  290,  291,  292,   -1,
   -1,  295,   -1,   -1,   -1,  299,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  314,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,   -1,  337,   -1,   -1,  340,  341,   -1,   -1,
  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,
   -1,   -1,   -1,   -1,  368,   -1,   -1,   -1,  372,   -1,
   -1,   -1,   -1,  377,  378,  379,  380,  381,   -1,   -1,
   -1,  385,   -1,  387,   -1,   -1,   -1,   -1,   -1,  393,
  394,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,   -1,   -1,   -1,  418,  419,  420,  421,  264,  265,
  266,  267,   -1,   -1,  270,  271,   -1,  273,  274,  275,
  276,  277,  278,  279,   -1,   -1,   -1,   -1,   -1,  285,
   -1,  287,  288,  289,  290,  291,  292,   -1,   -1,  295,
   -1,   -1,   -1,  299,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
   -1,  337,   -1,   -1,  340,  341,   -1,   -1,  344,  345,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,
   -1,   -1,  368,   -1,   -1,   -1,  372,   -1,   -1,   -1,
   -1,  377,  378,  379,  380,  381,   -1,   -1,   -1,  385,
   -1,  387,   -1,   -1,   -1,   -1,   -1,  393,  394,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,   -1,  418,  419,  420,  421,  264,  265,  266,  267,
   -1,   -1,  270,  271,   -1,  273,  274,  275,  276,  277,
  278,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,  287,
  288,  289,  290,  291,  292,   -1,   -1,  295,   -1,   -1,
   -1,  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,   -1,  337,
   -1,   -1,  340,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,
  368,   -1,   -1,   -1,  372,   -1,   -1,   -1,   -1,  377,
  378,  379,  380,  381,   -1,   -1,   -1,  385,   -1,  387,
   -1,   -1,   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,
  418,  419,  420,  421,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,  265,   -1,  267,  285,   -1,  270,  288,   -1,
   -1,   -1,  275,   -1,   -1,  295,  279,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,  288,  306,   -1,   -1,   -1,
   -1,   -1,  295,  313,   -1,   -1,  316,  300,  318,  319,
   -1,  304,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,  316,  334,  318,   -1,   -1,   -1,  322,
   -1,  341,   -1,   -1,  344,  345,   -1,  330,  331,   -1,
   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  372,   -1,   -1,  375,   -1,   -1,  378,  379,
  380,  381,   -1,   -1,   -1,  385,   -1,  387,   -1,   -1,
  373,   -1,   -1,  393,  394,   -1,   -1,   -1,   -1,   -1,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,  418,  419,
  420,  421,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,  419,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,
   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,   -1,   -1,  368,  369,   -1,   -1,  372,
   -1,   -1,   -1,   -1,   -1,  378,  379,  380,  381,   -1,
   -1,   -1,  385,   -1,  387,   -1,   -1,   -1,   -1,   -1,
  393,  394,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,  418,  419,  420,  421,  285,
   -1,  424,  288,   -1,   -1,   -1,  429,   -1,   -1,  295,
   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,
   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,  345,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,
   -1,   -1,  368,   -1,   -1,   -1,  372,   -1,   -1,   -1,
   -1,   -1,  378,  379,  380,  381,   -1,   -1,   -1,  385,
   -1,  387,   -1,   -1,   -1,   -1,   -1,  393,  394,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,  418,  419,  420,  421,   -1,   -1,  424,  264,
  265,   -1,  267,  429,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,  265,   -1,  267,
  285,   -1,  270,  288,   -1,   -1,   -1,  275,   -1,   -1,
  295,  279,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,  316,  300,  318,  319,   -1,  304,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,  316,  334,
  318,   -1,   -1,   -1,  322,   -1,  341,   -1,   -1,  344,
  345,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,  337,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,   -1,   -1,  368,  369,   -1,   -1,  372,   -1,   -1,
   -1,   -1,   -1,  378,  379,  380,  381,   -1,   -1,   -1,
  385,   -1,  387,  371,   -1,   -1,   -1,   -1,  393,  394,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,   -1,  418,  419,  420,  421,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,  419,  279,   -1,   -1,  265,   -1,  267,  285,   -1,
  270,  288,   -1,   -1,   -1,  275,   -1,   -1,  295,  279,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,  288,  306,
   -1,   -1,   -1,   -1,   -1,  295,  313,   -1,   -1,  316,
  300,  318,  319,   -1,  304,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,  316,  334,  318,   -1,
   -1,   -1,  322,   -1,  341,   -1,   -1,  344,  345,   -1,
  330,  331,   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  372,   -1,   -1,   -1,   -1,
   -1,  378,  379,  380,  381,   -1,   -1,   -1,  385,   -1,
  387,   -1,   -1,   -1,   -1,   -1,  393,  394,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,  418,  419,  420,  421,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,  419,
  279,   -1,   -1,  265,   -1,  267,  285,   -1,  270,  288,
   -1,   -1,   -1,  275,   -1,   -1,  295,  279,   -1,   -1,
   -1,  300,   -1,  302,  303,  304,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,  316,  300,  318,
  319,  320,  304,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,  316,  334,  318,   -1,   -1,   -1,
  322,   -1,  341,   -1,   -1,  344,  345,   -1,  330,  331,
   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,
  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,  368,
   -1,   -1,   -1,  372,   -1,   -1,   -1,   -1,   -1,  378,
  379,  380,  381,   -1,   -1,   -1,  385,   -1,  387,   -1,
   -1,   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  418,
  419,  420,  421,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,  419,  279,   -1,
   -1,  265,   -1,  267,  285,   -1,  270,  288,   -1,   -1,
   -1,  275,   -1,   -1,  295,  279,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,  316,  300,  318,  319,   -1,
  304,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,  316,  334,  318,   -1,  337,   -1,  322,   -1,
  341,   -1,   -1,  344,  345,   -1,  330,  331,   -1,   -1,
  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  372,   -1,   -1,   -1,   -1,   -1,  378,  379,  380,
  381,   -1,   -1,   -1,  385,   -1,  387,   -1,   -1,   -1,
   -1,   -1,  393,  394,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,   -1,  418,  419,  420,
  421,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,  419,  279,   -1,   -1,   -1,
   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,
   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,   -1,   -1,  368,   -1,   -1,   -1,  372,
   -1,   -1,   -1,   -1,   -1,  378,  379,  380,  381,   -1,
   -1,   -1,  385,   -1,  387,   -1,   -1,   -1,   -1,   -1,
  393,  394,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,  418,  419,  420,  421,  262,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,  298,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  343,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,
   -1,  374,   -1,   -1,   -1,  378,  379,  380,  381,  382,
   -1,   -1,  385,   -1,  387,  256,   -1,   -1,   -1,   -1,
  393,  394,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
   -1,   -1,   -1,   -1,  285,  418,  419,  288,  421,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,   -1,   -1,  369,   -1,
   -1,  372,   -1,   -1,   -1,   -1,   -1,  378,  379,  380,
  381,   -1,   -1,   -1,  385,   -1,  387,   -1,   -1,   -1,
   -1,   -1,  393,  394,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,   -1,  418,  419,  420,
  421,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,  265,
   -1,  267,  285,   -1,  270,  288,   -1,   -1,   -1,  275,
   -1,   -1,  295,  279,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,  316,  300,  318,  319,   -1,  304,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
  316,  334,  318,   -1,   -1,   -1,  322,   -1,  341,   -1,
   -1,  344,  345,   -1,  330,  331,   -1,   -1,  334,   -1,
   -1,  337,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,   -1,   -1,   -1,  369,   -1,   -1,  372,
   -1,   -1,   -1,   -1,   -1,  378,  379,  380,  381,   -1,
   -1,   -1,  385,   -1,  387,   -1,   -1,   -1,   -1,   -1,
  393,  394,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,   -1,  418,  419,  420,  421,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,  419,  279,   -1,   -1,  265,   -1,  267,
  285,   -1,  270,  288,   -1,   -1,   -1,  275,   -1,   -1,
  295,  279,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,  316,  300,  318,  319,   -1,  304,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,  316,  334,
  318,   -1,   -1,   -1,  322,   -1,  341,   -1,   -1,  344,
  345,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,  337,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,   -1,   -1,
   -1,   -1,   -1,  378,  379,  380,  381,   -1,   -1,   -1,
  385,   -1,  387,   -1,   -1,   -1,   -1,   -1,  393,  394,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,   -1,  418,  419,  420,  421,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,  419,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,
   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,  345,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  372,   -1,   -1,   -1,   -1,
   -1,  378,  379,  380,  381,   -1,   -1,   -1,  385,   -1,
  387,   -1,   -1,   -1,   -1,   -1,  393,  394,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,  418,  419,  420,  421,  262,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,
   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,  298,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  343,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  372,   -1,  374,   -1,   -1,
   -1,  378,  379,  380,  381,   -1,   -1,   -1,  385,   -1,
  387,  256,   -1,   -1,   -1,   -1,  393,  394,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,
  285,  418,  419,  288,  421,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,
   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,
  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,   -1,   -1,
   -1,   -1,   -1,  378,  379,  380,  381,   -1,   -1,   -1,
  385,   -1,  387,   -1,   -1,   -1,   -1,   -1,  393,  394,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,   -1,  418,  419,  420,  421,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,   -1,  279,   -1,   -1,  265,   -1,  267,  285,   -1,
  270,  288,   -1,   -1,   -1,  275,   -1,   -1,  295,  279,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,  316,
  300,  318,  319,   -1,  304,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,  316,  334,  318,   -1,
   -1,   -1,  322,   -1,  341,   -1,   -1,  344,  345,   -1,
  330,  331,   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  372,   -1,   -1,   -1,   -1,
   -1,  378,  379,  380,  381,   -1,   -1,   -1,  385,   -1,
  387,   -1,   -1,   -1,   -1,   -1,  393,  394,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,  418,  419,  420,  421,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,  419,
  279,   -1,   -1,  265,   -1,  267,  285,   -1,  270,  288,
   -1,   -1,   -1,  275,   -1,   -1,  295,  279,   -1,   -1,
   -1,  300,   -1,  302,  303,  304,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,  316,  300,  318,
  319,   -1,  304,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,  316,  334,  318,   -1,   -1,   -1,
  322,   -1,  341,   -1,   -1,  344,  345,   -1,  330,  331,
   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,
  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  372,   -1,   -1,   -1,   -1,   -1,  378,
  379,  380,  381,   -1,   -1,   -1,  385,   -1,  387,   -1,
   -1,   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  418,
  419,  420,  421,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,  419,  279,   -1,
   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  372,   -1,   -1,   -1,   -1,   -1,  378,  379,  380,
  381,   -1,   -1,   -1,  385,   -1,  387,   -1,   -1,   -1,
   -1,   -1,  393,  394,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  298,  256,   -1,  418,  419,  420,
  421,  262,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
   -1,   -1,   -1,  327,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,  298,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,  378,  379,  380,  381,   -1,  383,
  384,  385,  386,  387,  388,  389,  390,   -1,   -1,  393,
  394,  395,  396,  397,  398,  399,  400,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  372,   -1,  374,   -1,   -1,   -1,  378,  379,  380,
  381,   -1,   -1,   -1,  385,   -1,  387,  256,   -1,   -1,
   -1,   -1,  393,  394,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,
  279,   -1,   -1,   -1,   -1,   -1,  285,  418,  419,  288,
  421,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  372,   -1,  374,   -1,   -1,   -1,  378,
  379,  380,  381,   -1,   -1,   -1,  385,   -1,  387,  256,
   -1,   -1,   -1,   -1,  393,  394,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  418,
  419,  288,  421,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  372,   -1,   -1,   -1,   -1,
   -1,  378,  379,  380,  381,   -1,   -1,   -1,  385,   -1,
  387,  256,   -1,   -1,   -1,   -1,  393,  394,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,
  285,  418,  419,  288,  421,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,   -1,   -1,
   -1,   -1,   -1,  378,  379,  380,  381,   -1,   -1,   -1,
  385,   -1,  387,  256,   -1,   -1,   -1,   -1,  393,  394,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  418,  419,  288,  421,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,
   -1,   -1,   -1,   -1,   -1,  378,  379,  380,  381,   -1,
   -1,   -1,  385,   -1,  387,  256,   -1,   -1,   -1,   -1,
  393,  394,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
   -1,   -1,   -1,   -1,  285,  418,  419,  288,  421,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  372,   -1,   -1,   -1,   -1,   -1,  378,  379,  380,
  381,   -1,   -1,   -1,  385,   -1,  387,  256,   -1,   -1,
   -1,   -1,  393,  394,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,
  279,   -1,   -1,   -1,   -1,   -1,  285,  418,  419,  288,
  421,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  372,   -1,   -1,   -1,   -1,   -1,  378,
  379,  380,  381,   -1,   -1,   -1,  385,   -1,  387,  256,
   -1,   -1,   -1,   -1,  393,  394,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  418,
  419,  288,  421,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  372,   -1,   -1,   -1,   -1,
   -1,  378,  379,  380,  381,   -1,   -1,   -1,  385,   -1,
  387,  256,   -1,   -1,   -1,   -1,  393,  394,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,
  285,  418,  419,  288,  421,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,   -1,   -1,
   -1,   -1,   -1,  378,  379,  380,  381,   -1,   -1,   -1,
  385,   -1,  387,  256,   -1,   -1,   -1,   -1,  393,  394,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  418,  419,  288,  421,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,
   -1,   -1,   -1,   -1,   -1,  378,  379,  380,  381,   -1,
   -1,   -1,  385,   -1,  387,  256,   -1,   -1,   -1,   -1,
  393,  394,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
   -1,   -1,   -1,   -1,  285,  418,  419,  288,  421,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  372,   -1,   -1,   -1,   -1,   -1,  378,  379,  380,
  381,   -1,   -1,   -1,  385,   -1,  387,  256,   -1,   -1,
   -1,   -1,  393,  394,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,
  279,   -1,   -1,   -1,   -1,   -1,  285,  418,  419,  288,
  421,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  372,   -1,   -1,   -1,   -1,   -1,  378,
  379,  380,  381,   -1,   -1,   -1,  385,   -1,  387,  256,
   -1,   -1,   -1,   -1,  393,  394,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  418,
  419,  288,  421,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  372,   -1,   -1,   -1,   -1,
   -1,  378,  379,  380,  381,   -1,   -1,   -1,  385,   -1,
  387,  256,   -1,   -1,   -1,   -1,  393,  394,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,
  285,  418,  419,  288,  421,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,   -1,   -1,
   -1,   -1,   -1,  378,  379,  380,  381,   -1,   -1,   -1,
  385,   -1,  387,  256,   -1,   -1,   -1,   -1,  393,  394,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  418,  419,  288,  421,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,
   -1,   -1,   -1,   -1,   -1,  378,  379,  380,  381,   -1,
   -1,   -1,  385,   -1,  387,  256,   -1,   -1,   -1,   -1,
  393,  394,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
   -1,   -1,   -1,   -1,  285,  418,  419,  288,  421,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  372,   -1,   -1,   -1,   -1,   -1,  378,  379,  380,
  381,   -1,   -1,   -1,  385,   -1,  387,  256,   -1,   -1,
   -1,   -1,  393,  394,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,
  279,   -1,   -1,   -1,   -1,   -1,  285,  418,  419,  288,
  421,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  372,   -1,   -1,   -1,   -1,   -1,  378,
  379,  380,  381,   -1,   -1,   -1,  385,   -1,  387,  256,
   -1,   -1,   -1,   -1,  393,  394,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  418,
  419,  288,  421,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  372,   -1,   -1,   -1,   -1,
   -1,  378,  379,  380,  381,   -1,   -1,   -1,  385,   -1,
  387,  256,   -1,   -1,   -1,   -1,  393,  394,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,
  285,  418,  419,  288,  421,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,   -1,   -1,
   -1,   -1,   -1,  378,  379,  380,  381,   -1,   -1,   -1,
  385,   -1,  387,  256,   -1,   -1,   -1,   -1,  393,  394,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  418,  419,  288,  421,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,
   -1,   -1,   -1,   -1,   -1,  378,  379,  380,  381,   -1,
   -1,   -1,  385,   -1,  387,  256,   -1,   -1,   -1,   -1,
  393,  394,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
   -1,   -1,   -1,   -1,  285,  418,  419,  288,  421,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  372,   -1,   -1,   -1,   -1,   -1,  378,  379,  380,
  381,   -1,   -1,   -1,  385,   -1,  387,  256,   -1,   -1,
   -1,   -1,  393,  394,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,
  279,   -1,   -1,   -1,   -1,   -1,  285,  418,  419,  288,
  421,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  372,   -1,   -1,   -1,   -1,   -1,  378,
  379,  380,  381,   -1,   -1,   -1,  385,   -1,  387,  256,
   -1,   -1,   -1,   -1,  393,  394,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  418,
  419,  288,  421,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  372,   -1,   -1,   -1,   -1,
   -1,  378,  379,  380,  381,   -1,   -1,   -1,  385,   -1,
  387,  256,   -1,   -1,   -1,   -1,  393,  394,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,
  285,  418,  419,  288,  421,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,   -1,   -1,
   -1,   -1,   -1,  378,  379,  380,  381,   -1,   -1,   -1,
  385,   -1,  387,  256,   -1,   -1,   -1,   -1,  393,  394,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  418,  419,  288,  421,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,
   -1,   -1,   -1,   -1,   -1,  378,  379,  380,  381,   -1,
   -1,   -1,  385,   -1,  387,  256,   -1,   -1,   -1,   -1,
  393,  394,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
   -1,   -1,   -1,   -1,  285,  418,  419,  288,  421,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  372,   -1,   -1,   -1,   -1,   -1,  378,  379,  380,
  381,   -1,   -1,   -1,  385,   -1,  387,  256,   -1,   -1,
   -1,   -1,  393,  394,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,
  279,   -1,   -1,   -1,   -1,   -1,  285,  418,  419,  288,
  421,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  372,   -1,   -1,   -1,   -1,   -1,  378,
  379,  380,  381,   -1,   -1,   -1,  385,   -1,  387,  256,
   -1,   -1,   -1,   -1,  393,  394,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  418,
  419,  288,  421,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  372,   -1,   -1,   -1,   -1,
   -1,  378,  379,  380,  381,   -1,   -1,   -1,  385,   -1,
  387,  256,   -1,   -1,   -1,   -1,  393,  394,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,
  285,  418,  419,  288,  421,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,   -1,   -1,
   -1,   -1,   -1,  378,  379,  380,  381,   -1,   -1,   -1,
  385,   -1,  387,  256,   -1,   -1,   -1,   -1,  393,  394,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  418,  419,  288,  421,   -1,   -1,  261,
   -1,  263,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  284,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,  297,  329,  330,  331,  332,
  302,  334,   -1,   -1,  337,  307,   -1,  309,  310,  311,
  312,   -1,   -1,  315,   -1,  317,   -1,   -1,   -1,  321,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,  333,   -1,   -1,  336,   -1,  338,   -1,   -1,  372,
   -1,   -1,   -1,   -1,   -1,   -1,  379,  380,   -1,   -1,
  256,   -1,   -1,   -1,  387,  261,   -1,   -1,   -1,  265,
  362,  267,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
   -1,  277,   -1,  279,   -1,  281,  282,  283,  284,   -1,
   -1,  287,  288,   -1,   -1,  418,  419,  293,  421,  295,
  296,  297,   -1,   -1,  300,   -1,  302,   -1,  304,   -1,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,
  316,  317,  318,   -1,   -1,  321,  322,  323,   -1,   -1,
   -1,   -1,   -1,   -1,  330,  331,   -1,  333,  334,  256,
  336,  337,  338,   -1,   -1,   -1,  342,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,   -1,  279,   -1,   -1,   -1,  362,   -1,  285,   -1,
   -1,  288,  368,  369,  370,   -1,   -1,   -1,  295,   -1,
   -1,   -1,  378,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,  261,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,  419,   -1,   -1,   -1,   -1,   -1,  298,
   -1,   -1,   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,  297,   -1,   -1,
   -1,  301,  302,   -1,   -1,  372,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,
   -1,  321,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,   -1,
   -1,   -1,   -1,   -1,   -1,  364,   -1,   -1,   -1,   -1,
   -1,  418,  419,  372,  373,  374,  375,  376,   -1,   -1,
  379,  380,  362,   -1,  383,  384,  385,  386,  387,  388,
  389,  390,  391,   -1,  393,  394,  395,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,  414,   -1,  261,   -1,  263,
   -1,  265,  421,  267,   -1,  424,  270,   -1,  272,  273,
   -1,  275,   -1,  277,   -1,  279,   -1,  281,  282,  283,
  284,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,  293,
  294,  295,  296,  297,   -1,   -1,  300,   -1,  302,   -1,
  304,   -1,  306,  307,   -1,  309,  310,  311,  312,   -1,
   -1,  315,  316,  317,  318,   -1,   -1,  321,  322,  323,
   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  333,
  334,   -1,  336,  337,  338,   -1,   -1,   -1,  342,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,   -1,
   -1,  365,  366,  261,   -1,   -1,   -1,  265,   -1,  267,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,   -1,  277,
   -1,  279,   -1,  281,  282,  283,  284,   -1,   -1,  287,
  288,   -1,   -1,   -1,   -1,  293,   -1,  295,  296,  297,
   -1,   -1,  300,   -1,  302,   -1,  304,   -1,   -1,  307,
   -1,  309,  310,  311,  312,  419,   -1,   -1,  316,  317,
  318,   -1,   -1,  321,  322,  323,   -1,   -1,   -1,   -1,
   -1,   -1,  330,  331,   -1,  333,  334,   -1,  336,  337,
  338,   -1,   -1,   -1,  342,   -1,   -1,  261,   -1,   -1,
   -1,  265,   -1,  267,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,   -1,  277,  362,  279,   -1,  281,  282,  283,
  284,  369,   -1,  287,  288,   -1,   -1,   -1,   -1,  293,
  378,  295,  296,  297,   -1,   -1,  300,   -1,  302,   -1,
  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,  316,  317,  318,   -1,   -1,  321,  322,  323,
   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  333,
  334,  419,  336,  337,  338,   -1,   -1,   -1,  342,   -1,
   -1,  261,   -1,   -1,   -1,  265,   -1,  267,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,   -1,  277,  362,  279,
   -1,  281,  282,  283,  284,  369,   -1,  287,  288,   -1,
   -1,   -1,   -1,  293,  378,  295,  296,  297,   -1,   -1,
  300,   -1,  302,   -1,  304,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,   -1,
   -1,  321,  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,
  330,  331,   -1,  333,  334,  419,  336,  337,  338,   -1,
   -1,   -1,  342,   -1,   -1,  261,   -1,   -1,   -1,  265,
   -1,  267,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
   -1,  277,  362,  279,   -1,  281,  282,  283,  284,   -1,
   -1,  287,  288,   -1,   -1,   -1,   -1,  293,  378,  295,
  296,  297,   -1,   -1,  300,   -1,  302,   -1,  304,   -1,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,
  316,  317,  318,   -1,   -1,  321,  322,  323,   -1,   -1,
   -1,   -1,   -1,   -1,  330,  331,   -1,  333,  334,  419,
  336,  337,  338,   -1,   -1,   -1,  342,   -1,   -1,  261,
   -1,   -1,   -1,  265,   -1,  267,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,   -1,  277,  362,  279,   -1,  281,
  282,  283,  284,  369,   -1,  287,  288,   -1,   -1,   -1,
   -1,  293,   -1,  295,  296,  297,   -1,   -1,  300,   -1,
  302,  261,  304,   -1,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,  316,  317,  318,   -1,   -1,  321,
  322,  323,   -1,   -1,  284,   -1,   -1,   -1,  330,  331,
   -1,  333,  334,  419,  336,  337,  338,  297,   -1,   -1,
  342,   -1,  302,   -1,   -1,  305,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,
  362,  321,   -1,   -1,   -1,  325,   -1,  369,   -1,   -1,
   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,  357,   -1,   -1,
   -1,  285,  362,   -1,  288,   -1,   -1,   -1,   -1,  369,
  370,  295,  372,   -1,  374,   -1,  300,  419,  302,  303,
  304,   -1,  306,   -1,   -1,   -1,   -1,  387,   -1,  313,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,  419,
  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,  373,
   -1,  375,   -1,   -1,  378,  379,  380,  381,   -1,   -1,
   -1,  385,   -1,  387,   -1,   -1,   -1,   -1,   -1,  393,
  394,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,   -1,  279,   -1,  418,  419,  420,  421,  285,   -1,
   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,  306,
   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,  345,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  372,   -1,   -1,  375,   -1,
   -1,  378,  379,  380,  381,   -1,   -1,   -1,  385,   -1,
  387,   -1,   -1,   -1,   -1,   -1,  393,  394,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,  418,  419,  420,  421,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,  337,   -1,   -1,
   -1,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  372,   -1,   -1,   -1,   -1,   -1,  378,  379,
  380,  381,   -1,   -1,   -1,  385,   -1,  387,   -1,   -1,
   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,   -1,   -1,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,  418,  419,
  420,  421,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,  341,   -1,
   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,
   -1,   -1,   -1,   -1,   -1,  378,  379,  380,  381,   -1,
   -1,   -1,  385,   -1,  387,   -1,   -1,   -1,   -1,   -1,
  393,  394,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,  418,  419,  420,  421,  285,
   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,
   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,  345,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,
   -1,   -1,  368,   -1,   -1,   -1,  372,   -1,   -1,   -1,
   -1,   -1,  378,  379,  380,  381,   -1,   -1,   -1,  385,
   -1,  387,   -1,   -1,   -1,   -1,   -1,  393,  394,   -1,
   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,
  279,   -1,  418,  419,  420,  421,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,
   -1,   -1,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,  368,
   -1,   -1,   -1,  372,   -1,   -1,   -1,   -1,   -1,  378,
  379,  380,  381,   -1,   -1,   -1,  385,   -1,  387,   -1,
   -1,   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,  418,
  419,  420,  421,  285,   -1,   -1,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,
   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  372,   -1,   -1,   -1,   -1,   -1,  378,  379,  380,  381,
   -1,   -1,   -1,  385,   -1,  387,   -1,   -1,   -1,   -1,
   -1,  393,  394,   -1,   -1,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,  418,  419,  420,  421,
  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,
   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,
  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,   -1,   -1,
   -1,   -1,   -1,  378,  379,  380,  381,   -1,   -1,   -1,
  385,   -1,  387,   -1,   -1,   -1,   -1,   -1,  393,  394,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,  418,  419,  420,  421,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  372,   -1,   -1,   -1,   -1,   -1,
  378,  379,  380,  381,   -1,   -1,   -1,  385,   -1,  387,
   -1,   -1,   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
  418,  419,  420,  421,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  372,   -1,   -1,   -1,   -1,   -1,  378,  379,  380,
  381,   -1,   -1,   -1,  385,   -1,  387,   -1,   -1,   -1,
   -1,   -1,  393,  394,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,  418,  419,  420,
  421,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,   -1,
   -1,   -1,   -1,   -1,  378,  379,  380,  381,   -1,   -1,
   -1,  385,   -1,  387,   -1,  264,  265,   -1,  267,  393,
  394,  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,
  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,  418,  419,  295,  421,   -1,   -1,
   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  372,   -1,   -1,   -1,   -1,   -1,  378,
  379,  380,  381,   -1,   -1,   -1,  385,   -1,  387,   -1,
  264,  265,   -1,  267,  393,  394,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,
   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,  261,  418,
  419,  295,  421,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  284,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,  297,  329,  330,  331,  332,  302,
  334,   -1,   -1,  337,  307,   -1,  309,  310,  311,  312,
   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,
   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,
  333,   -1,   -1,  336,   -1,  338,  264,  265,  372,  267,
   -1,   -1,  270,  271,   -1,  379,  380,  275,  276,  277,
   -1,  279,   -1,  387,   -1,   -1,   -1,  285,   -1,  362,
  288,   -1,  365,  366,   -1,   -1,  369,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  418,  419,   -1,  421,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,  337,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  372,   -1,  263,   -1,  265,   -1,
  267,  379,  380,  270,   -1,  272,  273,   -1,  275,  387,
  277,   -1,  279,   -1,  281,  282,  283,   -1,   -1,   -1,
  287,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,  296,
   -1,   -1,   -1,  300,   -1,   -1,   -1,  304,   -1,   -1,
  418,  419,   -1,  421,   -1,   -1,   -1,   -1,  315,  316,
   -1,  318,   -1,   -1,   -1,  322,  323,   -1,   -1,   -1,
   -1,   -1,   -1,  330,  331,  264,  265,  334,  267,   -1,
  337,  270,  271,   -1,   -1,  342,  275,  276,  277,   -1,
  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,  365,  366,
   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,  378,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,   -1,  334,   -1,   -1,  337,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  419,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,
  265,   -1,  267,  372,   -1,  270,   -1,  272,  273,   -1,
  275,   -1,  277,   -1,  279,   -1,  281,  282,  283,   -1,
   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,  293,   -1,
  295,  296,   -1,   -1,   -1,  300,   -1,   -1,   -1,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  418,
  419,  316,   -1,  318,   -1,   -1,   -1,  322,  323,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  265,  334,
  267,   -1,  337,  270,   -1,   -1,  273,  342,  275,   -1,
  277,   -1,  279,   -1,  281,  282,  283,   -1,   -1,   -1,
  287,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,   -1,
  265,   -1,  267,  300,   -1,  270,   -1,  304,  273,   -1,
  275,   -1,  277,  378,  279,   -1,  281,  282,  283,  316,
   -1,  318,  287,  288,   -1,  322,   -1,   -1,  293,   -1,
  295,   -1,   -1,  330,  331,  300,   -1,  334,   -1,  304,
  337,   -1,   -1,   -1,   -1,  342,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,  419,   -1,   -1,  322,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  265,  334,
  267,   -1,  337,  270,   -1,   -1,   -1,  342,  275,   -1,
   -1,  378,  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
  265,   -1,  267,  300,   -1,  270,   -1,  304,   -1,  306,
  275,  308,   -1,   -1,  279,   -1,  313,   -1,   -1,  316,
   -1,  318,  419,  288,   -1,  322,   -1,   -1,  325,   -1,
  295,   -1,   -1,  330,  331,  300,   -1,  334,   -1,  304,
  337,  306,   -1,  308,   -1,  265,   -1,  267,  313,   -1,
  270,  316,   -1,  318,  419,  275,   -1,  322,   -1,  279,
  325,   -1,   -1,   -1,   -1,  330,  331,   -1,  288,  334,
   -1,   -1,  337,   -1,   -1,  295,  373,   -1,   -1,   -1,
  300,   -1,   -1,   -1,  304,   -1,  306,   -1,   -1,   -1,
   -1,   -1,   -1,  313,   -1,   -1,  316,   -1,  318,   -1,
   -1,   -1,  322,   -1,   -1,  325,  371,   -1,   -1,   -1,
  330,  331,   -1,   -1,  334,   -1,  265,  337,  267,   -1,
   -1,  270,  419,   -1,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,
   -1,   -1,   -1,  363,   -1,   -1,  295,   -1,   -1,   -1,
   -1,  300,   -1,   -1,  419,  304,   -1,  306,   -1,  308,
   -1,  265,   -1,  267,  313,   -1,  270,  316,   -1,  318,
   -1,  275,   -1,  322,   -1,  279,  325,   -1,   -1,   -1,
   -1,  330,  331,   -1,  288,  334,   -1,   -1,  337,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,   -1,  419,
  304,   -1,  306,   -1,  308,   -1,  265,   -1,  267,  313,
   -1,  270,  316,   -1,  318,   -1,  275,   -1,  322,   -1,
  279,  325,   -1,   -1,  283,   -1,  330,  331,   -1,  288,
  334,   -1,   -1,  337,  293,   -1,  295,   -1,   -1,   -1,
   -1,  300,   -1,   -1,   -1,  304,  305,   -1,   -1,   -1,
   -1,  265,   -1,  267,   -1,   -1,  270,  316,  272,  318,
   -1,  275,   -1,  322,   -1,  279,   -1,   -1,   -1,   -1,
  419,  330,  331,   -1,  288,  334,   -1,   -1,  337,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  265,
  304,  267,   -1,   -1,  270,   -1,   -1,   -1,   -1,  275,
   -1,   -1,  316,  279,  318,   -1,   -1,   -1,  322,  323,
   -1,   -1,  288,   -1,   -1,  419,  330,  331,   -1,  295,
  334,   -1,   -1,  337,  300,   -1,   -1,   -1,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,   -1,  318,   -1,   -1,   -1,  322,   -1,  261,   -1,
   -1,   -1,   -1,   -1,  330,  331,   -1,   -1,  334,  272,
  419,  337,   -1,   -1,  277,   -1,   -1,   -1,  281,   -1,
   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  296,  297,   -1,   -1,  363,  301,  302,
   -1,  261,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,  272,   -1,  317,  419,   -1,  277,  321,   -1,
  323,  281,   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,
  333,   -1,  335,  336,   -1,  338,  296,  297,   -1,  342,
   -1,  301,  302,   -1,   -1,  261,   -1,  307,   -1,  309,
  310,  311,  312,  419,   -1,   -1,   -1,  317,   -1,  362,
   -1,  321,   -1,  323,   -1,   -1,  369,  370,  284,   -1,
   -1,   -1,   -1,  333,   -1,  261,  336,  263,  338,   -1,
   -1,  297,  342,   -1,   -1,   -1,  302,   -1,   -1,   -1,
   -1,  307,   -1,  309,  310,  311,  312,   -1,  284,  315,
   -1,  317,  362,   -1,   -1,  321,   -1,   -1,   -1,  369,
  370,  297,   -1,   -1,   -1,   -1,  302,  333,   -1,   -1,
  336,  307,  338,  309,  310,  311,  312,   -1,   -1,   -1,
   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  261,  362,  333,   -1,   -1,
  336,   -1,  338,  369,  370,   -1,  272,   -1,   -1,   -1,
   -1,  277,   -1,   -1,   -1,  281,   -1,   -1,  284,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  362,   -1,   -1,   -1,
  296,  297,   -1,  369,  370,  301,  302,   -1,  261,   -1,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,  272,
   -1,  317,   -1,   -1,  277,  321,   -1,  323,  281,   -1,
   -1,  284,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,
  336,   -1,  338,  296,  297,   -1,  342,   -1,  301,  302,
   -1,  261,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,   -1,   -1,  317,   -1,  362,   -1,  321,   -1,
  323,   -1,   -1,  369,  284,   -1,   -1,   -1,   -1,   -1,
  333,   -1,   -1,  336,   -1,  338,   -1,  297,   -1,  342,
   -1,  261,  302,   -1,   -1,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,  362,
   -1,  321,   -1,   -1,  284,   -1,  369,   -1,   -1,   -1,
   -1,   -1,   -1,  333,   -1,   -1,  336,  297,  338,   -1,
   -1,  261,  302,  263,   -1,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,  315,   -1,  317,   -1,   -1,
   -1,  321,  362,   -1,  284,  365,  366,   -1,   -1,  369,
   -1,  261,   -1,  333,   -1,   -1,  336,  297,  338,   -1,
   -1,   -1,  302,   -1,   -1,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,  284,   -1,   -1,  317,   -1,   -1,
   -1,  321,  362,   -1,   -1,   -1,   -1,  297,   -1,  369,
   -1,  261,  302,  333,   -1,   -1,  336,  307,  338,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,
   -1,  321,   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  362,  333,   -1,   -1,  336,  297,  338,  369,
   -1,   -1,  302,   -1,   -1,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,
   -1,  321,  362,   -1,   -1,  365,  366,   -1,   -1,   -1,
   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  362,
  };

#line 7304 "cs-parser.jay"

// <summary>
//  A class used to hold info about an operator declarator
// </summary>
class OperatorDeclaration {
	public readonly Operator.OpType optype;
	public readonly FullNamedExpression ret_type;
	public readonly Location location;

	public OperatorDeclaration (Operator.OpType op, FullNamedExpression ret_type, Location location)
	{
		optype = op;
		this.ret_type = ret_type;
		this.location = location;
	}
}

void Error_ExpectingTypeName (Expression expr)
{
	if (expr is Invocation){
		report.Error (1002, expr.Location, "Expecting `;'");
	} else {
		expr.Error_InvalidExpressionStatement (report);
	}
}

void Error_ParameterModifierNotValid (string modifier, Location loc)
{
	report.Error (631, loc, "The parameter modifier `{0}' is not valid in this context",
			              modifier);
}

void Error_DuplicateParameterModifier (Location loc, Parameter.Modifier mod)
{
	report.Error (1107, loc, "Duplicate parameter modifier `{0}'",
  		Parameter.GetModifierSignature (mod));
}

void Error_TypeExpected (Location loc)
{
	report.Error (1031, loc, "Type expected");
}

void Error_UnsafeCodeNotAllowed (Location loc)
{
	report.Error (227, loc, "Unsafe code requires the `unsafe' command line option to be specified");
}

void Warning_EmptyStatement (Location loc)
{
	report.Warning (642, 3, loc, "Possible mistaken empty statement");
}

void Error_NamedArgumentExpected (NamedArgument a)
{
	report.Error (1738, a.Location, "Named arguments must appear after the positional arguments");
}

void Error_MissingInitializer (Location loc)
{
	report.Error (210, loc, "You must provide an initializer in a fixed or using statement declaration");
}

object Error_AwaitAsIdentifier (object token)
{
	if (async_block) {
		report.Error (4003, GetLocation (token), "`await' cannot be used as an identifier within an async method or lambda expression");
		return new LocatedToken ("await", GetLocation (token));
	}

	return token;
}

void push_current_container (TypeDefinition tc, object partial_token)
{
	if (module.Evaluator != null){
		tc.Definition.Modifiers = tc.ModFlags = (tc.ModFlags & ~Modifiers.AccessibilityMask) | Modifiers.PUBLIC;
		if (undo == null)
			undo = new Undo ();

		undo.AddTypeContainer (current_container, tc);
	}
	
	if (partial_token != null)
		current_container.AddPartial (tc);
	else
		current_container.AddTypeContainer (tc);
		
	++lexer.parsing_declaration;
	current_container = tc;
	current_type = tc;
}

TypeContainer pop_current_class ()
{
	var retval = current_container;

	current_container = current_container.Parent;
	current_type = current_type.Parent as TypeDefinition;

	return retval;
}

[System.Diagnostics.Conditional ("FULL_AST")]
void StoreModifierLocation (object token, Location loc)
{
	if (lbag == null)
		return;

	if (mod_locations == null)
  		mod_locations = new List<Tuple<Modifiers, Location>> ();

	mod_locations.Add (Tuple.Create ((Modifiers) token, loc));
}

[System.Diagnostics.Conditional ("FULL_AST")]
void PushLocation (Location loc)
{
	if (location_stack == null)
		location_stack = new Stack<Location> ();

	location_stack.Push (loc);
}

Location PopLocation ()
{
	if (location_stack == null)
		return Location.Null;

	return location_stack.Pop ();
}

string CheckAttributeTarget (int token, string a, Location l)
{
	switch (a) {
	case "assembly" : case "module" : case "field" : case "method" : case "param" : case "property" : case "type" :
			return a;
	}

	if (!Tokenizer.IsValidIdentifier (a)) {
		Error_SyntaxError (token);
	} else {
		report.Warning (658, 1, l,
			 "`{0}' is invalid attribute target. All attributes in this attribute section will be ignored", a);
	}

	return string.Empty;
}

static bool IsUnaryOperator (Operator.OpType op)
{
	switch (op) {
		
	case Operator.OpType.LogicalNot: 
	case Operator.OpType.OnesComplement: 
	case Operator.OpType.Increment:
	case Operator.OpType.Decrement:
	case Operator.OpType.True: 
	case Operator.OpType.False: 
	case Operator.OpType.UnaryPlus: 
	case Operator.OpType.UnaryNegation:
		return true;
	}
	return false;
}

void syntax_error (Location l, string msg)
{
	report.Error (1003, l, "Syntax error, " + msg);
}

Tokenizer lexer;

public Tokenizer Lexer {
	get {
		return lexer;
	}
}		   

public CSharpParser (SeekableStreamReader reader, CompilationSourceFile file, ParserSession session)
	: this (reader, file, file.Compiler.Report, session)
{
}

public CSharpParser (SeekableStreamReader reader, CompilationSourceFile file, Report report, ParserSession session)
{
	this.file = file;
	current_container = current_namespace = file;
	
	this.module = file.Module;
	this.compiler = file.Compiler;
	this.settings = compiler.Settings;
	this.report = report;
	
	lang_version = settings.Version;
	yacc_verbose_flag = settings.VerboseParserFlag;
	doc_support = settings.DocumentationFile != null;
	lexer = new Tokenizer (reader, file, session, report);
	oob_stack = new Stack<object> ();
	lbag = session.LocationsBag;
	use_global_stacks = session.UseJayGlobalArrays;
	parameters_bucket = session.ParametersStack;
}

public void parse ()
{
	eof_token = Token.EOF;
	
	try {
		if (yacc_verbose_flag > 1)
			yyparse (lexer, new yydebug.yyDebugSimple ());
		else
			yyparse (lexer);
			
		Tokenizer tokenizer = lexer as Tokenizer;
		tokenizer.cleanup ();		
	} catch (Exception e){
	  	if (e is yyParser.yyUnexpectedEof) {
			Error_SyntaxError (yyToken);
			UnexpectedEOF = true;
			return;
		}
			
		if (e is yyParser.yyException) {
			if (report.Errors == 0)
				report.Error (-25, lexer.Location, "Parsing error");
		} else {
			// Used by compiler-tester to test internal errors
			if (yacc_verbose_flag > 0 || e is FatalException)
				throw;
		
			report.Error (589, lexer.Location, "Internal compiler error during parsing" + e);
		}
	}
}

void CheckToken (int error, int yyToken, string msg, Location loc)
{
	if (yyToken >= Token.FIRST_KEYWORD && yyToken <= Token.LAST_KEYWORD)
		report.Error (error, loc, "{0}: `{1}' is a keyword", msg, GetTokenName (yyToken));
	else
		report.Error (error, loc, msg);
}

string ConsumeStoredComment ()
{
	string s = tmpComment;
	tmpComment = null;
	Lexer.doc_state = XmlCommentState.Allowed;
	return s;
}

void FeatureIsNotAvailable (Location loc, string feature)
{
	report.FeatureIsNotAvailable (compiler, loc, feature);
}

Location GetLocation (object obj)
{
	var lt = obj as LocatedToken;
	if (lt != null)
		return lt.Location;
		
	var mn = obj as MemberName;
	if (mn != null)
		return mn.Location;
		
	var expr = obj as Expression;
	if (expr != null)
		return expr.Location;

	return lexer.Location;
}

void start_block (Location loc)
{
	if (current_block == null) {
		current_block = new ToplevelBlock (compiler, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else if (parsing_anonymous_method) {
		current_block = new ParametersBlock (current_block, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else {
		current_block = new ExplicitBlock (current_block, loc, Location.Null);
	}
}

Block
end_block (Location loc)
{
	Block retval = current_block.Explicit;
	retval.SetEndLocation (loc);
	current_block = retval.Parent;
	return retval;
}

void start_anonymous (bool isLambda, ParametersCompiled parameters, bool isAsync, Location loc)
{
	oob_stack.Push (current_anonymous_method);
	oob_stack.Push (current_local_parameters);
	oob_stack.Push (current_variable);
	oob_stack.Push (async_block);

	current_local_parameters = parameters;
	if (isLambda) {
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (loc, "lambda expressions");

		current_anonymous_method = new LambdaExpression (loc);
	} else {
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (loc, "anonymous methods");
			
		current_anonymous_method = new AnonymousMethodExpression (loc);
	}

	async_block = isAsync;
	// Force the next block to be created as a ToplevelBlock
	parsing_anonymous_method = true;
}

/*
 * Completes the anonymous method processing, if lambda_expr is null, this
 * means that we have a Statement instead of an Expression embedded 
 */
AnonymousMethodExpression end_anonymous (ParametersBlock anon_block)
{
	AnonymousMethodExpression retval;

	if (async_block)
		anon_block.IsAsync = true;

	current_anonymous_method.Block = anon_block;
	retval = current_anonymous_method;

	async_block = (bool) oob_stack.Pop ();
	current_variable = (BlockVariable) oob_stack.Pop ();
	current_local_parameters = (ParametersCompiled) oob_stack.Pop ();
	current_anonymous_method = (AnonymousMethodExpression) oob_stack.Pop ();

	return retval;
}

void Error_SyntaxError (int token)
{
	Error_SyntaxError (0, token);
}

void Error_SyntaxError (int error_code, int token)
{
	Error_SyntaxError (error_code, token, "Unexpected symbol");
}

void Error_SyntaxError (int error_code, int token, string msg)
{
	Lexer.CompleteOnEOF = false;

	// An error message has been reported by tokenizer
	if (token == Token.ERROR)
		return;
	
	// Avoid duplicit error message after unterminated string literals
	if (token == Token.LITERAL && lexer.Location.Column == 0)
		return;

	string symbol = GetSymbolName (token);
	string expecting = GetExpecting ();
	var loc = lexer.Location - symbol.Length;
	
	if (error_code == 0) {
		if (expecting == "`identifier'") {
			if (token > Token.FIRST_KEYWORD && token < Token.LAST_KEYWORD) {
				report.Error (1041, loc, "Identifier expected, `{0}' is a keyword", symbol);
				return;
			}
			
			error_code = 1001;
			expecting = "identifier";
		} else if (expecting == "`)'") {
			error_code = 1026;
		} else {
			error_code = 1525;
		}
	}
	
	if (string.IsNullOrEmpty (expecting))
		report.Error (error_code, loc, "{1} `{0}'", symbol, msg);
	else
		report.Error (error_code, loc, "{2} `{0}', expecting {1}", symbol, expecting, msg);	  
}

string GetExpecting ()
{
	int [] tokens = yyExpectingTokens (yyExpectingState);
	var names = new List<string> (tokens.Length);
	bool has_type = false;
	bool has_identifier = false;
	for (int i = 0; i < tokens.Length; i++){
		int token = tokens [i];
		has_identifier |= token == Token.IDENTIFIER;
		
		string name = GetTokenName (token);
		if (name == "<internal>")
			continue;
			
		has_type |= name == "type";
		if (names.Contains (name))
			continue;
		
		names.Add (name);
	}

	//
	// Too many tokens to enumerate
	//
	if (names.Count > 8)
		return null;

	if (has_type && has_identifier)
		names.Remove ("identifier");

	if (names.Count == 1)
		return "`" + GetTokenName (tokens [0]) + "'";
	
	StringBuilder sb = new StringBuilder ();
	names.Sort ();
	int count = names.Count;
	for (int i = 0; i < count; i++){
		bool last = i + 1 == count;
		if (last)
			sb.Append ("or ");
		sb.Append ('`');
		sb.Append (names [i]);
		sb.Append (last ? "'" : count < 3 ? "' " : "', ");
	}
	return sb.ToString ();
}


string GetSymbolName (int token)
{
	switch (token){
	case Token.LITERAL:
		return ((Constant)lexer.Value).GetValue ().ToString ();
	case Token.IDENTIFIER:
		return ((LocatedToken)lexer.Value).Value;

	case Token.BOOL:
		return "bool";
	case Token.BYTE:
		return "byte";
	case Token.CHAR:
		return "char";
	case Token.VOID:
		return "void";
	case Token.DECIMAL:
		return "decimal";
	case Token.DOUBLE:
		return "double";
	case Token.FLOAT:
		return "float";
	case Token.INT:
		return "int";
	case Token.LONG:
		return "long";
	case Token.SBYTE:
		return "sbyte";
	case Token.SHORT:
		return "short";
	case Token.STRING:
		return "string";
	case Token.UINT:
		return "uint";
	case Token.ULONG:
		return "ulong";
	case Token.USHORT:
		return "ushort";
	case Token.OBJECT:
		return "object";
		
	case Token.PLUS:
		return "+";
	case Token.UMINUS:
	case Token.MINUS:
		return "-";
	case Token.BANG:
		return "!";
	case Token.BITWISE_AND:
		return "&";
	case Token.BITWISE_OR:
		return "|";
	case Token.STAR:
		return "*";
	case Token.PERCENT:
		return "%";
	case Token.DIV:
		return "/";
	case Token.CARRET:
		return "^";
	case Token.OP_INC:
		return "++";
	case Token.OP_DEC:
		return "--";
	case Token.OP_SHIFT_LEFT:
		return "<<";
	case Token.OP_SHIFT_RIGHT:
		return ">>";
	case Token.OP_LT:
		return "<";
	case Token.OP_GT:
		return ">";
	case Token.OP_LE:
		return "<=";
	case Token.OP_GE:
		return ">=";
	case Token.OP_EQ:
		return "==";
	case Token.OP_NE:
		return "!=";
	case Token.OP_AND:
		return "&&";
	case Token.OP_OR:
		return "||";
	case Token.OP_PTR:
		return "->";
	case Token.OP_COALESCING:	
		return "??";
	case Token.OP_MULT_ASSIGN:
		return "*=";
	case Token.OP_DIV_ASSIGN:
		return "/=";
	case Token.OP_MOD_ASSIGN:
		return "%=";
	case Token.OP_ADD_ASSIGN:
		return "+=";
	case Token.OP_SUB_ASSIGN:
		return "-=";
	case Token.OP_SHIFT_LEFT_ASSIGN:
		return "<<=";
	case Token.OP_SHIFT_RIGHT_ASSIGN:
		return ">>=";
	case Token.OP_AND_ASSIGN:
		return "&=";
	case Token.OP_XOR_ASSIGN:
		return "^=";
	case Token.OP_OR_ASSIGN:
		return "|=";
	}

	return GetTokenName (token);
}

static string GetTokenName (int token)
{
	switch (token){
	case Token.ABSTRACT:
		return "abstract";
	case Token.AS:
		return "as";
	case Token.ADD:
		return "add";
	case Token.ASYNC:
		return "async";
	case Token.BASE:
		return "base";
	case Token.BREAK:
		return "break";
	case Token.CASE:
		return "case";
	case Token.CATCH:
		return "catch";
	case Token.CHECKED:
		return "checked";
	case Token.CLASS:
		return "class";
	case Token.CONST:
		return "const";
	case Token.CONTINUE:
		return "continue";
	case Token.DEFAULT:
		return "default";
	case Token.DELEGATE:
		return "delegate";
	case Token.DO:
		return "do";
	case Token.ELSE:
		return "else";
	case Token.ENUM:
		return "enum";
	case Token.EVENT:
		return "event";
	case Token.EXPLICIT:
		return "explicit";
	case Token.EXTERN:
	case Token.EXTERN_ALIAS:
		return "extern";
	case Token.FALSE:
		return "false";
	case Token.FINALLY:
		return "finally";
	case Token.FIXED:
		return "fixed";
	case Token.FOR:
		return "for";
	case Token.FOREACH:
		return "foreach";
	case Token.GOTO:
		return "goto";
	case Token.IF:
		return "if";
	case Token.IMPLICIT:
		return "implicit";
	case Token.IN:
		return "in";
	case Token.INTERFACE:
		return "interface";
	case Token.INTERNAL:
		return "internal";
	case Token.IS:
		return "is";
	case Token.LOCK:
		return "lock";
	case Token.NAMESPACE:
		return "namespace";
	case Token.NEW:
		return "new";
	case Token.NULL:
		return "null";
	case Token.OPERATOR:
		return "operator";
	case Token.OUT:
		return "out";
	case Token.OVERRIDE:
		return "override";
	case Token.PARAMS:
		return "params";
	case Token.PRIVATE:
		return "private";
	case Token.PROTECTED:
		return "protected";
	case Token.PUBLIC:
		return "public";
	case Token.READONLY:
		return "readonly";
	case Token.REF:
		return "ref";
	case Token.RETURN:
		return "return";
	case Token.REMOVE:
		return "remove";
	case Token.SEALED:
		return "sealed";
	case Token.SIZEOF:
		return "sizeof";
	case Token.STACKALLOC:
		return "stackalloc";
	case Token.STATIC:
		return "static";
	case Token.STRUCT:
		return "struct";
	case Token.SWITCH:
		return "switch";
	case Token.THIS:
		return "this";
	case Token.THROW:
		return "throw";
	case Token.TRUE:
		return "true";
	case Token.TRY:
		return "try";
	case Token.TYPEOF:
		return "typeof";
	case Token.UNCHECKED:
		return "unchecked";
	case Token.UNSAFE:
		return "unsafe";
	case Token.USING:
		return "using";
	case Token.VIRTUAL:
		return "virtual";
	case Token.VOLATILE:
		return "volatile";
	case Token.WHERE:
		return "where";
	case Token.WHILE:
		return "while";
	case Token.ARGLIST:
		return "__arglist";
	case Token.REFVALUE:
		return "__refvalue";
	case Token.REFTYPE:
		return "__reftype";
	case Token.MAKEREF:
		return "__makeref";
	case Token.PARTIAL:
		return "partial";
	case Token.ARROW:
		return "=>";
	case Token.FROM:
	case Token.FROM_FIRST:
		return "from";
	case Token.JOIN:
		return "join";
	case Token.ON:
		return "on";
	case Token.EQUALS:
		return "equals";
	case Token.SELECT:
		return "select";
	case Token.GROUP:
		return "group";
	case Token.BY:
		return "by";
	case Token.LET:
		return "let";
	case Token.ORDERBY:
		return "orderby";
	case Token.ASCENDING:
		return "ascending";
	case Token.DESCENDING:
		return "descending";
	case Token.INTO:
		return "into";
	case Token.GET:
		return "get";
	case Token.SET:
		return "set";
	case Token.OPEN_BRACE:
		return "{";
	case Token.CLOSE_BRACE:
		return "}";
	case Token.OPEN_BRACKET:
	case Token.OPEN_BRACKET_EXPR:
		return "[";
	case Token.CLOSE_BRACKET:
		return "]";
	case Token.OPEN_PARENS_CAST:
	case Token.OPEN_PARENS_LAMBDA:
	case Token.OPEN_PARENS:
		return "(";
	case Token.CLOSE_PARENS:
		return ")";
	case Token.DOT:
		return ".";
	case Token.COMMA:
		return ",";
	case Token.DEFAULT_COLON:
		return "default:";
	case Token.COLON:
		return ":";
	case Token.SEMICOLON:
		return ";";
	case Token.TILDE:
		return "~";
		
	case Token.PLUS:
	case Token.UMINUS:
	case Token.MINUS:
	case Token.BANG:
	case Token.OP_LT:
	case Token.OP_GT:
	case Token.BITWISE_AND:
	case Token.BITWISE_OR:
	case Token.STAR:
	case Token.PERCENT:
	case Token.DIV:
	case Token.CARRET:
	case Token.OP_INC:
	case Token.OP_DEC:
	case Token.OP_SHIFT_LEFT:
	case Token.OP_SHIFT_RIGHT:
	case Token.OP_LE:
	case Token.OP_GE:
	case Token.OP_EQ:
	case Token.OP_NE:
	case Token.OP_AND:
	case Token.OP_OR:
	case Token.OP_PTR:
	case Token.OP_COALESCING:	
	case Token.OP_MULT_ASSIGN:
	case Token.OP_DIV_ASSIGN:
	case Token.OP_MOD_ASSIGN:
	case Token.OP_ADD_ASSIGN:
	case Token.OP_SUB_ASSIGN:
	case Token.OP_SHIFT_LEFT_ASSIGN:
	case Token.OP_SHIFT_RIGHT_ASSIGN:
	case Token.OP_AND_ASSIGN:
	case Token.OP_XOR_ASSIGN:
	case Token.OP_OR_ASSIGN:
	case Token.INTERR_OPERATOR:
		return "<operator>";

	case Token.BOOL:
	case Token.BYTE:
	case Token.CHAR:
	case Token.VOID:
	case Token.DECIMAL:
	case Token.DOUBLE:
	case Token.FLOAT:
	case Token.INT:
	case Token.LONG:
	case Token.SBYTE:
	case Token.SHORT:
	case Token.STRING:
	case Token.UINT:
	case Token.ULONG:
	case Token.USHORT:
	case Token.OBJECT:
		return "type";
	
	case Token.ASSIGN:
		return "=";
	case Token.OP_GENERICS_LT:
	case Token.GENERIC_DIMENSION:
		return "<";
	case Token.OP_GENERICS_GT:
		return ">";
	case Token.INTERR:
	case Token.INTERR_NULLABLE:
		return "?";
	case Token.DOUBLE_COLON:
		return "::";
	case Token.LITERAL:
		return "value";
	case Token.IDENTIFIER:
	case Token.AWAIT:
		return "identifier";

	case Token.EOF:
		return "end-of-file";

		// All of these are internal.
	case Token.NONE:
	case Token.ERROR:
	case Token.FIRST_KEYWORD:
	case Token.EVAL_COMPILATION_UNIT_PARSER:
	case Token.EVAL_USING_DECLARATIONS_UNIT_PARSER:
	case Token.EVAL_STATEMENT_PARSER:
	case Token.LAST_KEYWORD:
	case Token.GENERATE_COMPLETION:
	case Token.COMPLETE_COMPLETION:
		return "<internal>";

		// A bit more robust.
	default:
		return yyNames [token];
        }
}

/* end end end */
}
#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 Console.Error.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int EOF = 257;
  public const int NONE = 258;
  public const int ERROR = 259;
  public const int FIRST_KEYWORD = 260;
  public const int ABSTRACT = 261;
  public const int AS = 262;
  public const int ADD = 263;
  public const int BASE = 264;
  public const int BOOL = 265;
  public const int BREAK = 266;
  public const int BYTE = 267;
  public const int CASE = 268;
  public const int CATCH = 269;
  public const int CHAR = 270;
  public const int CHECKED = 271;
  public const int CLASS = 272;
  public const int CONST = 273;
  public const int CONTINUE = 274;
  public const int DECIMAL = 275;
  public const int DEFAULT = 276;
  public const int DELEGATE = 277;
  public const int DO = 278;
  public const int DOUBLE = 279;
  public const int ELSE = 280;
  public const int ENUM = 281;
  public const int EVENT = 282;
  public const int EXPLICIT = 283;
  public const int EXTERN = 284;
  public const int FALSE = 285;
  public const int FINALLY = 286;
  public const int FIXED = 287;
  public const int FLOAT = 288;
  public const int FOR = 289;
  public const int FOREACH = 290;
  public const int GOTO = 291;
  public const int IF = 292;
  public const int IMPLICIT = 293;
  public const int IN = 294;
  public const int INT = 295;
  public const int INTERFACE = 296;
  public const int INTERNAL = 297;
  public const int IS = 298;
  public const int LOCK = 299;
  public const int LONG = 300;
  public const int NAMESPACE = 301;
  public const int NEW = 302;
  public const int NULL = 303;
  public const int OBJECT = 304;
  public const int OPERATOR = 305;
  public const int OUT = 306;
  public const int OVERRIDE = 307;
  public const int PARAMS = 308;
  public const int PRIVATE = 309;
  public const int PROTECTED = 310;
  public const int PUBLIC = 311;
  public const int READONLY = 312;
  public const int REF = 313;
  public const int RETURN = 314;
  public const int REMOVE = 315;
  public const int SBYTE = 316;
  public const int SEALED = 317;
  public const int SHORT = 318;
  public const int SIZEOF = 319;
  public const int STACKALLOC = 320;
  public const int STATIC = 321;
  public const int STRING = 322;
  public const int STRUCT = 323;
  public const int SWITCH = 324;
  public const int THIS = 325;
  public const int THROW = 326;
  public const int TRUE = 327;
  public const int TRY = 328;
  public const int TYPEOF = 329;
  public const int UINT = 330;
  public const int ULONG = 331;
  public const int UNCHECKED = 332;
  public const int UNSAFE = 333;
  public const int USHORT = 334;
  public const int USING = 335;
  public const int VIRTUAL = 336;
  public const int VOID = 337;
  public const int VOLATILE = 338;
  public const int WHERE = 339;
  public const int WHILE = 340;
  public const int ARGLIST = 341;
  public const int PARTIAL = 342;
  public const int ARROW = 343;
  public const int FROM = 344;
  public const int FROM_FIRST = 345;
  public const int JOIN = 346;
  public const int ON = 347;
  public const int EQUALS = 348;
  public const int SELECT = 349;
  public const int GROUP = 350;
  public const int BY = 351;
  public const int LET = 352;
  public const int ORDERBY = 353;
  public const int ASCENDING = 354;
  public const int DESCENDING = 355;
  public const int INTO = 356;
  public const int INTERR_NULLABLE = 357;
  public const int EXTERN_ALIAS = 358;
  public const int REFVALUE = 359;
  public const int REFTYPE = 360;
  public const int MAKEREF = 361;
  public const int ASYNC = 362;
  public const int AWAIT = 363;
  public const int INTERR_OPERATOR = 364;
  public const int GET = 365;
  public const int SET = 366;
  public const int LAST_KEYWORD = 367;
  public const int OPEN_BRACE = 368;
  public const int CLOSE_BRACE = 369;
  public const int OPEN_BRACKET = 370;
  public const int CLOSE_BRACKET = 371;
  public const int OPEN_PARENS = 372;
  public const int CLOSE_PARENS = 373;
  public const int DOT = 374;
  public const int COMMA = 375;
  public const int COLON = 376;
  public const int SEMICOLON = 377;
  public const int TILDE = 378;
  public const int PLUS = 379;
  public const int MINUS = 380;
  public const int BANG = 381;
  public const int ASSIGN = 382;
  public const int OP_LT = 383;
  public const int OP_GT = 384;
  public const int BITWISE_AND = 385;
  public const int BITWISE_OR = 386;
  public const int STAR = 387;
  public const int PERCENT = 388;
  public const int DIV = 389;
  public const int CARRET = 390;
  public const int INTERR = 391;
  public const int DOUBLE_COLON = 392;
  public const int OP_INC = 393;
  public const int OP_DEC = 394;
  public const int OP_SHIFT_LEFT = 395;
  public const int OP_SHIFT_RIGHT = 396;
  public const int OP_LE = 397;
  public const int OP_GE = 398;
  public const int OP_EQ = 399;
  public const int OP_NE = 400;
  public const int OP_AND = 401;
  public const int OP_OR = 402;
  public const int OP_MULT_ASSIGN = 403;
  public const int OP_DIV_ASSIGN = 404;
  public const int OP_MOD_ASSIGN = 405;
  public const int OP_ADD_ASSIGN = 406;
  public const int OP_SUB_ASSIGN = 407;
  public const int OP_SHIFT_LEFT_ASSIGN = 408;
  public const int OP_SHIFT_RIGHT_ASSIGN = 409;
  public const int OP_AND_ASSIGN = 410;
  public const int OP_XOR_ASSIGN = 411;
  public const int OP_OR_ASSIGN = 412;
  public const int OP_PTR = 413;
  public const int OP_COALESCING = 414;
  public const int OP_GENERICS_LT = 415;
  public const int OP_GENERICS_LT_DECL = 416;
  public const int OP_GENERICS_GT = 417;
  public const int LITERAL = 418;
  public const int IDENTIFIER = 419;
  public const int OPEN_PARENS_LAMBDA = 420;
  public const int OPEN_PARENS_CAST = 421;
  public const int GENERIC_DIMENSION = 422;
  public const int DEFAULT_COLON = 423;
  public const int OPEN_BRACKET_EXPR = 424;
  public const int EVAL_STATEMENT_PARSER = 425;
  public const int EVAL_COMPILATION_UNIT_PARSER = 426;
  public const int EVAL_USING_DECLARATIONS_UNIT_PARSER = 427;
  public const int DOC_SEE = 428;
  public const int GENERATE_COMPLETION = 429;
  public const int COMPLETE_COMPLETION = 430;
  public const int UMINUS = 431;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
